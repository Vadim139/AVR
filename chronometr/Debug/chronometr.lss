
chronometr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000039e0  00003a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  0080012a  0080012a  00003a9e  2**0
                  ALLOC
  3 .stab         00002c10  00000000  00000000  00003aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000139f  00000000  00000000  000066b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000be08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cad8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__ctors_end>
       4:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_1>
       8:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_2>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__vector_13>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_16>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      50:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_20>
      54:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_21>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>

0000007c <__c.1857>:
      7c:	73 65 74 52 54 43 20 2a 2a 3a 2a 2a 3a 2a 2a 00     setRTC **:**:**.

0000008c <__c.1855>:
      8c:	6c 63 64 44 72 61 77 00                             lcdDraw.

00000094 <__c.1853>:
      94:	6c 63 64 44 72 61 77 2a 2a 2a 2a 00                 lcdDraw****.

000000a0 <__c.1849>:
      a0:	6c 63 64 58 2a 2a 59 2a 00                          lcdX**Y*.

000000a9 <__c.1847>:
      a9:	6c 63 64 43 6c 65 61 72 00                          lcdClear.

000000b2 <__c.1845>:
      b2:	6c 65 64 4f 66 66 00                                ledOff.

000000b9 <__c.1837>:
      b9:	6c 65 64 2a 00 00 40 7a 10 f3 5a 00 a0 72 4e 18     led*..@z..Z..rN.
      c9:	09 00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b     .........vH.....
      d9:	54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80     T.....;.........
      e9:	96 98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00     .....@B.........
      f9:	00 10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00     ..'..........d..
     109:	00 00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c     ...............,
     119:	76 d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7     v...gO.#....Y...
     129:	96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84     ....S.:.Q.v.....
     139:	26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40     &....b.@|o.....@
     149:	f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9     ...o....Z*.\.kl.
     159:	67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0     gm......G.. ....
     169:	ed 90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00     ......5w........
     179:	20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12      N......3333..n.
     189:	83 11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db     ..A..!..;.U.....
     199:	18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20     ...K8..|......$ 
     1a9:	32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27        2.r^"....$...='

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e1       	ldi	r29, 0x10	; 16
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	11 e0       	ldi	r17, 0x01	; 1
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	e0 ee       	ldi	r30, 0xE0	; 224
     1cc:	f9 e3       	ldi	r31, 0x39	; 57
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <.do_copy_data_start>

000001d0 <.do_copy_data_loop>:
     1d0:	05 90       	lpm	r0, Z+
     1d2:	0d 92       	st	X+, r0

000001d4 <.do_copy_data_start>:
     1d4:	aa 32       	cpi	r26, 0x2A	; 42
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <.do_copy_data_loop>

000001da <__do_clear_bss>:
     1da:	11 e0       	ldi	r17, 0x01	; 1
     1dc:	aa e2       	ldi	r26, 0x2A	; 42
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a9 3a       	cpi	r26, 0xA9	; 169
     1e6:	b1 07       	cpc	r27, r17
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 91 0a 	call	0x1522	; 0x1522 <main>
     1ee:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <lcd_nibble>:
uint8_t x, y = 0;
uint8_t lcd_pos = LCD_LINE1;


static void lcd_nibble( uint8_t d )
{
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	69 97       	sbiw	r28, 0x19	; 25
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	de bf       	out	0x3e, r29	; 62
     206:	0f be       	out	0x3f, r0	; 63
     208:	cd bf       	out	0x3d, r28	; 61
     20a:	89 8f       	std	Y+25, r24	; 0x19
  LCD_D7 = 0; if( d & 1<<7 ) LCD_D7 = 1;
     20c:	e2 e2       	ldi	r30, 0x22	; 34
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	8f 7d       	andi	r24, 0xDF	; 223
     214:	80 83       	st	Z, r24
     216:	89 8d       	ldd	r24, Y+25	; 0x19
     218:	88 23       	and	r24, r24
     21a:	2c f4       	brge	.+10     	; 0x226 <lcd_nibble+0x30>
     21c:	e2 e2       	ldi	r30, 0x22	; 34
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 62       	ori	r24, 0x20	; 32
     224:	80 83       	st	Z, r24
  LCD_D6 = 0; if( d & 1<<6 ) LCD_D6 = 1;
     226:	e2 e2       	ldi	r30, 0x22	; 34
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	8f 7e       	andi	r24, 0xEF	; 239
     22e:	80 83       	st	Z, r24
     230:	89 8d       	ldd	r24, Y+25	; 0x19
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	80 74       	andi	r24, 0x40	; 64
     238:	90 70       	andi	r25, 0x00	; 0
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	29 f0       	breq	.+10     	; 0x248 <lcd_nibble+0x52>
     23e:	e2 e2       	ldi	r30, 0x22	; 34
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	80 61       	ori	r24, 0x10	; 16
     246:	80 83       	st	Z, r24
  LCD_D5 = 0; if( d & 1<<5 ) LCD_D5 = 1;
     248:	e2 e2       	ldi	r30, 0x22	; 34
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	87 7f       	andi	r24, 0xF7	; 247
     250:	80 83       	st	Z, r24
     252:	89 8d       	ldd	r24, Y+25	; 0x19
     254:	88 2f       	mov	r24, r24
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	80 72       	andi	r24, 0x20	; 32
     25a:	90 70       	andi	r25, 0x00	; 0
     25c:	00 97       	sbiw	r24, 0x00	; 0
     25e:	29 f0       	breq	.+10     	; 0x26a <lcd_nibble+0x74>
     260:	e2 e2       	ldi	r30, 0x22	; 34
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	88 60       	ori	r24, 0x08	; 8
     268:	80 83       	st	Z, r24
  LCD_D4 = 0; if( d & 1<<4 ) LCD_D4 = 1;
     26a:	e2 e2       	ldi	r30, 0x22	; 34
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8b 7f       	andi	r24, 0xFB	; 251
     272:	80 83       	st	Z, r24
     274:	89 8d       	ldd	r24, Y+25	; 0x19
     276:	88 2f       	mov	r24, r24
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	80 71       	andi	r24, 0x10	; 16
     27c:	90 70       	andi	r25, 0x00	; 0
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	29 f0       	breq	.+10     	; 0x28c <lcd_nibble+0x96>
     282:	e2 e2       	ldi	r30, 0x22	; 34
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	80 83       	st	Z, r24
  LCD_E0 = 1;
     28c:	e2 e2       	ldi	r30, 0x22	; 34
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	82 60       	ori	r24, 0x02	; 2
     294:	80 83       	st	Z, r24
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	a0 e8       	ldi	r26, 0x80	; 128
     29c:	bf e3       	ldi	r27, 0x3F	; 63
     29e:	8d 8b       	std	Y+21, r24	; 0x15
     2a0:	9e 8b       	std	Y+22, r25	; 0x16
     2a2:	af 8b       	std	Y+23, r26	; 0x17
     2a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     2a6:	6d 89       	ldd	r22, Y+21	; 0x15
     2a8:	7e 89       	ldd	r23, Y+22	; 0x16
     2aa:	8f 89       	ldd	r24, Y+23	; 0x17
     2ac:	98 8d       	ldd	r25, Y+24	; 0x18
     2ae:	2b ea       	ldi	r18, 0xAB	; 171
     2b0:	3a ea       	ldi	r19, 0xAA	; 170
     2b2:	4a ea       	ldi	r20, 0xAA	; 170
     2b4:	50 e4       	ldi	r21, 0x40	; 64
     2b6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	89 8b       	std	Y+17, r24	; 0x11
     2c0:	9a 8b       	std	Y+18, r25	; 0x12
     2c2:	ab 8b       	std	Y+19, r26	; 0x13
     2c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     2c6:	69 89       	ldd	r22, Y+17	; 0x11
     2c8:	7a 89       	ldd	r23, Y+18	; 0x12
     2ca:	8b 89       	ldd	r24, Y+19	; 0x13
     2cc:	9c 89       	ldd	r25, Y+20	; 0x14
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e8       	ldi	r20, 0x80	; 128
     2d4:	5f e3       	ldi	r21, 0x3F	; 63
     2d6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     2da:	88 23       	and	r24, r24
     2dc:	1c f4       	brge	.+6      	; 0x2e4 <lcd_nibble+0xee>
		__ticks = 1;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	88 8b       	std	Y+16, r24	; 0x10
     2e2:	91 c0       	rjmp	.+290    	; 0x406 <lcd_nibble+0x210>
	else if (__tmp > 255)
     2e4:	69 89       	ldd	r22, Y+17	; 0x11
     2e6:	7a 89       	ldd	r23, Y+18	; 0x12
     2e8:	8b 89       	ldd	r24, Y+19	; 0x13
     2ea:	9c 89       	ldd	r25, Y+20	; 0x14
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4f e7       	ldi	r20, 0x7F	; 127
     2f2:	53 e4       	ldi	r21, 0x43	; 67
     2f4:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	0c f0       	brlt	.+2      	; 0x2fe <lcd_nibble+0x108>
     2fc:	7b c0       	rjmp	.+246    	; 0x3f4 <lcd_nibble+0x1fe>
	{
		_delay_ms(__us / 1000.0);
     2fe:	6d 89       	ldd	r22, Y+21	; 0x15
     300:	7e 89       	ldd	r23, Y+22	; 0x16
     302:	8f 89       	ldd	r24, Y+23	; 0x17
     304:	98 8d       	ldd	r25, Y+24	; 0x18
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	4a e7       	ldi	r20, 0x7A	; 122
     30c:	54 e4       	ldi	r21, 0x44	; 68
     30e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__divsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	8c 87       	std	Y+12, r24	; 0x0c
     318:	9d 87       	std	Y+13, r25	; 0x0d
     31a:	ae 87       	std	Y+14, r26	; 0x0e
     31c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     31e:	6c 85       	ldd	r22, Y+12	; 0x0c
     320:	7d 85       	ldd	r23, Y+13	; 0x0d
     322:	8e 85       	ldd	r24, Y+14	; 0x0e
     324:	9f 85       	ldd	r25, Y+15	; 0x0f
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	4a e7       	ldi	r20, 0x7A	; 122
     32c:	55 e4       	ldi	r21, 0x45	; 69
     32e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     332:	dc 01       	movw	r26, r24
     334:	cb 01       	movw	r24, r22
     336:	88 87       	std	Y+8, r24	; 0x08
     338:	99 87       	std	Y+9, r25	; 0x09
     33a:	aa 87       	std	Y+10, r26	; 0x0a
     33c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     33e:	68 85       	ldd	r22, Y+8	; 0x08
     340:	79 85       	ldd	r23, Y+9	; 0x09
     342:	8a 85       	ldd	r24, Y+10	; 0x0a
     344:	9b 85       	ldd	r25, Y+11	; 0x0b
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e8       	ldi	r20, 0x80	; 128
     34c:	5f e3       	ldi	r21, 0x3F	; 63
     34e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     352:	88 23       	and	r24, r24
     354:	2c f4       	brge	.+10     	; 0x360 <lcd_nibble+0x16a>
		__ticks = 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	9f 83       	std	Y+7, r25	; 0x07
     35c:	8e 83       	std	Y+6, r24	; 0x06
     35e:	3f c0       	rjmp	.+126    	; 0x3de <lcd_nibble+0x1e8>
	else if (__tmp > 65535)
     360:	68 85       	ldd	r22, Y+8	; 0x08
     362:	79 85       	ldd	r23, Y+9	; 0x09
     364:	8a 85       	ldd	r24, Y+10	; 0x0a
     366:	9b 85       	ldd	r25, Y+11	; 0x0b
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	3f ef       	ldi	r19, 0xFF	; 255
     36c:	4f e7       	ldi	r20, 0x7F	; 127
     36e:	57 e4       	ldi	r21, 0x47	; 71
     370:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     374:	18 16       	cp	r1, r24
     376:	4c f5       	brge	.+82     	; 0x3ca <lcd_nibble+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     378:	6c 85       	ldd	r22, Y+12	; 0x0c
     37a:	7d 85       	ldd	r23, Y+13	; 0x0d
     37c:	8e 85       	ldd	r24, Y+14	; 0x0e
     37e:	9f 85       	ldd	r25, Y+15	; 0x0f
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	40 e2       	ldi	r20, 0x20	; 32
     386:	51 e4       	ldi	r21, 0x41	; 65
     388:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	bc 01       	movw	r22, r24
     392:	cd 01       	movw	r24, r26
     394:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     398:	dc 01       	movw	r26, r24
     39a:	cb 01       	movw	r24, r22
     39c:	9f 83       	std	Y+7, r25	; 0x07
     39e:	8e 83       	std	Y+6, r24	; 0x06
     3a0:	0f c0       	rjmp	.+30     	; 0x3c0 <lcd_nibble+0x1ca>
     3a2:	80 e9       	ldi	r24, 0x90	; 144
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	9d 83       	std	Y+5, r25	; 0x05
     3a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3aa:	8c 81       	ldd	r24, Y+4	; 0x04
     3ac:	9d 81       	ldd	r25, Y+5	; 0x05
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_nibble+0x1b8>
     3b2:	9d 83       	std	Y+5, r25	; 0x05
     3b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	9f 83       	std	Y+7, r25	; 0x07
     3be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c0:	8e 81       	ldd	r24, Y+6	; 0x06
     3c2:	9f 81       	ldd	r25, Y+7	; 0x07
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	69 f7       	brne	.-38     	; 0x3a2 <lcd_nibble+0x1ac>
     3c8:	24 c0       	rjmp	.+72     	; 0x412 <lcd_nibble+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ca:	68 85       	ldd	r22, Y+8	; 0x08
     3cc:	79 85       	ldd	r23, Y+9	; 0x09
     3ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     3d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     3d2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	9f 83       	std	Y+7, r25	; 0x07
     3dc:	8e 83       	std	Y+6, r24	; 0x06
     3de:	8e 81       	ldd	r24, Y+6	; 0x06
     3e0:	9f 81       	ldd	r25, Y+7	; 0x07
     3e2:	9b 83       	std	Y+3, r25	; 0x03
     3e4:	8a 83       	std	Y+2, r24	; 0x02
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <lcd_nibble+0x1f4>
     3ee:	9b 83       	std	Y+3, r25	; 0x03
     3f0:	8a 83       	std	Y+2, r24	; 0x02
     3f2:	0f c0       	rjmp	.+30     	; 0x412 <lcd_nibble+0x21c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3f4:	69 89       	ldd	r22, Y+17	; 0x11
     3f6:	7a 89       	ldd	r23, Y+18	; 0x12
     3f8:	8b 89       	ldd	r24, Y+19	; 0x13
     3fa:	9c 89       	ldd	r25, Y+20	; 0x14
     3fc:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	88 8b       	std	Y+16, r24	; 0x10
     406:	88 89       	ldd	r24, Y+16	; 0x10
     408:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_nibble+0x216>
     410:	89 83       	std	Y+1, r24	; 0x01
  _delay_us( LCD_TIME_ENA );
  LCD_E0 = 0;
     412:	e2 e2       	ldi	r30, 0x22	; 34
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	8d 7f       	andi	r24, 0xFD	; 253
     41a:	80 83       	st	Z, r24
}
     41c:	69 96       	adiw	r28, 0x19	; 25
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	08 95       	ret

0000042e <lcd_byte>:


static void lcd_byte( uint8_t d )
{
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	69 97       	sbiw	r28, 0x19	; 25
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	89 8f       	std	Y+25, r24	; 0x19
  lcd_nibble( d );
     444:	89 8d       	ldd	r24, Y+25	; 0x19
     446:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_nibble>
  lcd_nibble( d<<4 );
     44a:	89 8d       	ldd	r24, Y+25	; 0x19
     44c:	82 95       	swap	r24
     44e:	80 7f       	andi	r24, 0xF0	; 240
     450:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_nibble>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	a8 e4       	ldi	r26, 0x48	; 72
     45a:	b2 e4       	ldi	r27, 0x42	; 66
     45c:	8d 8b       	std	Y+21, r24	; 0x15
     45e:	9e 8b       	std	Y+22, r25	; 0x16
     460:	af 8b       	std	Y+23, r26	; 0x17
     462:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     464:	6d 89       	ldd	r22, Y+21	; 0x15
     466:	7e 89       	ldd	r23, Y+22	; 0x16
     468:	8f 89       	ldd	r24, Y+23	; 0x17
     46a:	98 8d       	ldd	r25, Y+24	; 0x18
     46c:	2b ea       	ldi	r18, 0xAB	; 171
     46e:	3a ea       	ldi	r19, 0xAA	; 170
     470:	4a ea       	ldi	r20, 0xAA	; 170
     472:	50 e4       	ldi	r21, 0x40	; 64
     474:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	89 8b       	std	Y+17, r24	; 0x11
     47e:	9a 8b       	std	Y+18, r25	; 0x12
     480:	ab 8b       	std	Y+19, r26	; 0x13
     482:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     484:	69 89       	ldd	r22, Y+17	; 0x11
     486:	7a 89       	ldd	r23, Y+18	; 0x12
     488:	8b 89       	ldd	r24, Y+19	; 0x13
     48a:	9c 89       	ldd	r25, Y+20	; 0x14
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     498:	88 23       	and	r24, r24
     49a:	1c f4       	brge	.+6      	; 0x4a2 <lcd_byte+0x74>
		__ticks = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	88 8b       	std	Y+16, r24	; 0x10
     4a0:	91 c0       	rjmp	.+290    	; 0x5c4 <lcd_byte+0x196>
	else if (__tmp > 255)
     4a2:	69 89       	ldd	r22, Y+17	; 0x11
     4a4:	7a 89       	ldd	r23, Y+18	; 0x12
     4a6:	8b 89       	ldd	r24, Y+19	; 0x13
     4a8:	9c 89       	ldd	r25, Y+20	; 0x14
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4f e7       	ldi	r20, 0x7F	; 127
     4b0:	53 e4       	ldi	r21, 0x43	; 67
     4b2:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     4b6:	18 16       	cp	r1, r24
     4b8:	0c f0       	brlt	.+2      	; 0x4bc <lcd_byte+0x8e>
     4ba:	7b c0       	rjmp	.+246    	; 0x5b2 <lcd_byte+0x184>
	{
		_delay_ms(__us / 1000.0);
     4bc:	6d 89       	ldd	r22, Y+21	; 0x15
     4be:	7e 89       	ldd	r23, Y+22	; 0x16
     4c0:	8f 89       	ldd	r24, Y+23	; 0x17
     4c2:	98 8d       	ldd	r25, Y+24	; 0x18
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	4a e7       	ldi	r20, 0x7A	; 122
     4ca:	54 e4       	ldi	r21, 0x44	; 68
     4cc:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__divsf3>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	8c 87       	std	Y+12, r24	; 0x0c
     4d6:	9d 87       	std	Y+13, r25	; 0x0d
     4d8:	ae 87       	std	Y+14, r26	; 0x0e
     4da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4dc:	6c 85       	ldd	r22, Y+12	; 0x0c
     4de:	7d 85       	ldd	r23, Y+13	; 0x0d
     4e0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4e2:	9f 85       	ldd	r25, Y+15	; 0x0f
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	4a e7       	ldi	r20, 0x7A	; 122
     4ea:	55 e4       	ldi	r21, 0x45	; 69
     4ec:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	88 87       	std	Y+8, r24	; 0x08
     4f6:	99 87       	std	Y+9, r25	; 0x09
     4f8:	aa 87       	std	Y+10, r26	; 0x0a
     4fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4fc:	68 85       	ldd	r22, Y+8	; 0x08
     4fe:	79 85       	ldd	r23, Y+9	; 0x09
     500:	8a 85       	ldd	r24, Y+10	; 0x0a
     502:	9b 85       	ldd	r25, Y+11	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e8       	ldi	r20, 0x80	; 128
     50a:	5f e3       	ldi	r21, 0x3F	; 63
     50c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     510:	88 23       	and	r24, r24
     512:	2c f4       	brge	.+10     	; 0x51e <lcd_byte+0xf0>
		__ticks = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	9f 83       	std	Y+7, r25	; 0x07
     51a:	8e 83       	std	Y+6, r24	; 0x06
     51c:	3f c0       	rjmp	.+126    	; 0x59c <lcd_byte+0x16e>
	else if (__tmp > 65535)
     51e:	68 85       	ldd	r22, Y+8	; 0x08
     520:	79 85       	ldd	r23, Y+9	; 0x09
     522:	8a 85       	ldd	r24, Y+10	; 0x0a
     524:	9b 85       	ldd	r25, Y+11	; 0x0b
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	3f ef       	ldi	r19, 0xFF	; 255
     52a:	4f e7       	ldi	r20, 0x7F	; 127
     52c:	57 e4       	ldi	r21, 0x47	; 71
     52e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     532:	18 16       	cp	r1, r24
     534:	4c f5       	brge	.+82     	; 0x588 <lcd_byte+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     536:	6c 85       	ldd	r22, Y+12	; 0x0c
     538:	7d 85       	ldd	r23, Y+13	; 0x0d
     53a:	8e 85       	ldd	r24, Y+14	; 0x0e
     53c:	9f 85       	ldd	r25, Y+15	; 0x0f
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e2       	ldi	r20, 0x20	; 32
     544:	51 e4       	ldi	r21, 0x41	; 65
     546:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	9f 83       	std	Y+7, r25	; 0x07
     55c:	8e 83       	std	Y+6, r24	; 0x06
     55e:	0f c0       	rjmp	.+30     	; 0x57e <lcd_byte+0x150>
     560:	80 e9       	ldi	r24, 0x90	; 144
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9d 83       	std	Y+5, r25	; 0x05
     566:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     568:	8c 81       	ldd	r24, Y+4	; 0x04
     56a:	9d 81       	ldd	r25, Y+5	; 0x05
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <lcd_byte+0x13e>
     570:	9d 83       	std	Y+5, r25	; 0x05
     572:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	9f 81       	ldd	r25, Y+7	; 0x07
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	9f 83       	std	Y+7, r25	; 0x07
     57c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57e:	8e 81       	ldd	r24, Y+6	; 0x06
     580:	9f 81       	ldd	r25, Y+7	; 0x07
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	69 f7       	brne	.-38     	; 0x560 <lcd_byte+0x132>
     586:	24 c0       	rjmp	.+72     	; 0x5d0 <lcd_byte+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     588:	68 85       	ldd	r22, Y+8	; 0x08
     58a:	79 85       	ldd	r23, Y+9	; 0x09
     58c:	8a 85       	ldd	r24, Y+10	; 0x0a
     58e:	9b 85       	ldd	r25, Y+11	; 0x0b
     590:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	9f 83       	std	Y+7, r25	; 0x07
     59a:	8e 83       	std	Y+6, r24	; 0x06
     59c:	8e 81       	ldd	r24, Y+6	; 0x06
     59e:	9f 81       	ldd	r25, Y+7	; 0x07
     5a0:	9b 83       	std	Y+3, r25	; 0x03
     5a2:	8a 83       	std	Y+2, r24	; 0x02
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	9b 81       	ldd	r25, Y+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_byte+0x17a>
     5ac:	9b 83       	std	Y+3, r25	; 0x03
     5ae:	8a 83       	std	Y+2, r24	; 0x02
     5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <lcd_byte+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5b2:	69 89       	ldd	r22, Y+17	; 0x11
     5b4:	7a 89       	ldd	r23, Y+18	; 0x12
     5b6:	8b 89       	ldd	r24, Y+19	; 0x13
     5b8:	9c 89       	ldd	r25, Y+20	; 0x14
     5ba:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	88 8b       	std	Y+16, r24	; 0x10
     5c4:	88 89       	ldd	r24, Y+16	; 0x10
     5c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	8a 95       	dec	r24
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <lcd_byte+0x19c>
     5ce:	89 83       	std	Y+1, r24	; 0x01
  _delay_us( LCD_TIME_DAT );
}
     5d0:	69 96       	adiw	r28, 0x19	; 25
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	08 95       	ret

000005e2 <lcd_command>:


void lcd_command( uint8_t d )
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	2f 97       	sbiw	r28, 0x0f	; 15
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	8f 87       	std	Y+15, r24	; 0x0f
  LCD_RS = 0;
     5f8:	e2 e2       	ldi	r30, 0x22	; 34
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	8e 7f       	andi	r24, 0xFE	; 254
     600:	80 83       	st	Z, r24
  lcd_byte( d );
     602:	8f 85       	ldd	r24, Y+15	; 0x0f
     604:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_byte>
  if( d <= 3 )
     608:	8f 85       	ldd	r24, Y+15	; 0x0f
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	08 f0       	brcs	.+2      	; 0x610 <lcd_command+0x2e>
     60e:	72 c0       	rjmp	.+228    	; 0x6f4 <lcd_command+0x112>
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	a0 e0       	ldi	r26, 0x00	; 0
     616:	b0 e4       	ldi	r27, 0x40	; 64
     618:	8b 87       	std	Y+11, r24	; 0x0b
     61a:	9c 87       	std	Y+12, r25	; 0x0c
     61c:	ad 87       	std	Y+13, r26	; 0x0d
     61e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     620:	6b 85       	ldd	r22, Y+11	; 0x0b
     622:	7c 85       	ldd	r23, Y+12	; 0x0c
     624:	8d 85       	ldd	r24, Y+13	; 0x0d
     626:	9e 85       	ldd	r25, Y+14	; 0x0e
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4a e7       	ldi	r20, 0x7A	; 122
     62e:	55 e4       	ldi	r21, 0x45	; 69
     630:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	8f 83       	std	Y+7, r24	; 0x07
     63a:	98 87       	std	Y+8, r25	; 0x08
     63c:	a9 87       	std	Y+9, r26	; 0x09
     63e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     640:	6f 81       	ldd	r22, Y+7	; 0x07
     642:	78 85       	ldd	r23, Y+8	; 0x08
     644:	89 85       	ldd	r24, Y+9	; 0x09
     646:	9a 85       	ldd	r25, Y+10	; 0x0a
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e8       	ldi	r20, 0x80	; 128
     64e:	5f e3       	ldi	r21, 0x3F	; 63
     650:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     654:	88 23       	and	r24, r24
     656:	2c f4       	brge	.+10     	; 0x662 <lcd_command+0x80>
		__ticks = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	9e 83       	std	Y+6, r25	; 0x06
     65e:	8d 83       	std	Y+5, r24	; 0x05
     660:	3f c0       	rjmp	.+126    	; 0x6e0 <lcd_command+0xfe>
	else if (__tmp > 65535)
     662:	6f 81       	ldd	r22, Y+7	; 0x07
     664:	78 85       	ldd	r23, Y+8	; 0x08
     666:	89 85       	ldd	r24, Y+9	; 0x09
     668:	9a 85       	ldd	r25, Y+10	; 0x0a
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	3f ef       	ldi	r19, 0xFF	; 255
     66e:	4f e7       	ldi	r20, 0x7F	; 127
     670:	57 e4       	ldi	r21, 0x47	; 71
     672:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     676:	18 16       	cp	r1, r24
     678:	4c f5       	brge	.+82     	; 0x6cc <lcd_command+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     67a:	6b 85       	ldd	r22, Y+11	; 0x0b
     67c:	7c 85       	ldd	r23, Y+12	; 0x0c
     67e:	8d 85       	ldd	r24, Y+13	; 0x0d
     680:	9e 85       	ldd	r25, Y+14	; 0x0e
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e2       	ldi	r20, 0x20	; 32
     688:	51 e4       	ldi	r21, 0x41	; 65
     68a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	bc 01       	movw	r22, r24
     694:	cd 01       	movw	r24, r26
     696:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	9e 83       	std	Y+6, r25	; 0x06
     6a0:	8d 83       	std	Y+5, r24	; 0x05
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <lcd_command+0xe0>
     6a4:	80 e9       	ldi	r24, 0x90	; 144
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <lcd_command+0xce>
     6b4:	9c 83       	std	Y+4, r25	; 0x04
     6b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	9e 81       	ldd	r25, Y+6	; 0x06
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	9e 83       	std	Y+6, r25	; 0x06
     6c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c2:	8d 81       	ldd	r24, Y+5	; 0x05
     6c4:	9e 81       	ldd	r25, Y+6	; 0x06
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	69 f7       	brne	.-38     	; 0x6a4 <lcd_command+0xc2>
     6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <lcd_command+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6cc:	6f 81       	ldd	r22, Y+7	; 0x07
     6ce:	78 85       	ldd	r23, Y+8	; 0x08
     6d0:	89 85       	ldd	r24, Y+9	; 0x09
     6d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	9e 83       	std	Y+6, r25	; 0x06
     6de:	8d 83       	std	Y+5, r24	; 0x05
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	9e 81       	ldd	r25, Y+6	; 0x06
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <lcd_command+0x10a>
     6f0:	9a 83       	std	Y+2, r25	; 0x02
     6f2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms( 2 );                     // wait 2ms
}
     6f4:	2f 96       	adiw	r28, 0x0f	; 15
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <lcd_putchar>:

void lcd_putchar( uint8_t d )
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <lcd_putchar+0x6>
     70c:	0f 92       	push	r0
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	89 83       	std	Y+1, r24	; 0x01
	  LCD_RS = 1;
     714:	e2 e2       	ldi	r30, 0x22	; 34
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	81 60       	ori	r24, 0x01	; 1
     71c:	80 83       	st	Z, r24
	  lcd_byte( d );
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_byte>
	  switch (++lcd_pos) {
     724:	80 91 00 01 	lds	r24, 0x0100
     728:	8f 5f       	subi	r24, 0xFF	; 255
     72a:	80 93 00 01 	sts	0x0100, r24
     72e:	80 91 00 01 	lds	r24, 0x0100
     732:	28 2f       	mov	r18, r24
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	3b 83       	std	Y+3, r19	; 0x03
     738:	2a 83       	std	Y+2, r18	; 0x02
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	9b 81       	ldd	r25, Y+3	; 0x03
     73e:	80 39       	cpi	r24, 0x90	; 144
     740:	91 05       	cpc	r25, r1
     742:	31 f0       	breq	.+12     	; 0x750 <lcd_putchar+0x4a>
     744:	2a 81       	ldd	r18, Y+2	; 0x02
     746:	3b 81       	ldd	r19, Y+3	; 0x03
     748:	20 3d       	cpi	r18, 0xD0	; 208
     74a:	31 05       	cpc	r19, r1
     74c:	21 f0       	breq	.+8      	; 0x756 <lcd_putchar+0x50>
     74e:	05 c0       	rjmp	.+10     	; 0x75a <lcd_putchar+0x54>
	case LCD_LINE1 + LCD_COLUMN:
		d = LCD_LINE2;
     750:	80 ec       	ldi	r24, 0xC0	; 192
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	02 c0       	rjmp	.+4      	; 0x75a <lcd_putchar+0x54>
		break;
	case LCD_LINE2 + LCD_COLUMN:
		d = LCD_LINE1;
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		return;
	}
	//lcd_command(d);
}
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <lcd_puts>:

void lcd_puts( void *s )                        // display string from SRAM
{
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	00 d0       	rcall	.+0      	; 0x76c <lcd_puts+0x6>
     76c:	00 d0       	rcall	.+0      	; 0x76e <lcd_puts+0x8>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	9c 83       	std	Y+4, r25	; 0x04
     774:	8b 83       	std	Y+3, r24	; 0x03
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	0a c0       	rjmp	.+20     	; 0x794 <lcd_puts+0x2e>
    lcd_putchar( *s1 );
     780:	e9 81       	ldd	r30, Y+1	; 0x01
     782:	fa 81       	ldd	r31, Y+2	; 0x02
     784:	80 81       	ld	r24, Z
     786:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
	//lcd_command(d);
}

void lcd_puts( void *s )                        // display string from SRAM
{
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	9a 81       	ldd	r25, Y+2	; 0x02
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	e9 81       	ldd	r30, Y+1	; 0x01
     796:	fa 81       	ldd	r31, Y+2	; 0x02
     798:	80 81       	ld	r24, Z
     79a:	88 23       	and	r24, r24
     79c:	89 f7       	brne	.-30     	; 0x780 <lcd_puts+0x1a>
    lcd_putchar( *s1 );
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	08 95       	ret

000007ac <lcd_blank>:


void lcd_blank(/* uint8_t len */)                   // blank n digits
{
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
//  while( len-- )
//    lcd_putchar( ' ' );
	lcd_xy(0,0);
     7b4:	80 e8       	ldi	r24, 0x80	; 128
     7b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
	lcd_puts("                ");
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_puts>
	lcd_xy(0,1);
     7c2:	80 ec       	ldi	r24, 0xC0	; 192
     7c4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
	lcd_puts("                ");
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_puts>
	lcd_xy(0,0);
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
}
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <lcd_init>:


void lcd_init( void )
{
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	c4 56       	subi	r28, 0x64	; 100
     7ea:	d0 40       	sbci	r29, 0x00	; 0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
  LCD_DDR_D4 = 1;                               // enable output pins
     7f6:	e1 e2       	ldi	r30, 0x21	; 33
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	84 60       	ori	r24, 0x04	; 4
     7fe:	80 83       	st	Z, r24
  LCD_DDR_D5 = 1;
     800:	e1 e2       	ldi	r30, 0x21	; 33
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	88 60       	ori	r24, 0x08	; 8
     808:	80 83       	st	Z, r24
  LCD_DDR_D6 = 1;
     80a:	e1 e2       	ldi	r30, 0x21	; 33
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	80 61       	ori	r24, 0x10	; 16
     812:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     814:	e1 e2       	ldi	r30, 0x21	; 33
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     81e:	e1 e2       	ldi	r30, 0x21	; 33
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	81 60       	ori	r24, 0x01	; 1
     826:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     828:	e1 e2       	ldi	r30, 0x21	; 33
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	82 60       	ori	r24, 0x02	; 2
     830:	80 83       	st	Z, r24
  LCD_E0 = 0;
     832:	e2 e2       	ldi	r30, 0x22	; 34
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8d 7f       	andi	r24, 0xFD	; 253
     83a:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
     83c:	e2 e2       	ldi	r30, 0x22	; 34
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	8e 7f       	andi	r24, 0xFE	; 254
     844:	80 83       	st	Z, r24
     846:	fe 01       	movw	r30, r28
     848:	ef 59       	subi	r30, 0x9F	; 159
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 ef       	ldi	r26, 0xF0	; 240
     852:	b1 e4       	ldi	r27, 0x41	; 65
     854:	80 83       	st	Z, r24
     856:	91 83       	std	Z+1, r25	; 0x01
     858:	a2 83       	std	Z+2, r26	; 0x02
     85a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     85c:	8e 01       	movw	r16, r28
     85e:	03 5a       	subi	r16, 0xA3	; 163
     860:	1f 4f       	sbci	r17, 0xFF	; 255
     862:	fe 01       	movw	r30, r28
     864:	ef 59       	subi	r30, 0x9F	; 159
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	60 81       	ld	r22, Z
     86a:	71 81       	ldd	r23, Z+1	; 0x01
     86c:	82 81       	ldd	r24, Z+2	; 0x02
     86e:	93 81       	ldd	r25, Z+3	; 0x03
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	4a e7       	ldi	r20, 0x7A	; 122
     876:	55 e4       	ldi	r21, 0x45	; 69
     878:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	f8 01       	movw	r30, r16
     882:	80 83       	st	Z, r24
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	a2 83       	std	Z+2, r26	; 0x02
     888:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     88a:	fe 01       	movw	r30, r28
     88c:	e3 5a       	subi	r30, 0xA3	; 163
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
     890:	60 81       	ld	r22, Z
     892:	71 81       	ldd	r23, Z+1	; 0x01
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	93 81       	ldd	r25, Z+3	; 0x03
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e8       	ldi	r20, 0x80	; 128
     89e:	5f e3       	ldi	r21, 0x3F	; 63
     8a0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     8a4:	88 23       	and	r24, r24
     8a6:	44 f4       	brge	.+16     	; 0x8b8 <lcd_init+0xdc>
		__ticks = 1;
     8a8:	fe 01       	movw	r30, r28
     8aa:	e5 5a       	subi	r30, 0xA5	; 165
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	91 83       	std	Z+1, r25	; 0x01
     8b4:	80 83       	st	Z, r24
     8b6:	64 c0       	rjmp	.+200    	; 0x980 <lcd_init+0x1a4>
	else if (__tmp > 65535)
     8b8:	fe 01       	movw	r30, r28
     8ba:	e3 5a       	subi	r30, 0xA3	; 163
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	60 81       	ld	r22, Z
     8c0:	71 81       	ldd	r23, Z+1	; 0x01
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	93 81       	ldd	r25, Z+3	; 0x03
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	3f ef       	ldi	r19, 0xFF	; 255
     8ca:	4f e7       	ldi	r20, 0x7F	; 127
     8cc:	57 e4       	ldi	r21, 0x47	; 71
     8ce:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     8d2:	18 16       	cp	r1, r24
     8d4:	0c f0       	brlt	.+2      	; 0x8d8 <lcd_init+0xfc>
     8d6:	43 c0       	rjmp	.+134    	; 0x95e <lcd_init+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d8:	fe 01       	movw	r30, r28
     8da:	ef 59       	subi	r30, 0x9F	; 159
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	60 81       	ld	r22, Z
     8e0:	71 81       	ldd	r23, Z+1	; 0x01
     8e2:	82 81       	ldd	r24, Z+2	; 0x02
     8e4:	93 81       	ldd	r25, Z+3	; 0x03
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e2       	ldi	r20, 0x20	; 32
     8ec:	51 e4       	ldi	r21, 0x41	; 65
     8ee:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	8e 01       	movw	r16, r28
     8f8:	05 5a       	subi	r16, 0xA5	; 165
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	f8 01       	movw	r30, r16
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	80 83       	st	Z, r24
     90e:	1f c0       	rjmp	.+62     	; 0x94e <lcd_init+0x172>
     910:	fe 01       	movw	r30, r28
     912:	e7 5a       	subi	r30, 0xA7	; 167
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	80 e9       	ldi	r24, 0x90	; 144
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	91 83       	std	Z+1, r25	; 0x01
     91c:	80 83       	st	Z, r24
     91e:	fe 01       	movw	r30, r28
     920:	e7 5a       	subi	r30, 0xA7	; 167
     922:	ff 4f       	sbci	r31, 0xFF	; 255
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <lcd_init+0x14c>
     92c:	fe 01       	movw	r30, r28
     92e:	e7 5a       	subi	r30, 0xA7	; 167
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     936:	de 01       	movw	r26, r28
     938:	a5 5a       	subi	r26, 0xA5	; 165
     93a:	bf 4f       	sbci	r27, 0xFF	; 255
     93c:	fe 01       	movw	r30, r28
     93e:	e5 5a       	subi	r30, 0xA5	; 165
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	11 96       	adiw	r26, 0x01	; 1
     94a:	9c 93       	st	X, r25
     94c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94e:	fe 01       	movw	r30, r28
     950:	e5 5a       	subi	r30, 0xA5	; 165
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	d1 f6       	brne	.-76     	; 0x910 <lcd_init+0x134>
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <lcd_init+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     95e:	8e 01       	movw	r16, r28
     960:	05 5a       	subi	r16, 0xA5	; 165
     962:	1f 4f       	sbci	r17, 0xFF	; 255
     964:	fe 01       	movw	r30, r28
     966:	e3 5a       	subi	r30, 0xA3	; 163
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	60 81       	ld	r22, Z
     96c:	71 81       	ldd	r23, Z+1	; 0x01
     96e:	82 81       	ldd	r24, Z+2	; 0x02
     970:	93 81       	ldd	r25, Z+3	; 0x03
     972:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	f8 01       	movw	r30, r16
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	80 83       	st	Z, r24
     980:	de 01       	movw	r26, r28
     982:	a9 5a       	subi	r26, 0xA9	; 169
     984:	bf 4f       	sbci	r27, 0xFF	; 255
     986:	fe 01       	movw	r30, r28
     988:	e5 5a       	subi	r30, 0xA5	; 165
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	8d 93       	st	X+, r24
     992:	9c 93       	st	X, r25
     994:	fe 01       	movw	r30, r28
     996:	e9 5a       	subi	r30, 0xA9	; 169
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <lcd_init+0x1c2>
     9a2:	fe 01       	movw	r30, r28
     9a4:	e9 5a       	subi	r30, 0xA9	; 169
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24

  _delay_ms( 30 );
  lcd_nibble( 0x38 );
     9ac:	88 e3       	ldi	r24, 0x38	; 56
     9ae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_nibble>
     9b2:	fe 01       	movw	r30, r28
     9b4:	ed 5a       	subi	r30, 0xAD	; 173
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	83 e3       	ldi	r24, 0x33	; 51
     9ba:	93 e3       	ldi	r25, 0x33	; 51
     9bc:	a3 e8       	ldi	r26, 0x83	; 131
     9be:	b0 e4       	ldi	r27, 0x40	; 64
     9c0:	80 83       	st	Z, r24
     9c2:	91 83       	std	Z+1, r25	; 0x01
     9c4:	a2 83       	std	Z+2, r26	; 0x02
     9c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9c8:	8e 01       	movw	r16, r28
     9ca:	01 5b       	subi	r16, 0xB1	; 177
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	fe 01       	movw	r30, r28
     9d0:	ed 5a       	subi	r30, 0xAD	; 173
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	82 81       	ldd	r24, Z+2	; 0x02
     9da:	93 81       	ldd	r25, Z+3	; 0x03
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	4a e7       	ldi	r20, 0x7A	; 122
     9e2:	55 e4       	ldi	r21, 0x45	; 69
     9e4:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	f8 01       	movw	r30, r16
     9ee:	80 83       	st	Z, r24
     9f0:	91 83       	std	Z+1, r25	; 0x01
     9f2:	a2 83       	std	Z+2, r26	; 0x02
     9f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9f6:	fe 01       	movw	r30, r28
     9f8:	e1 5b       	subi	r30, 0xB1	; 177
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e8       	ldi	r20, 0x80	; 128
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     a10:	88 23       	and	r24, r24
     a12:	44 f4       	brge	.+16     	; 0xa24 <lcd_init+0x248>
		__ticks = 1;
     a14:	fe 01       	movw	r30, r28
     a16:	e3 5b       	subi	r30, 0xB3	; 179
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
     a22:	64 c0       	rjmp	.+200    	; 0xaec <lcd_init+0x310>
	else if (__tmp > 65535)
     a24:	fe 01       	movw	r30, r28
     a26:	e1 5b       	subi	r30, 0xB1	; 177
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	60 81       	ld	r22, Z
     a2c:	71 81       	ldd	r23, Z+1	; 0x01
     a2e:	82 81       	ldd	r24, Z+2	; 0x02
     a30:	93 81       	ldd	r25, Z+3	; 0x03
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	57 e4       	ldi	r21, 0x47	; 71
     a3a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     a3e:	18 16       	cp	r1, r24
     a40:	0c f0       	brlt	.+2      	; 0xa44 <lcd_init+0x268>
     a42:	43 c0       	rjmp	.+134    	; 0xaca <lcd_init+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a44:	fe 01       	movw	r30, r28
     a46:	ed 5a       	subi	r30, 0xAD	; 173
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	60 81       	ld	r22, Z
     a4c:	71 81       	ldd	r23, Z+1	; 0x01
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	93 81       	ldd	r25, Z+3	; 0x03
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e2       	ldi	r20, 0x20	; 32
     a58:	51 e4       	ldi	r21, 0x41	; 65
     a5a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	8e 01       	movw	r16, r28
     a64:	03 5b       	subi	r16, 0xB3	; 179
     a66:	1f 4f       	sbci	r17, 0xFF	; 255
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	f8 01       	movw	r30, r16
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
     a7a:	1f c0       	rjmp	.+62     	; 0xaba <lcd_init+0x2de>
     a7c:	fe 01       	movw	r30, r28
     a7e:	e5 5b       	subi	r30, 0xB5	; 181
     a80:	ff 4f       	sbci	r31, 0xFF	; 255
     a82:	80 e9       	ldi	r24, 0x90	; 144
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	91 83       	std	Z+1, r25	; 0x01
     a88:	80 83       	st	Z, r24
     a8a:	fe 01       	movw	r30, r28
     a8c:	e5 5b       	subi	r30, 0xB5	; 181
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <lcd_init+0x2b8>
     a98:	fe 01       	movw	r30, r28
     a9a:	e5 5b       	subi	r30, 0xB5	; 181
     a9c:	ff 4f       	sbci	r31, 0xFF	; 255
     a9e:	91 83       	std	Z+1, r25	; 0x01
     aa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa2:	de 01       	movw	r26, r28
     aa4:	a3 5b       	subi	r26, 0xB3	; 179
     aa6:	bf 4f       	sbci	r27, 0xFF	; 255
     aa8:	fe 01       	movw	r30, r28
     aaa:	e3 5b       	subi	r30, 0xB3	; 179
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	9c 93       	st	X, r25
     ab8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aba:	fe 01       	movw	r30, r28
     abc:	e3 5b       	subi	r30, 0xB3	; 179
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	d1 f6       	brne	.-76     	; 0xa7c <lcd_init+0x2a0>
     ac8:	27 c0       	rjmp	.+78     	; 0xb18 <lcd_init+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aca:	8e 01       	movw	r16, r28
     acc:	03 5b       	subi	r16, 0xB3	; 179
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	fe 01       	movw	r30, r28
     ad2:	e1 5b       	subi	r30, 0xB1	; 177
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	60 81       	ld	r22, Z
     ad8:	71 81       	ldd	r23, Z+1	; 0x01
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	f8 01       	movw	r30, r16
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	80 83       	st	Z, r24
     aec:	de 01       	movw	r26, r28
     aee:	a7 5b       	subi	r26, 0xB7	; 183
     af0:	bf 4f       	sbci	r27, 0xFF	; 255
     af2:	fe 01       	movw	r30, r28
     af4:	e3 5b       	subi	r30, 0xB3	; 179
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	8d 93       	st	X+, r24
     afe:	9c 93       	st	X, r25
     b00:	fe 01       	movw	r30, r28
     b02:	e7 5b       	subi	r30, 0xB7	; 183
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <lcd_init+0x32e>
     b0e:	fe 01       	movw	r30, r28
     b10:	e7 5b       	subi	r30, 0xB7	; 183
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
  _delay_ms( 4.1 );
  lcd_nibble( 0x38 );
     b18:	88 e3       	ldi	r24, 0x38	; 56
     b1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_nibble>
     b1e:	fe 01       	movw	r30, r28
     b20:	eb 5b       	subi	r30, 0xBB	; 187
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a8 ec       	ldi	r26, 0xC8	; 200
     b2a:	b2 e4       	ldi	r27, 0x42	; 66
     b2c:	80 83       	st	Z, r24
     b2e:	91 83       	std	Z+1, r25	; 0x01
     b30:	a2 83       	std	Z+2, r26	; 0x02
     b32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     b34:	8e 01       	movw	r16, r28
     b36:	0f 5b       	subi	r16, 0xBF	; 191
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	fe 01       	movw	r30, r28
     b3c:	eb 5b       	subi	r30, 0xBB	; 187
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	60 81       	ld	r22, Z
     b42:	71 81       	ldd	r23, Z+1	; 0x01
     b44:	82 81       	ldd	r24, Z+2	; 0x02
     b46:	93 81       	ldd	r25, Z+3	; 0x03
     b48:	2b ea       	ldi	r18, 0xAB	; 171
     b4a:	3a ea       	ldi	r19, 0xAA	; 170
     b4c:	4a ea       	ldi	r20, 0xAA	; 170
     b4e:	50 e4       	ldi	r21, 0x40	; 64
     b50:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	f8 01       	movw	r30, r16
     b5a:	80 83       	st	Z, r24
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	a2 83       	std	Z+2, r26	; 0x02
     b60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b62:	fe 01       	movw	r30, r28
     b64:	ef 5b       	subi	r30, 0xBF	; 191
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	60 81       	ld	r22, Z
     b6a:	71 81       	ldd	r23, Z+1	; 0x01
     b6c:	82 81       	ldd	r24, Z+2	; 0x02
     b6e:	93 81       	ldd	r25, Z+3	; 0x03
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e8       	ldi	r20, 0x80	; 128
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     b7c:	88 23       	and	r24, r24
     b7e:	34 f4       	brge	.+12     	; 0xb8c <lcd_init+0x3b0>
		__ticks = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	fe 01       	movw	r30, r28
     b84:	e0 5c       	subi	r30, 0xC0	; 192
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 83       	st	Z, r24
     b8a:	9d c0       	rjmp	.+314    	; 0xcc6 <lcd_init+0x4ea>
	else if (__tmp > 255)
     b8c:	fe 01       	movw	r30, r28
     b8e:	ef 5b       	subi	r30, 0xBF	; 191
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	60 81       	ld	r22, Z
     b94:	71 81       	ldd	r23, Z+1	; 0x01
     b96:	82 81       	ldd	r24, Z+2	; 0x02
     b98:	93 81       	ldd	r25, Z+3	; 0x03
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4f e7       	ldi	r20, 0x7F	; 127
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     ba6:	18 16       	cp	r1, r24
     ba8:	0c f0       	brlt	.+2      	; 0xbac <lcd_init+0x3d0>
     baa:	7e c0       	rjmp	.+252    	; 0xca8 <lcd_init+0x4cc>
	{
		_delay_ms(__us / 1000.0);
     bac:	fe 01       	movw	r30, r28
     bae:	eb 5b       	subi	r30, 0xBB	; 187
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	4a e7       	ldi	r20, 0x7A	; 122
     bc0:	54 e4       	ldi	r21, 0x44	; 68
     bc2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__divsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	8c af       	std	Y+60, r24	; 0x3c
     bcc:	9d af       	std	Y+61, r25	; 0x3d
     bce:	ae af       	std	Y+62, r26	; 0x3e
     bd0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd2:	6c ad       	ldd	r22, Y+60	; 0x3c
     bd4:	7d ad       	ldd	r23, Y+61	; 0x3d
     bd6:	8e ad       	ldd	r24, Y+62	; 0x3e
     bd8:	9f ad       	ldd	r25, Y+63	; 0x3f
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a e7       	ldi	r20, 0x7A	; 122
     be0:	55 e4       	ldi	r21, 0x45	; 69
     be2:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	88 af       	std	Y+56, r24	; 0x38
     bec:	99 af       	std	Y+57, r25	; 0x39
     bee:	aa af       	std	Y+58, r26	; 0x3a
     bf0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     bf2:	68 ad       	ldd	r22, Y+56	; 0x38
     bf4:	79 ad       	ldd	r23, Y+57	; 0x39
     bf6:	8a ad       	ldd	r24, Y+58	; 0x3a
     bf8:	9b ad       	ldd	r25, Y+59	; 0x3b
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e8       	ldi	r20, 0x80	; 128
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     c06:	88 23       	and	r24, r24
     c08:	2c f4       	brge	.+10     	; 0xc14 <lcd_init+0x438>
		__ticks = 1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9f ab       	std	Y+55, r25	; 0x37
     c10:	8e ab       	std	Y+54, r24	; 0x36
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <lcd_init+0x4b6>
	else if (__tmp > 65535)
     c14:	68 ad       	ldd	r22, Y+56	; 0x38
     c16:	79 ad       	ldd	r23, Y+57	; 0x39
     c18:	8a ad       	ldd	r24, Y+58	; 0x3a
     c1a:	9b ad       	ldd	r25, Y+59	; 0x3b
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	3f ef       	ldi	r19, 0xFF	; 255
     c20:	4f e7       	ldi	r20, 0x7F	; 127
     c22:	57 e4       	ldi	r21, 0x47	; 71
     c24:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     c28:	18 16       	cp	r1, r24
     c2a:	4c f5       	brge	.+82     	; 0xc7e <lcd_init+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2c:	6c ad       	ldd	r22, Y+60	; 0x3c
     c2e:	7d ad       	ldd	r23, Y+61	; 0x3d
     c30:	8e ad       	ldd	r24, Y+62	; 0x3e
     c32:	9f ad       	ldd	r25, Y+63	; 0x3f
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e2       	ldi	r20, 0x20	; 32
     c3a:	51 e4       	ldi	r21, 0x41	; 65
     c3c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	9f ab       	std	Y+55, r25	; 0x37
     c52:	8e ab       	std	Y+54, r24	; 0x36
     c54:	0f c0       	rjmp	.+30     	; 0xc74 <lcd_init+0x498>
     c56:	80 e9       	ldi	r24, 0x90	; 144
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	9d ab       	std	Y+53, r25	; 0x35
     c5c:	8c ab       	std	Y+52, r24	; 0x34
     c5e:	8c a9       	ldd	r24, Y+52	; 0x34
     c60:	9d a9       	ldd	r25, Y+53	; 0x35
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <lcd_init+0x486>
     c66:	9d ab       	std	Y+53, r25	; 0x35
     c68:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6a:	8e a9       	ldd	r24, Y+54	; 0x36
     c6c:	9f a9       	ldd	r25, Y+55	; 0x37
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	9f ab       	std	Y+55, r25	; 0x37
     c72:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c74:	8e a9       	ldd	r24, Y+54	; 0x36
     c76:	9f a9       	ldd	r25, Y+55	; 0x37
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	69 f7       	brne	.-38     	; 0xc56 <lcd_init+0x47a>
     c7c:	2d c0       	rjmp	.+90     	; 0xcd8 <lcd_init+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7e:	68 ad       	ldd	r22, Y+56	; 0x38
     c80:	79 ad       	ldd	r23, Y+57	; 0x39
     c82:	8a ad       	ldd	r24, Y+58	; 0x3a
     c84:	9b ad       	ldd	r25, Y+59	; 0x3b
     c86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	9f ab       	std	Y+55, r25	; 0x37
     c90:	8e ab       	std	Y+54, r24	; 0x36
     c92:	8e a9       	ldd	r24, Y+54	; 0x36
     c94:	9f a9       	ldd	r25, Y+55	; 0x37
     c96:	9b ab       	std	Y+51, r25	; 0x33
     c98:	8a ab       	std	Y+50, r24	; 0x32
     c9a:	8a a9       	ldd	r24, Y+50	; 0x32
     c9c:	9b a9       	ldd	r25, Y+51	; 0x33
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <lcd_init+0x4c2>
     ca2:	9b ab       	std	Y+51, r25	; 0x33
     ca4:	8a ab       	std	Y+50, r24	; 0x32
     ca6:	18 c0       	rjmp	.+48     	; 0xcd8 <lcd_init+0x4fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ca8:	fe 01       	movw	r30, r28
     caa:	ef 5b       	subi	r30, 0xBF	; 191
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	60 81       	ld	r22, Z
     cb0:	71 81       	ldd	r23, Z+1	; 0x01
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	fe 01       	movw	r30, r28
     cc0:	e0 5c       	subi	r30, 0xC0	; 192
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
     cc6:	fe 01       	movw	r30, r28
     cc8:	e0 5c       	subi	r30, 0xC0	; 192
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 81       	ld	r24, Z
     cce:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cd0:	89 a9       	ldd	r24, Y+49	; 0x31
     cd2:	8a 95       	dec	r24
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <lcd_init+0x4f6>
     cd6:	89 ab       	std	Y+49, r24	; 0x31
  _delay_us( 100 );
  lcd_nibble( 0x38 );
     cd8:	88 e3       	ldi	r24, 0x38	; 56
     cda:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_nibble>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a8 e4       	ldi	r26, 0x48	; 72
     ce4:	b2 e4       	ldi	r27, 0x42	; 66
     ce6:	8d a7       	std	Y+45, r24	; 0x2d
     ce8:	9e a7       	std	Y+46, r25	; 0x2e
     cea:	af a7       	std	Y+47, r26	; 0x2f
     cec:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cee:	6d a5       	ldd	r22, Y+45	; 0x2d
     cf0:	7e a5       	ldd	r23, Y+46	; 0x2e
     cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf4:	98 a9       	ldd	r25, Y+48	; 0x30
     cf6:	2b ea       	ldi	r18, 0xAB	; 171
     cf8:	3a ea       	ldi	r19, 0xAA	; 170
     cfa:	4a ea       	ldi	r20, 0xAA	; 170
     cfc:	50 e4       	ldi	r21, 0x40	; 64
     cfe:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	89 a7       	std	Y+41, r24	; 0x29
     d08:	9a a7       	std	Y+42, r25	; 0x2a
     d0a:	ab a7       	std	Y+43, r26	; 0x2b
     d0c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     d0e:	69 a5       	ldd	r22, Y+41	; 0x29
     d10:	7a a5       	ldd	r23, Y+42	; 0x2a
     d12:	8b a5       	ldd	r24, Y+43	; 0x2b
     d14:	9c a5       	ldd	r25, Y+44	; 0x2c
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     d22:	88 23       	and	r24, r24
     d24:	1c f4       	brge	.+6      	; 0xd2c <lcd_init+0x550>
		__ticks = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	88 a7       	std	Y+40, r24	; 0x28
     d2a:	91 c0       	rjmp	.+290    	; 0xe4e <lcd_init+0x672>
	else if (__tmp > 255)
     d2c:	69 a5       	ldd	r22, Y+41	; 0x29
     d2e:	7a a5       	ldd	r23, Y+42	; 0x2a
     d30:	8b a5       	ldd	r24, Y+43	; 0x2b
     d32:	9c a5       	ldd	r25, Y+44	; 0x2c
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4f e7       	ldi	r20, 0x7F	; 127
     d3a:	53 e4       	ldi	r21, 0x43	; 67
     d3c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     d40:	18 16       	cp	r1, r24
     d42:	0c f0       	brlt	.+2      	; 0xd46 <lcd_init+0x56a>
     d44:	7b c0       	rjmp	.+246    	; 0xe3c <lcd_init+0x660>
	{
		_delay_ms(__us / 1000.0);
     d46:	6d a5       	ldd	r22, Y+45	; 0x2d
     d48:	7e a5       	ldd	r23, Y+46	; 0x2e
     d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4c:	98 a9       	ldd	r25, Y+48	; 0x30
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	4a e7       	ldi	r20, 0x7A	; 122
     d54:	54 e4       	ldi	r21, 0x44	; 68
     d56:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__divsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	8c a3       	std	Y+36, r24	; 0x24
     d60:	9d a3       	std	Y+37, r25	; 0x25
     d62:	ae a3       	std	Y+38, r26	; 0x26
     d64:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d66:	6c a1       	ldd	r22, Y+36	; 0x24
     d68:	7d a1       	ldd	r23, Y+37	; 0x25
     d6a:	8e a1       	ldd	r24, Y+38	; 0x26
     d6c:	9f a1       	ldd	r25, Y+39	; 0x27
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a e7       	ldi	r20, 0x7A	; 122
     d74:	55 e4       	ldi	r21, 0x45	; 69
     d76:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	88 a3       	std	Y+32, r24	; 0x20
     d80:	99 a3       	std	Y+33, r25	; 0x21
     d82:	aa a3       	std	Y+34, r26	; 0x22
     d84:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     d86:	68 a1       	ldd	r22, Y+32	; 0x20
     d88:	79 a1       	ldd	r23, Y+33	; 0x21
     d8a:	8a a1       	ldd	r24, Y+34	; 0x22
     d8c:	9b a1       	ldd	r25, Y+35	; 0x23
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     d9a:	88 23       	and	r24, r24
     d9c:	2c f4       	brge	.+10     	; 0xda8 <lcd_init+0x5cc>
		__ticks = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9f 8f       	std	Y+31, r25	; 0x1f
     da4:	8e 8f       	std	Y+30, r24	; 0x1e
     da6:	3f c0       	rjmp	.+126    	; 0xe26 <lcd_init+0x64a>
	else if (__tmp > 65535)
     da8:	68 a1       	ldd	r22, Y+32	; 0x20
     daa:	79 a1       	ldd	r23, Y+33	; 0x21
     dac:	8a a1       	ldd	r24, Y+34	; 0x22
     dae:	9b a1       	ldd	r25, Y+35	; 0x23
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	4c f5       	brge	.+82     	; 0xe12 <lcd_init+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc0:	6c a1       	ldd	r22, Y+36	; 0x24
     dc2:	7d a1       	ldd	r23, Y+37	; 0x25
     dc4:	8e a1       	ldd	r24, Y+38	; 0x26
     dc6:	9f a1       	ldd	r25, Y+39	; 0x27
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	51 e4       	ldi	r21, 0x41	; 65
     dd0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9f 8f       	std	Y+31, r25	; 0x1f
     de6:	8e 8f       	std	Y+30, r24	; 0x1e
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <lcd_init+0x62c>
     dea:	80 e9       	ldi	r24, 0x90	; 144
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	9d 8f       	std	Y+29, r25	; 0x1d
     df0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     df4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <lcd_init+0x61a>
     dfa:	9d 8f       	std	Y+29, r25	; 0x1d
     dfc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e00:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	9f 8f       	std	Y+31, r25	; 0x1f
     e06:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f7       	brne	.-38     	; 0xdea <lcd_init+0x60e>
     e10:	24 c0       	rjmp	.+72     	; 0xe5a <lcd_init+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e12:	68 a1       	ldd	r22, Y+32	; 0x20
     e14:	79 a1       	ldd	r23, Y+33	; 0x21
     e16:	8a a1       	ldd	r24, Y+34	; 0x22
     e18:	9b a1       	ldd	r25, Y+35	; 0x23
     e1a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9f 8f       	std	Y+31, r25	; 0x1f
     e24:	8e 8f       	std	Y+30, r24	; 0x1e
     e26:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e28:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e2a:	9b 8f       	std	Y+27, r25	; 0x1b
     e2c:	8a 8f       	std	Y+26, r24	; 0x1a
     e2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e30:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <lcd_init+0x656>
     e36:	9b 8f       	std	Y+27, r25	; 0x1b
     e38:	8a 8f       	std	Y+26, r24	; 0x1a
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <lcd_init+0x67e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e3c:	69 a5       	ldd	r22, Y+41	; 0x29
     e3e:	7a a5       	ldd	r23, Y+42	; 0x2a
     e40:	8b a5       	ldd	r24, Y+43	; 0x2b
     e42:	9c a5       	ldd	r25, Y+44	; 0x2c
     e44:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	88 a7       	std	Y+40, r24	; 0x28
     e4e:	88 a5       	ldd	r24, Y+40	; 0x28
     e50:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e52:	89 8d       	ldd	r24, Y+25	; 0x19
     e54:	8a 95       	dec	r24
     e56:	f1 f7       	brne	.-4      	; 0xe54 <lcd_init+0x678>
     e58:	89 8f       	std	Y+25, r24	; 0x19
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_nibble>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a8 e4       	ldi	r26, 0x48	; 72
     e66:	b2 e4       	ldi	r27, 0x42	; 66
     e68:	8d 8b       	std	Y+21, r24	; 0x15
     e6a:	9e 8b       	std	Y+22, r25	; 0x16
     e6c:	af 8b       	std	Y+23, r26	; 0x17
     e6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e70:	6d 89       	ldd	r22, Y+21	; 0x15
     e72:	7e 89       	ldd	r23, Y+22	; 0x16
     e74:	8f 89       	ldd	r24, Y+23	; 0x17
     e76:	98 8d       	ldd	r25, Y+24	; 0x18
     e78:	2b ea       	ldi	r18, 0xAB	; 171
     e7a:	3a ea       	ldi	r19, 0xAA	; 170
     e7c:	4a ea       	ldi	r20, 0xAA	; 170
     e7e:	50 e4       	ldi	r21, 0x40	; 64
     e80:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	89 8b       	std	Y+17, r24	; 0x11
     e8a:	9a 8b       	std	Y+18, r25	; 0x12
     e8c:	ab 8b       	std	Y+19, r26	; 0x13
     e8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e90:	69 89       	ldd	r22, Y+17	; 0x11
     e92:	7a 89       	ldd	r23, Y+18	; 0x12
     e94:	8b 89       	ldd	r24, Y+19	; 0x13
     e96:	9c 89       	ldd	r25, Y+20	; 0x14
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	1c f4       	brge	.+6      	; 0xeae <lcd_init+0x6d2>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	88 8b       	std	Y+16, r24	; 0x10
     eac:	91 c0       	rjmp	.+290    	; 0xfd0 <lcd_init+0x7f4>
	else if (__tmp > 255)
     eae:	69 89       	ldd	r22, Y+17	; 0x11
     eb0:	7a 89       	ldd	r23, Y+18	; 0x12
     eb2:	8b 89       	ldd	r24, Y+19	; 0x13
     eb4:	9c 89       	ldd	r25, Y+20	; 0x14
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	53 e4       	ldi	r21, 0x43	; 67
     ebe:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	0c f0       	brlt	.+2      	; 0xec8 <lcd_init+0x6ec>
     ec6:	7b c0       	rjmp	.+246    	; 0xfbe <lcd_init+0x7e2>
	{
		_delay_ms(__us / 1000.0);
     ec8:	6d 89       	ldd	r22, Y+21	; 0x15
     eca:	7e 89       	ldd	r23, Y+22	; 0x16
     ecc:	8f 89       	ldd	r24, Y+23	; 0x17
     ece:	98 8d       	ldd	r25, Y+24	; 0x18
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a e7       	ldi	r20, 0x7A	; 122
     ed6:	54 e4       	ldi	r21, 0x44	; 68
     ed8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__divsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8c 87       	std	Y+12, r24	; 0x0c
     ee2:	9d 87       	std	Y+13, r25	; 0x0d
     ee4:	ae 87       	std	Y+14, r26	; 0x0e
     ee6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	6c 85       	ldd	r22, Y+12	; 0x0c
     eea:	7d 85       	ldd	r23, Y+13	; 0x0d
     eec:	8e 85       	ldd	r24, Y+14	; 0x0e
     eee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	55 e4       	ldi	r21, 0x45	; 69
     ef8:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	88 87       	std	Y+8, r24	; 0x08
     f02:	99 87       	std	Y+9, r25	; 0x09
     f04:	aa 87       	std	Y+10, r26	; 0x0a
     f06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f08:	68 85       	ldd	r22, Y+8	; 0x08
     f0a:	79 85       	ldd	r23, Y+9	; 0x09
     f0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <lcd_init+0x74e>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9f 83       	std	Y+7, r25	; 0x07
     f26:	8e 83       	std	Y+6, r24	; 0x06
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <lcd_init+0x7cc>
	else if (__tmp > 65535)
     f2a:	68 85       	ldd	r22, Y+8	; 0x08
     f2c:	79 85       	ldd	r23, Y+9	; 0x09
     f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f30:	9b 85       	ldd	r25, Y+11	; 0x0b
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <lcd_init+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	6c 85       	ldd	r22, Y+12	; 0x0c
     f44:	7d 85       	ldd	r23, Y+13	; 0x0d
     f46:	8e 85       	ldd	r24, Y+14	; 0x0e
     f48:	9f 85       	ldd	r25, Y+15	; 0x0f
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9f 83       	std	Y+7, r25	; 0x07
     f68:	8e 83       	std	Y+6, r24	; 0x06
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <lcd_init+0x7ae>
     f6c:	80 e9       	ldi	r24, 0x90	; 144
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9d 83       	std	Y+5, r25	; 0x05
     f72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <lcd_init+0x79c>
     f7c:	9d 83       	std	Y+5, r25	; 0x05
     f7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	8e 81       	ldd	r24, Y+6	; 0x06
     f82:	9f 81       	ldd	r25, Y+7	; 0x07
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9f 83       	std	Y+7, r25	; 0x07
     f88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <lcd_init+0x790>
     f92:	24 c0       	rjmp	.+72     	; 0xfdc <lcd_init+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	68 85       	ldd	r22, Y+8	; 0x08
     f96:	79 85       	ldd	r23, Y+9	; 0x09
     f98:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9f 83       	std	Y+7, r25	; 0x07
     fa6:	8e 83       	std	Y+6, r24	; 0x06
     fa8:	8e 81       	ldd	r24, Y+6	; 0x06
     faa:	9f 81       	ldd	r25, Y+7	; 0x07
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <lcd_init+0x7d8>
     fb8:	9b 83       	std	Y+3, r25	; 0x03
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <lcd_init+0x800>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fbe:	69 89       	ldd	r22, Y+17	; 0x11
     fc0:	7a 89       	ldd	r23, Y+18	; 0x12
     fc2:	8b 89       	ldd	r24, Y+19	; 0x13
     fc4:	9c 89       	ldd	r25, Y+20	; 0x14
     fc6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	88 8b       	std	Y+16, r24	; 0x10
     fd0:	88 89       	ldd	r24, Y+16	; 0x10
     fd2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8a 95       	dec	r24
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <lcd_init+0x7fa>
     fda:	89 83       	std	Y+1, r24	; 0x01
  _delay_us( LCD_TIME_DAT );
  lcd_command( 0x28 );                          // 2 lines 5*8
     fdc:	88 e2       	ldi	r24, 0x28	; 40
     fde:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
  lcd_command( 0x08 );                          // display off
     fe2:	88 e0       	ldi	r24, 0x08	; 8
     fe4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
  lcd_command( 0x01 );                          // display clear
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
  lcd_command( 0x0E );                          // on, cursor, no blink
     ff4:	8e e0       	ldi	r24, 0x0E	; 14
     ff6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
//  lcd_command( 0x28 );                          // 2 lines 5*7
//  lcd_command( 0x08 );                          // display off
//  lcd_command( 0x01 );                          // display clear
//  lcd_command( 0x06 );                          // cursor increment
//  lcd_command( 0x0C );                          // on, no cursor, no blink
}
     ffa:	cc 59       	subi	r28, 0x9C	; 156
     ffc:	df 4f       	sbci	r29, 0xFF	; 255
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <lcd_number>:


void lcd_number(uint8_t number)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <lcd_number+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <lcd_number+0x8>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t cyf1, cyf2, cyf3 = 0;
    1020:	19 82       	std	Y+1, r1	; 0x01

	if (number >= 0 && number <= 9)
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	8a 30       	cpi	r24, 0x0A	; 10
    1026:	18 f4       	brcc	.+6      	; 0x102e <lcd_number+0x1c>
	lcd_cyfra(number);
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>

	if (number >= 10 && number <= 99)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	8a 30       	cpi	r24, 0x0A	; 10
    1032:	b0 f0       	brcs	.+44     	; 0x1060 <lcd_number+0x4e>
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	84 36       	cpi	r24, 0x64	; 100
    1038:	98 f4       	brcc	.+38     	; 0x1060 <lcd_number+0x4e>
	{
		cyf1 = number % 10;
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9a e0       	ldi	r25, 0x0A	; 10
    103e:	69 2f       	mov	r22, r25
    1040:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodqi4>
    1044:	89 2f       	mov	r24, r25
    1046:	8b 83       	std	Y+3, r24	; 0x03
		cyf2 = number / 10;
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9a e0       	ldi	r25, 0x0A	; 10
    104c:	69 2f       	mov	r22, r25
    104e:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodqi4>
    1052:	8a 83       	std	Y+2, r24	; 0x02

		lcd_cyfra(cyf2);
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
		lcd_cyfra(cyf1);
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
	}
	if (number >= 100 && number <= 255)
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	84 36       	cpi	r24, 0x64	; 100
    1064:	08 f1       	brcs	.+66     	; 0x10a8 <lcd_number+0x96>
		{
			cyf1 = number % 10;
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9a e0       	ldi	r25, 0x0A	; 10
    106a:	69 2f       	mov	r22, r25
    106c:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodqi4>
    1070:	89 2f       	mov	r24, r25
    1072:	8b 83       	std	Y+3, r24	; 0x03
			cyf2 = (number / 10) % 10;
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9a e0       	ldi	r25, 0x0A	; 10
    1078:	69 2f       	mov	r22, r25
    107a:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodqi4>
    107e:	9a e0       	ldi	r25, 0x0A	; 10
    1080:	69 2f       	mov	r22, r25
    1082:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodqi4>
    1086:	89 2f       	mov	r24, r25
    1088:	8a 83       	std	Y+2, r24	; 0x02
			cyf3 = number /100;
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	94 e6       	ldi	r25, 0x64	; 100
    108e:	69 2f       	mov	r22, r25
    1090:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodqi4>
    1094:	89 83       	std	Y+1, r24	; 0x01

			lcd_cyfra(cyf3);
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
			lcd_cyfra(cyf2);
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
			lcd_cyfra(cyf1);
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
		}
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <lcd_lnumber>:

void lcd_lnumber(int number)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2c 97       	sbiw	r28, 0x0c	; 12
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	9c 87       	std	Y+12, r25	; 0x0c
    10cc:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t cyf1, cyf2, cyf3, cyf4, cyf5, cyf6, cyf7, cyf8, cyf9, cyf10 = 0;
    10ce:	19 82       	std	Y+1, r1	; 0x01

	if (number >= 0 && number <= 9)
    10d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d4:	99 23       	and	r25, r25
    10d6:	44 f0       	brlt	.+16     	; 0x10e8 <lcd_lnumber+0x32>
    10d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10da:	9c 85       	ldd	r25, Y+12	; 0x0c
    10dc:	8a 30       	cpi	r24, 0x0A	; 10
    10de:	91 05       	cpc	r25, r1
    10e0:	1c f4       	brge	.+6      	; 0x10e8 <lcd_lnumber+0x32>
	lcd_cyfra(number);
    10e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>

	if (number >= 10 && number <= 99)
    10e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ec:	8a 30       	cpi	r24, 0x0A	; 10
    10ee:	91 05       	cpc	r25, r1
    10f0:	e4 f0       	brlt	.+56     	; 0x112a <__stack+0x2b>
    10f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f6:	84 36       	cpi	r24, 0x64	; 100
    10f8:	91 05       	cpc	r25, r1
    10fa:	bc f4       	brge	.+46     	; 0x112a <__stack+0x2b>
	{
		cyf1 = number % 10;
    10fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    10fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1100:	2a e0       	ldi	r18, 0x0A	; 10
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	b9 01       	movw	r22, r18
    1106:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    110a:	8a 87       	std	Y+10, r24	; 0x0a
		cyf2 = number / 10;
    110c:	8b 85       	ldd	r24, Y+11	; 0x0b
    110e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1110:	2a e0       	ldi	r18, 0x0A	; 10
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	b9 01       	movw	r22, r18
    1116:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    111a:	cb 01       	movw	r24, r22
    111c:	89 87       	std	Y+9, r24	; 0x09

		lcd_cyfra(cyf2);
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
		lcd_cyfra(cyf1);
    1124:	8a 85       	ldd	r24, Y+10	; 0x0a
    1126:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
	}
	if (number >= 100 && number <= 999)
    112a:	8b 85       	ldd	r24, Y+11	; 0x0b
    112c:	9c 85       	ldd	r25, Y+12	; 0x0c
    112e:	84 36       	cpi	r24, 0x64	; 100
    1130:	91 05       	cpc	r25, r1
    1132:	7c f1       	brlt	.+94     	; 0x1192 <__stack+0x93>
    1134:	8b 85       	ldd	r24, Y+11	; 0x0b
    1136:	9c 85       	ldd	r25, Y+12	; 0x0c
    1138:	23 e0       	ldi	r18, 0x03	; 3
    113a:	88 3e       	cpi	r24, 0xE8	; 232
    113c:	92 07       	cpc	r25, r18
    113e:	4c f5       	brge	.+82     	; 0x1192 <__stack+0x93>
		{
			cyf1 = number % 10;
    1140:	8b 85       	ldd	r24, Y+11	; 0x0b
    1142:	9c 85       	ldd	r25, Y+12	; 0x0c
    1144:	2a e0       	ldi	r18, 0x0A	; 10
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	b9 01       	movw	r22, r18
    114a:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    114e:	8a 87       	std	Y+10, r24	; 0x0a
			cyf2 = (number / 10) % 10;
    1150:	8b 85       	ldd	r24, Y+11	; 0x0b
    1152:	9c 85       	ldd	r25, Y+12	; 0x0c
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	b9 01       	movw	r22, r18
    115a:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    115e:	cb 01       	movw	r24, r22
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	b9 01       	movw	r22, r18
    1166:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    116a:	89 87       	std	Y+9, r24	; 0x09
			cyf3 = number /100;
    116c:	8b 85       	ldd	r24, Y+11	; 0x0b
    116e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1170:	24 e6       	ldi	r18, 0x64	; 100
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	b9 01       	movw	r22, r18
    1176:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    117a:	cb 01       	movw	r24, r22
    117c:	88 87       	std	Y+8, r24	; 0x08

			lcd_cyfra(cyf3);
    117e:	88 85       	ldd	r24, Y+8	; 0x08
    1180:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
			lcd_cyfra(cyf2);
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
			lcd_cyfra(cyf1);
    118a:	8a 85       	ldd	r24, Y+10	; 0x0a
    118c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
    1190:	98 c0       	rjmp	.+304    	; 0x12c2 <__stack+0x1c3>
		} else
	if (number >= 1000 && number <= 9999)
    1192:	8b 85       	ldd	r24, Y+11	; 0x0b
    1194:	9c 85       	ldd	r25, Y+12	; 0x0c
    1196:	23 e0       	ldi	r18, 0x03	; 3
    1198:	88 3e       	cpi	r24, 0xE8	; 232
    119a:	92 07       	cpc	r25, r18
    119c:	0c f4       	brge	.+2      	; 0x11a0 <__stack+0xa1>
    119e:	40 c0       	rjmp	.+128    	; 0x1220 <__stack+0x121>
    11a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a4:	27 e2       	ldi	r18, 0x27	; 39
    11a6:	80 31       	cpi	r24, 0x10	; 16
    11a8:	92 07       	cpc	r25, r18
    11aa:	d4 f5       	brge	.+116    	; 0x1220 <__stack+0x121>
			{
				cyf1 = number % 10;
    11ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b0:	2a e0       	ldi	r18, 0x0A	; 10
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	b9 01       	movw	r22, r18
    11b6:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    11ba:	8a 87       	std	Y+10, r24	; 0x0a
				cyf2 = (number / 10) % 10;
    11bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    11be:	9c 85       	ldd	r25, Y+12	; 0x0c
    11c0:	2a e0       	ldi	r18, 0x0A	; 10
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	b9 01       	movw	r22, r18
    11c6:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    11ca:	cb 01       	movw	r24, r22
    11cc:	2a e0       	ldi	r18, 0x0A	; 10
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	b9 01       	movw	r22, r18
    11d2:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    11d6:	89 87       	std	Y+9, r24	; 0x09
				cyf3 = (number /100) % 10;
    11d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11da:	9c 85       	ldd	r25, Y+12	; 0x0c
    11dc:	24 e6       	ldi	r18, 0x64	; 100
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	b9 01       	movw	r22, r18
    11e2:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    11e6:	cb 01       	movw	r24, r22
    11e8:	2a e0       	ldi	r18, 0x0A	; 10
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	b9 01       	movw	r22, r18
    11ee:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    11f2:	88 87       	std	Y+8, r24	; 0x08
				cyf4 = number /1000;
    11f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f8:	28 ee       	ldi	r18, 0xE8	; 232
    11fa:	33 e0       	ldi	r19, 0x03	; 3
    11fc:	b9 01       	movw	r22, r18
    11fe:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    1202:	cb 01       	movw	r24, r22
    1204:	8f 83       	std	Y+7, r24	; 0x07

				lcd_cyfra(cyf4);
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf3);
    120c:	88 85       	ldd	r24, Y+8	; 0x08
    120e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf2);
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf1);
    1218:	8a 85       	ldd	r24, Y+10	; 0x0a
    121a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
    121e:	51 c0       	rjmp	.+162    	; 0x12c2 <__stack+0x1c3>
			} else
	if (number >= 10000 && number <= 99999)
    1220:	8b 85       	ldd	r24, Y+11	; 0x0b
    1222:	9c 85       	ldd	r25, Y+12	; 0x0c
    1224:	27 e2       	ldi	r18, 0x27	; 39
    1226:	80 31       	cpi	r24, 0x10	; 16
    1228:	92 07       	cpc	r25, r18
    122a:	0c f4       	brge	.+2      	; 0x122e <__stack+0x12f>
    122c:	4a c0       	rjmp	.+148    	; 0x12c2 <__stack+0x1c3>
			{
				cyf1 = number % 10;
    122e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1230:	9c 85       	ldd	r25, Y+12	; 0x0c
    1232:	2a e0       	ldi	r18, 0x0A	; 10
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    123c:	8a 87       	std	Y+10, r24	; 0x0a
				cyf2 = (number / 10) % 10;
    123e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1240:	9c 85       	ldd	r25, Y+12	; 0x0c
    1242:	2a e0       	ldi	r18, 0x0A	; 10
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    124c:	cb 01       	movw	r24, r22
    124e:	2a e0       	ldi	r18, 0x0A	; 10
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	b9 01       	movw	r22, r18
    1254:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    1258:	89 87       	std	Y+9, r24	; 0x09
				cyf3 = (number /100) % 10;
    125a:	8b 85       	ldd	r24, Y+11	; 0x0b
    125c:	9c 85       	ldd	r25, Y+12	; 0x0c
    125e:	24 e6       	ldi	r18, 0x64	; 100
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	b9 01       	movw	r22, r18
    1264:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    1268:	cb 01       	movw	r24, r22
    126a:	2a e0       	ldi	r18, 0x0A	; 10
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	b9 01       	movw	r22, r18
    1270:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    1274:	88 87       	std	Y+8, r24	; 0x08
				cyf4 = (number /1000) % 10;
    1276:	8b 85       	ldd	r24, Y+11	; 0x0b
    1278:	9c 85       	ldd	r25, Y+12	; 0x0c
    127a:	28 ee       	ldi	r18, 0xE8	; 232
    127c:	33 e0       	ldi	r19, 0x03	; 3
    127e:	b9 01       	movw	r22, r18
    1280:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    1284:	cb 01       	movw	r24, r22
    1286:	2a e0       	ldi	r18, 0x0A	; 10
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	b9 01       	movw	r22, r18
    128c:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    1290:	8f 83       	std	Y+7, r24	; 0x07
				cyf5 = number /10000;
    1292:	8b 85       	ldd	r24, Y+11	; 0x0b
    1294:	9c 85       	ldd	r25, Y+12	; 0x0c
    1296:	20 e1       	ldi	r18, 0x10	; 16
    1298:	37 e2       	ldi	r19, 0x27	; 39
    129a:	b9 01       	movw	r22, r18
    129c:	0e 94 8e 19 	call	0x331c	; 0x331c <__divmodhi4>
    12a0:	cb 01       	movw	r24, r22
    12a2:	8e 83       	std	Y+6, r24	; 0x06

				lcd_cyfra(cyf5);
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf4);
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
    12ac:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf3);
    12b0:	88 85       	ldd	r24, Y+8	; 0x08
    12b2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf2);
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf1);
    12bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    12be:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <lcd_cyfra>
				lcd_cyfra(cyf4);
				lcd_cyfra(cyf3);
				lcd_cyfra(cyf2);
				lcd_cyfra(cyf1);
			}
}
    12c2:	2c 96       	adiw	r28, 0x0c	; 12
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <lcd_cyfra>:
void lcd_cyfra(uint8_t cyf)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <lcd_cyfra+0x6>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
	switch (cyf) {
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3b 83       	std	Y+3, r19	; 0x03
    12ea:	2a 83       	std	Y+2, r18	; 0x02
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <lcd_cyfra+0x24>
    12f6:	4f c0       	rjmp	.+158    	; 0x1396 <lcd_cyfra+0xc2>
    12f8:	2a 81       	ldd	r18, Y+2	; 0x02
    12fa:	3b 81       	ldd	r19, Y+3	; 0x03
    12fc:	25 30       	cpi	r18, 0x05	; 5
    12fe:	31 05       	cpc	r19, r1
    1300:	d4 f4       	brge	.+52     	; 0x1336 <lcd_cyfra+0x62>
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	c9 f1       	breq	.+114    	; 0x137e <lcd_cyfra+0xaa>
    130c:	2a 81       	ldd	r18, Y+2	; 0x02
    130e:	3b 81       	ldd	r19, Y+3	; 0x03
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	2c f4       	brge	.+10     	; 0x1320 <lcd_cyfra+0x4c>
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	9b 81       	ldd	r25, Y+3	; 0x03
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	61 f1       	breq	.+88     	; 0x1376 <lcd_cyfra+0xa2>
    131e:	52 c0       	rjmp	.+164    	; 0x13c4 <lcd_cyfra+0xf0>
    1320:	2a 81       	ldd	r18, Y+2	; 0x02
    1322:	3b 81       	ldd	r19, Y+3	; 0x03
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	71 f1       	breq	.+92     	; 0x1386 <lcd_cyfra+0xb2>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	69 f1       	breq	.+90     	; 0x138e <lcd_cyfra+0xba>
    1334:	47 c0       	rjmp	.+142    	; 0x13c4 <lcd_cyfra+0xf0>
    1336:	2a 81       	ldd	r18, Y+2	; 0x02
    1338:	3b 81       	ldd	r19, Y+3	; 0x03
    133a:	27 30       	cpi	r18, 0x07	; 7
    133c:	31 05       	cpc	r19, r1
    133e:	b9 f1       	breq	.+110    	; 0x13ae <lcd_cyfra+0xda>
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	9b 81       	ldd	r25, Y+3	; 0x03
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	91 05       	cpc	r25, r1
    1348:	5c f4       	brge	.+22     	; 0x1360 <lcd_cyfra+0x8c>
    134a:	2a 81       	ldd	r18, Y+2	; 0x02
    134c:	3b 81       	ldd	r19, Y+3	; 0x03
    134e:	25 30       	cpi	r18, 0x05	; 5
    1350:	31 05       	cpc	r19, r1
    1352:	29 f1       	breq	.+74     	; 0x139e <lcd_cyfra+0xca>
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	86 30       	cpi	r24, 0x06	; 6
    135a:	91 05       	cpc	r25, r1
    135c:	21 f1       	breq	.+72     	; 0x13a6 <lcd_cyfra+0xd2>
    135e:	32 c0       	rjmp	.+100    	; 0x13c4 <lcd_cyfra+0xf0>
    1360:	2a 81       	ldd	r18, Y+2	; 0x02
    1362:	3b 81       	ldd	r19, Y+3	; 0x03
    1364:	28 30       	cpi	r18, 0x08	; 8
    1366:	31 05       	cpc	r19, r1
    1368:	31 f1       	breq	.+76     	; 0x13b6 <lcd_cyfra+0xe2>
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	89 30       	cpi	r24, 0x09	; 9
    1370:	91 05       	cpc	r25, r1
    1372:	29 f1       	breq	.+74     	; 0x13be <lcd_cyfra+0xea>
    1374:	27 c0       	rjmp	.+78     	; 0x13c4 <lcd_cyfra+0xf0>
	case 0:
		lcd_putchar(48);
    1376:	80 e3       	ldi	r24, 0x30	; 48
    1378:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    137c:	23 c0       	rjmp	.+70     	; 0x13c4 <lcd_cyfra+0xf0>
		break;
	case 1:
			lcd_putchar(49);
    137e:	81 e3       	ldi	r24, 0x31	; 49
    1380:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    1384:	1f c0       	rjmp	.+62     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 2:
			lcd_putchar(50);
    1386:	82 e3       	ldi	r24, 0x32	; 50
    1388:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    138c:	1b c0       	rjmp	.+54     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 3:
			lcd_putchar(51);
    138e:	83 e3       	ldi	r24, 0x33	; 51
    1390:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    1394:	17 c0       	rjmp	.+46     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 4:
			lcd_putchar(52);
    1396:	84 e3       	ldi	r24, 0x34	; 52
    1398:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    139c:	13 c0       	rjmp	.+38     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 5:
			lcd_putchar(53);
    139e:	85 e3       	ldi	r24, 0x35	; 53
    13a0:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 6:
			lcd_putchar(54);
    13a6:	86 e3       	ldi	r24, 0x36	; 54
    13a8:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    13ac:	0b c0       	rjmp	.+22     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 7:
			lcd_putchar(55);
    13ae:	87 e3       	ldi	r24, 0x37	; 55
    13b0:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 8:
			lcd_putchar(56);
    13b6:	88 e3       	ldi	r24, 0x38	; 56
    13b8:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <lcd_cyfra+0xf0>
			break;
	case 9:
			lcd_putchar(57);
    13be:	89 e3       	ldi	r24, 0x39	; 57
    13c0:	0e 94 83 03 	call	0x706	; 0x706 <lcd_putchar>
			break;
	default:
			break;

	}
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <keypad_init>:
	COL_4 = 	~(COLS ^ dir);
	COL_DDR_4 =  (COLS ^ dir);
}
#endif

void keypad_init(){
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62

#ifndef KEY_MODE_4x1
	keypad_set_input(ROWS);
#else
		ROW_1 = 1; 			// set row pins as input with pull-up
    13d8:	e8 e2       	ldi	r30, 0x28	; 40
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	80 83       	st	Z, r24
		ROW_DDR_1 = 0;
    13e2:	e7 e2       	ldi	r30, 0x27	; 39
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8e 7f       	andi	r24, 0xFE	; 254
    13ea:	80 83       	st	Z, r24
		ROW_2 = 1;
    13ec:	e8 e2       	ldi	r30, 0x28	; 40
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	82 60       	ori	r24, 0x02	; 2
    13f4:	80 83       	st	Z, r24
		ROW_DDR_2 = 0;
    13f6:	e7 e2       	ldi	r30, 0x27	; 39
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8d 7f       	andi	r24, 0xFD	; 253
    13fe:	80 83       	st	Z, r24
		ROW_3 = 1;
    1400:	e8 e2       	ldi	r30, 0x28	; 40
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	84 60       	ori	r24, 0x04	; 4
    1408:	80 83       	st	Z, r24
		ROW_DDR_3 = 0;
    140a:	e7 e2       	ldi	r30, 0x27	; 39
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8b 7f       	andi	r24, 0xFB	; 251
    1412:	80 83       	st	Z, r24
		ROW_4 = 1;
    1414:	e8 e2       	ldi	r30, 0x28	; 40
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	80 83       	st	Z, r24
		ROW_DDR_4 = 0;
    141e:	e7 e2       	ldi	r30, 0x27	; 39
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	87 7f       	andi	r24, 0xF7	; 247
    1426:	80 83       	st	Z, r24
#endif

	KEYINT = 1;			// set key interrupt pins as input with pull-up
    1428:	eb e2       	ldi	r30, 0x2B	; 43
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	84 60       	ori	r24, 0x04	; 4
    1430:	80 83       	st	Z, r24
	KEYINT_DDR = 0;
    1432:	ea e2       	ldi	r30, 0x2A	; 42
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	80 83       	st	Z, r24
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <keypad_poll>:


void keypad_poll(){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <keypad_poll+0x6>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	keypad_state = (ROW_R_4 << 3) | (ROW_R_3 << 2) | (ROW_R_2 << 1) | (ROW_R_1 << 0);
    144c:	e6 e2       	ldi	r30, 0x26	; 38
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	86 95       	lsr	r24
    1454:	86 95       	lsr	r24
    1456:	86 95       	lsr	r24
    1458:	81 70       	andi	r24, 0x01	; 1
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	28 2f       	mov	r18, r24
    146c:	e6 e2       	ldi	r30, 0x26	; 38
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	86 95       	lsr	r24
    1474:	86 95       	lsr	r24
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	28 2b       	or	r18, r24
    1486:	e6 e2       	ldi	r30, 0x26	; 38
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	86 95       	lsr	r24
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	92 2f       	mov	r25, r18
    149a:	98 2b       	or	r25, r24
    149c:	e6 e2       	ldi	r30, 0x26	; 38
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	81 70       	andi	r24, 0x01	; 1
    14a4:	89 2b       	or	r24, r25
    14a6:	80 93 2b 01 	sts	0x012B, r24
	}
	else keypad_pressed = 0;

	keypad_set_input(ROWS);
#else
	keypad_state = ~keypad_state;
    14aa:	80 91 2b 01 	lds	r24, 0x012B
    14ae:	80 95       	com	r24
    14b0:	80 93 2b 01 	sts	0x012B, r24
	if( (keypad_state&0x0F) && (keypad_state&0xF0) ) {							// TODO AND czy tez OR?
    14b4:	80 91 2b 01 	lds	r24, 0x012B
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	8f 70       	andi	r24, 0x0F	; 15
    14be:	90 70       	andi	r25, 0x00	; 0
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	41 f1       	breq	.+80     	; 0x1514 <keypad_poll+0xd2>
    14c4:	80 91 2b 01 	lds	r24, 0x012B
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	80 7f       	andi	r24, 0xF0	; 240
    14ce:	90 70       	andi	r25, 0x00	; 0
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	01 f1       	breq	.+64     	; 0x1514 <keypad_poll+0xd2>
			for(int i=0; i<4; ++i) if( keypad_state & (1<<i) ) 		keypad_pressed  = i+1;
    14d4:	1a 82       	std	Y+2, r1	; 0x02
    14d6:	19 82       	std	Y+1, r1	; 0x01
    14d8:	17 c0       	rjmp	.+46     	; 0x1508 <keypad_poll+0xc6>
    14da:	80 91 2b 01 	lds	r24, 0x012B
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	09 80       	ldd	r0, Y+1	; 0x01
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <keypad_poll+0xa8>
    14e6:	95 95       	asr	r25
    14e8:	87 95       	ror	r24
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <keypad_poll+0xa4>
    14ee:	81 70       	andi	r24, 0x01	; 1
    14f0:	90 70       	andi	r25, 0x00	; 0
    14f2:	88 23       	and	r24, r24
    14f4:	21 f0       	breq	.+8      	; 0x14fe <keypad_poll+0xbc>
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	80 93 2c 01 	sts	0x012C, r24
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	91 05       	cpc	r25, r1
    1510:	24 f3       	brlt	.-56     	; 0x14da <keypad_poll+0x98>
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <keypad_poll+0xd6>
		}
		else keypad_pressed = 0;
    1514:	10 92 2c 01 	sts	0x012C, r1
#endif
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <main>:
#include "uart.h"
#include "lcd_drv.h"
#include "keypad.h"


int main(void) {
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62

//	LED_DDR_1 = 1; // enable output pins
//	LED_DDR_2 = 1;
	LED_DDR_3 = 0;
    1526:	ea e2       	ldi	r30, 0x2A	; 42
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8b 7f       	andi	r24, 0xFB	; 251
    152e:	80 83       	st	Z, r24
	LED_DDR_4 = 0;
    1530:	ea e2       	ldi	r30, 0x2A	; 42
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	87 7f       	andi	r24, 0xF7	; 247
    1538:	80 83       	st	Z, r24
	LED_DDR_5 = 1;
    153a:	ea e2       	ldi	r30, 0x2A	; 42
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 61       	ori	r24, 0x10	; 16
    1542:	80 83       	st	Z, r24
	LED_DDR_6 = 1;
    1544:	ea e2       	ldi	r30, 0x2A	; 42
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	80 62       	ori	r24, 0x20	; 32
    154c:	80 83       	st	Z, r24

//	LED_1 = 0; // turn off leds
//	LED_2 = 0;
	LED_3 = 1;
    154e:	eb e2       	ldi	r30, 0x2B	; 43
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	84 60       	ori	r24, 0x04	; 4
    1556:	80 83       	st	Z, r24
	LED_4 = 1;
    1558:	eb e2       	ldi	r30, 0x2B	; 43
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 60       	ori	r24, 0x08	; 8
    1560:	80 83       	st	Z, r24
	LED_5 = 0;
    1562:	eb e2       	ldi	r30, 0x2B	; 43
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8f 7e       	andi	r24, 0xEF	; 239
    156a:	80 83       	st	Z, r24
	LED_6 = 1;
    156c:	eb e2       	ldi	r30, 0x2B	; 43
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 62       	ori	r24, 0x20	; 32
    1574:	80 83       	st	Z, r24

	MOT_DDR_1 = 1;
    1576:	e4 e2       	ldi	r30, 0x24	; 36
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	81 60       	ori	r24, 0x01	; 1
    157e:	80 83       	st	Z, r24
	MOT_DDR_2 = 1;
    1580:	e4 e2       	ldi	r30, 0x24	; 36
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	82 60       	ori	r24, 0x02	; 2
    1588:	80 83       	st	Z, r24
	MOT_DDR_3 = 1;
    158a:	e4 e2       	ldi	r30, 0x24	; 36
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	84 60       	ori	r24, 0x04	; 4
    1592:	80 83       	st	Z, r24
	MOT_DDR_4 = 1;
    1594:	e4 e2       	ldi	r30, 0x24	; 36
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 60       	ori	r24, 0x08	; 8
    159c:	80 83       	st	Z, r24
	MOT_DDR_5 = 1;
    159e:	e4 e2       	ldi	r30, 0x24	; 36
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 61       	ori	r24, 0x10	; 16
    15a6:	80 83       	st	Z, r24
	MOT_DDR_6 = 1;
    15a8:	e4 e2       	ldi	r30, 0x24	; 36
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 62       	ori	r24, 0x20	; 32
    15b0:	80 83       	st	Z, r24
	MOT_DDR_7 = 1;
    15b2:	e4 e2       	ldi	r30, 0x24	; 36
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	80 83       	st	Z, r24
	MOT_DDR_8 = 1;
    15bc:	e4 e2       	ldi	r30, 0x24	; 36
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 68       	ori	r24, 0x80	; 128
    15c4:	80 83       	st	Z, r24

	LED_1 = 0;
    15c6:	eb e2       	ldi	r30, 0x2B	; 43
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	80 83       	st	Z, r24
	LED_2 = 0;
    15d0:	eb e2       	ldi	r30, 0x2B	; 43
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8d 7f       	andi	r24, 0xFD	; 253
    15d8:	80 83       	st	Z, r24
//	LED_3 = 0;
	LED_4 = 0;
    15da:	eb e2       	ldi	r30, 0x2B	; 43
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	87 7f       	andi	r24, 0xF7	; 247
    15e2:	80 83       	st	Z, r24
	LED_5 = 0;
    15e4:	eb e2       	ldi	r30, 0x2B	; 43
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 7e       	andi	r24, 0xEF	; 239
    15ec:	80 83       	st	Z, r24
	LED_6 = 0;
    15ee:	eb e2       	ldi	r30, 0x2B	; 43
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 7d       	andi	r24, 0xDF	; 223
    15f6:	80 83       	st	Z, r24
	LED_7 = 0;
    15f8:	eb e2       	ldi	r30, 0x2B	; 43
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8f 7b       	andi	r24, 0xBF	; 191
    1600:	80 83       	st	Z, r24
	LED_8 = 0;
    1602:	eb e2       	ldi	r30, 0x2B	; 43
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	80 83       	st	Z, r24

	TCCR1B = 0b00001001;
    160c:	e1 e8       	ldi	r30, 0x81	; 129
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	89 e0       	ldi	r24, 0x09	; 9
    1612:	80 83       	st	Z, r24
	TIMSK1 = 0x02;
    1614:	ef e6       	ldi	r30, 0x6F	; 111
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	80 83       	st	Z, r24
	OCR1A = 16;
    161c:	e8 e8       	ldi	r30, 0x88	; 136
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 e1       	ldi	r24, 0x10	; 16
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24

//	TCCR3B = 0b00001101;
//	TIMSK3 = 0x02;
//	OCR3A = 1;//15625;

	EICRA = 0x0F;
    1628:	e9 e6       	ldi	r30, 0x69	; 105
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8f e0       	ldi	r24, 0x0F	; 15
    162e:	80 83       	st	Z, r24
	EIMSK = 0x03;
    1630:	ed e3       	ldi	r30, 0x3D	; 61
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	80 83       	st	Z, r24
//	TCCR0A = 0b00000010;
//	TCCR0B = 0b00000001;
//	TIMSK0 = 0x02;
//	OCR0A = 64;

	lcd_init();
    1638:	0e 94 ee 03 	call	0x7dc	; 0x7dc <lcd_init>
	lcd_puts("1234");
    163c:	82 e1       	ldi	r24, 0x12	; 18
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_puts>
	LED_4 = 1;
    1644:	eb e2       	ldi	r30, 0x2B	; 43
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	88 60       	ori	r24, 0x08	; 8
    164c:	80 83       	st	Z, r24

	sei();
    164e:	78 94       	sei
	LED_6 = 0;
    1650:	eb e2       	ldi	r30, 0x2B	; 43
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7d       	andi	r24, 0xDF	; 223
    1658:	80 83       	st	Z, r24
	lcd_blank();
    165a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <lcd_blank>
    165e:	ff cf       	rjmp	.-2      	; 0x165e <main+0x13c>

00001660 <__vector_1>:
volatile long long int czas = 0;
char czasa[8] = {0,0,0,0,0,0,0,0};
volatile char counting = 0;

ISR(INT0_vect)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62

	if (counting == 0) {
    168a:	80 91 3f 01 	lds	r24, 0x013F
    168e:	88 23       	and	r24, r24
    1690:	21 f4       	brne	.+8      	; 0x169a <__vector_1+0x3a>
//		czas = 0;
		counting = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	80 93 3f 01 	sts	0x013F, r24
    1698:	50 c0       	rjmp	.+160    	; 0x173a <__vector_1+0xda>
	}
		else
		{
			counting = 0;
    169a:	10 92 3f 01 	sts	0x013F, r1
			lcd_blank();
    169e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <lcd_blank>
			lcd_xy(3,0);
    16a2:	83 e8       	ldi	r24, 0x83	; 131
    16a4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <lcd_command>
			ultoa(czas, czasa,10);
    16a8:	20 91 2f 01 	lds	r18, 0x012F
    16ac:	30 91 30 01 	lds	r19, 0x0130
    16b0:	40 91 31 01 	lds	r20, 0x0131
    16b4:	50 91 32 01 	lds	r21, 0x0132
    16b8:	60 91 33 01 	lds	r22, 0x0133
    16bc:	70 91 34 01 	lds	r23, 0x0134
    16c0:	80 91 35 01 	lds	r24, 0x0135
    16c4:	90 91 36 01 	lds	r25, 0x0136
    16c8:	da 01       	movw	r26, r20
    16ca:	c9 01       	movw	r24, r18
    16cc:	27 e3       	ldi	r18, 0x37	; 55
    16ce:	31 e0       	ldi	r19, 0x01	; 1
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	a9 01       	movw	r20, r18
    16d6:	2a e0       	ldi	r18, 0x0A	; 10
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <ultoa>
			if (czas != 0)
    16de:	20 91 2f 01 	lds	r18, 0x012F
    16e2:	30 91 30 01 	lds	r19, 0x0130
    16e6:	40 91 31 01 	lds	r20, 0x0131
    16ea:	50 91 32 01 	lds	r21, 0x0132
    16ee:	60 91 33 01 	lds	r22, 0x0133
    16f2:	70 91 34 01 	lds	r23, 0x0134
    16f6:	80 91 35 01 	lds	r24, 0x0135
    16fa:	90 91 36 01 	lds	r25, 0x0136
    16fe:	e2 2f       	mov	r30, r18
    1700:	e3 2b       	or	r30, r19
    1702:	e4 2b       	or	r30, r20
    1704:	e5 2b       	or	r30, r21
    1706:	e6 2b       	or	r30, r22
    1708:	e7 2b       	or	r30, r23
    170a:	e8 2b       	or	r30, r24
    170c:	e9 2b       	or	r30, r25
    170e:	ee 23       	and	r30, r30
    1710:	21 f0       	breq	.+8      	; 0x171a <__vector_1+0xba>
				lcd_puts(czasa);
    1712:	87 e3       	ldi	r24, 0x37	; 55
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	0e 94 b3 03 	call	0x766	; 0x766 <lcd_puts>
//			if(czas!=0)
//				lcd_lnumber((200000 / czas));
			czas = 0;
    171a:	10 92 2f 01 	sts	0x012F, r1
    171e:	10 92 30 01 	sts	0x0130, r1
    1722:	10 92 31 01 	sts	0x0131, r1
    1726:	10 92 32 01 	sts	0x0132, r1
    172a:	10 92 33 01 	sts	0x0133, r1
    172e:	10 92 34 01 	sts	0x0134, r1
    1732:	10 92 35 01 	sts	0x0135, r1
    1736:	10 92 36 01 	sts	0x0136, r1
		}

	if (yu == 0) {
    173a:	80 91 2d 01 	lds	r24, 0x012D
    173e:	90 91 2e 01 	lds	r25, 0x012E
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	59 f4       	brne	.+22     	; 0x175c <__vector_1+0xfc>
		LED_5 = 1;
    1746:	eb e2       	ldi	r30, 0x2B	; 43
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 61       	ori	r24, 0x10	; 16
    174e:	80 83       	st	Z, r24
		yu = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	90 93 2e 01 	sts	0x012E, r25
    1758:	80 93 2d 01 	sts	0x012D, r24
	//	{
	//		LED_5 = 0;
	//		yu = 0;
	//	}

}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_2>:

ISR(INT1_vect)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	ef 93       	push	r30
    1792:	ff 93       	push	r31
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	//		if(czas!=0)
	//			lcd_lnumber((200000 / czas));
	//		czas = 0;
	//	}

	if (yu == 1) {
    179c:	80 91 2d 01 	lds	r24, 0x012D
    17a0:	90 91 2e 01 	lds	r25, 0x012E
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	49 f4       	brne	.+18     	; 0x17bc <__vector_2+0x3a>
		LED_5 = 0;
    17aa:	eb e2       	ldi	r30, 0x2B	; 43
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 7e       	andi	r24, 0xEF	; 239
    17b2:	80 83       	st	Z, r24
		yu = 0;
    17b4:	10 92 2e 01 	sts	0x012E, r1
    17b8:	10 92 2d 01 	sts	0x012D, r1
	//	else
	//	{
	//		LED_5 = 0;
	//		yu = 0;
	//	}
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	ab 97       	sbiw	r28, 0x2b	; 43
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	cd bf       	out	0x3d, r28	; 61
	if (counting == 1)
    17fa:	80 91 3f 01 	lds	r24, 0x013F
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	09 f0       	breq	.+2      	; 0x1804 <__vector_16+0x32>
    1802:	f4 c0       	rjmp	.+488    	; 0x19ec <__vector_16+0x21a>
//		{
//			czas++;
		czas = czas + 4;
    1804:	80 91 2f 01 	lds	r24, 0x012F
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	90 91 30 01 	lds	r25, 0x0130
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	80 91 31 01 	lds	r24, 0x0131
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	90 91 32 01 	lds	r25, 0x0132
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	80 91 33 01 	lds	r24, 0x0133
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	90 91 34 01 	lds	r25, 0x0134
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	80 91 35 01 	lds	r24, 0x0135
    182c:	8f 83       	std	Y+7, r24	; 0x07
    182e:	90 91 36 01 	lds	r25, 0x0136
    1832:	98 87       	std	Y+8, r25	; 0x08
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	89 87       	std	Y+9, r24	; 0x09
    1838:	1a 86       	std	Y+10, r1	; 0x0a
    183a:	1b 86       	std	Y+11, r1	; 0x0b
    183c:	1c 86       	std	Y+12, r1	; 0x0c
    183e:	1d 86       	std	Y+13, r1	; 0x0d
    1840:	1e 86       	std	Y+14, r1	; 0x0e
    1842:	1f 86       	std	Y+15, r1	; 0x0f
    1844:	18 8a       	std	Y+16, r1	; 0x10
    1846:	99 81       	ldd	r25, Y+1	; 0x01
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	98 0f       	add	r25, r24
    184c:	99 8b       	std	Y+17, r25	; 0x11
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	99 8f       	std	Y+25, r25	; 0x19
    1852:	89 89       	ldd	r24, Y+17	; 0x11
    1854:	99 81       	ldd	r25, Y+1	; 0x01
    1856:	89 17       	cp	r24, r25
    1858:	08 f0       	brcs	.+2      	; 0x185c <__vector_16+0x8a>
    185a:	19 8e       	std	Y+25, r1	; 0x19
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	89 0f       	add	r24, r25
    1862:	8a 8b       	std	Y+18, r24	; 0x12
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	8a 8f       	std	Y+26, r24	; 0x1a
    1868:	9a 89       	ldd	r25, Y+18	; 0x12
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	98 17       	cp	r25, r24
    186e:	08 f0       	brcs	.+2      	; 0x1872 <__vector_16+0xa0>
    1870:	1a 8e       	std	Y+26, r1	; 0x1a
    1872:	99 8d       	ldd	r25, Y+25	; 0x19
    1874:	8a 89       	ldd	r24, Y+18	; 0x12
    1876:	98 0f       	add	r25, r24
    1878:	9b 8f       	std	Y+27, r25	; 0x1b
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	9c 8f       	std	Y+28, r25	; 0x1c
    187e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1880:	9a 89       	ldd	r25, Y+18	; 0x12
    1882:	89 17       	cp	r24, r25
    1884:	08 f0       	brcs	.+2      	; 0x1888 <__vector_16+0xb6>
    1886:	1c 8e       	std	Y+28, r1	; 0x1c
    1888:	8a 8d       	ldd	r24, Y+26	; 0x1a
    188a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188c:	89 2b       	or	r24, r25
    188e:	8a 8f       	std	Y+26, r24	; 0x1a
    1890:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1892:	8a 8b       	std	Y+18, r24	; 0x12
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	8b 85       	ldd	r24, Y+11	; 0x0b
    1898:	98 0f       	add	r25, r24
    189a:	9b 8b       	std	Y+19, r25	; 0x13
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	9d 8f       	std	Y+29, r25	; 0x1d
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	89 17       	cp	r24, r25
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <__vector_16+0xd8>
    18a8:	1d 8e       	std	Y+29, r1	; 0x1d
    18aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ac:	9b 89       	ldd	r25, Y+19	; 0x13
    18ae:	89 0f       	add	r24, r25
    18b0:	8e 8f       	std	Y+30, r24	; 0x1e
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	8f 8f       	std	Y+31, r24	; 0x1f
    18b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	98 17       	cp	r25, r24
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <__vector_16+0xee>
    18be:	1f 8e       	std	Y+31, r1	; 0x1f
    18c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c4:	98 2b       	or	r25, r24
    18c6:	9d 8f       	std	Y+29, r25	; 0x1d
    18c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ca:	9b 8b       	std	Y+19, r25	; 0x13
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    18d0:	89 0f       	add	r24, r25
    18d2:	8c 8b       	std	Y+20, r24	; 0x14
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	88 a3       	std	Y+32, r24	; 0x20
    18d8:	9c 89       	ldd	r25, Y+20	; 0x14
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	98 17       	cp	r25, r24
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <__vector_16+0x110>
    18e0:	18 a2       	std	Y+32, r1	; 0x20
    18e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18e4:	8c 89       	ldd	r24, Y+20	; 0x14
    18e6:	98 0f       	add	r25, r24
    18e8:	99 a3       	std	Y+33, r25	; 0x21
    18ea:	91 e0       	ldi	r25, 0x01	; 1
    18ec:	9a a3       	std	Y+34, r25	; 0x22
    18ee:	89 a1       	ldd	r24, Y+33	; 0x21
    18f0:	9c 89       	ldd	r25, Y+20	; 0x14
    18f2:	89 17       	cp	r24, r25
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <__vector_16+0x126>
    18f6:	1a a2       	std	Y+34, r1	; 0x22
    18f8:	88 a1       	ldd	r24, Y+32	; 0x20
    18fa:	9a a1       	ldd	r25, Y+34	; 0x22
    18fc:	89 2b       	or	r24, r25
    18fe:	88 a3       	std	Y+32, r24	; 0x20
    1900:	89 a1       	ldd	r24, Y+33	; 0x21
    1902:	8c 8b       	std	Y+20, r24	; 0x14
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	98 0f       	add	r25, r24
    190a:	9d 8b       	std	Y+21, r25	; 0x15
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	9b a3       	std	Y+35, r25	; 0x23
    1910:	8d 89       	ldd	r24, Y+21	; 0x15
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	89 17       	cp	r24, r25
    1916:	08 f0       	brcs	.+2      	; 0x191a <__vector_16+0x148>
    1918:	1b a2       	std	Y+35, r1	; 0x23
    191a:	88 a1       	ldd	r24, Y+32	; 0x20
    191c:	9d 89       	ldd	r25, Y+21	; 0x15
    191e:	89 0f       	add	r24, r25
    1920:	8c a3       	std	Y+36, r24	; 0x24
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	8d a3       	std	Y+37, r24	; 0x25
    1926:	9c a1       	ldd	r25, Y+36	; 0x24
    1928:	8d 89       	ldd	r24, Y+21	; 0x15
    192a:	98 17       	cp	r25, r24
    192c:	08 f0       	brcs	.+2      	; 0x1930 <__vector_16+0x15e>
    192e:	1d a2       	std	Y+37, r1	; 0x25
    1930:	9b a1       	ldd	r25, Y+35	; 0x23
    1932:	8d a1       	ldd	r24, Y+37	; 0x25
    1934:	98 2b       	or	r25, r24
    1936:	9b a3       	std	Y+35, r25	; 0x23
    1938:	9c a1       	ldd	r25, Y+36	; 0x24
    193a:	9d 8b       	std	Y+21, r25	; 0x15
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1940:	89 0f       	add	r24, r25
    1942:	8e 8b       	std	Y+22, r24	; 0x16
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	8e a3       	std	Y+38, r24	; 0x26
    1948:	9e 89       	ldd	r25, Y+22	; 0x16
    194a:	8e 81       	ldd	r24, Y+6	; 0x06
    194c:	98 17       	cp	r25, r24
    194e:	08 f0       	brcs	.+2      	; 0x1952 <__vector_16+0x180>
    1950:	1e a2       	std	Y+38, r1	; 0x26
    1952:	9b a1       	ldd	r25, Y+35	; 0x23
    1954:	8e 89       	ldd	r24, Y+22	; 0x16
    1956:	98 0f       	add	r25, r24
    1958:	9f a3       	std	Y+39, r25	; 0x27
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	98 a7       	std	Y+40, r25	; 0x28
    195e:	8f a1       	ldd	r24, Y+39	; 0x27
    1960:	9e 89       	ldd	r25, Y+22	; 0x16
    1962:	89 17       	cp	r24, r25
    1964:	08 f0       	brcs	.+2      	; 0x1968 <__vector_16+0x196>
    1966:	18 a6       	std	Y+40, r1	; 0x28
    1968:	8e a1       	ldd	r24, Y+38	; 0x26
    196a:	98 a5       	ldd	r25, Y+40	; 0x28
    196c:	89 2b       	or	r24, r25
    196e:	8e a3       	std	Y+38, r24	; 0x26
    1970:	8f a1       	ldd	r24, Y+39	; 0x27
    1972:	8e 8b       	std	Y+22, r24	; 0x16
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	8f 85       	ldd	r24, Y+15	; 0x0f
    1978:	98 0f       	add	r25, r24
    197a:	9f 8b       	std	Y+23, r25	; 0x17
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	99 a7       	std	Y+41, r25	; 0x29
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	89 17       	cp	r24, r25
    1986:	08 f0       	brcs	.+2      	; 0x198a <__vector_16+0x1b8>
    1988:	19 a6       	std	Y+41, r1	; 0x29
    198a:	8e a1       	ldd	r24, Y+38	; 0x26
    198c:	9f 89       	ldd	r25, Y+23	; 0x17
    198e:	89 0f       	add	r24, r25
    1990:	8a a7       	std	Y+42, r24	; 0x2a
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	8b a7       	std	Y+43, r24	; 0x2b
    1996:	9a a5       	ldd	r25, Y+42	; 0x2a
    1998:	8f 89       	ldd	r24, Y+23	; 0x17
    199a:	98 17       	cp	r25, r24
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <__vector_16+0x1ce>
    199e:	1b a6       	std	Y+43, r1	; 0x2b
    19a0:	99 a5       	ldd	r25, Y+41	; 0x29
    19a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a4:	98 2b       	or	r25, r24
    19a6:	99 a7       	std	Y+41, r25	; 0x29
    19a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19aa:	9f 8b       	std	Y+23, r25	; 0x17
    19ac:	88 85       	ldd	r24, Y+8	; 0x08
    19ae:	98 89       	ldd	r25, Y+16	; 0x10
    19b0:	89 0f       	add	r24, r25
    19b2:	88 8f       	std	Y+24, r24	; 0x18
    19b4:	89 a5       	ldd	r24, Y+41	; 0x29
    19b6:	98 8d       	ldd	r25, Y+24	; 0x18
    19b8:	89 0f       	add	r24, r25
    19ba:	88 8f       	std	Y+24, r24	; 0x18
    19bc:	29 89       	ldd	r18, Y+17	; 0x11
    19be:	3a 89       	ldd	r19, Y+18	; 0x12
    19c0:	4b 89       	ldd	r20, Y+19	; 0x13
    19c2:	5c 89       	ldd	r21, Y+20	; 0x14
    19c4:	6d 89       	ldd	r22, Y+21	; 0x15
    19c6:	7e 89       	ldd	r23, Y+22	; 0x16
    19c8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ca:	98 8d       	ldd	r25, Y+24	; 0x18
    19cc:	20 93 2f 01 	sts	0x012F, r18
    19d0:	30 93 30 01 	sts	0x0130, r19
    19d4:	40 93 31 01 	sts	0x0131, r20
    19d8:	50 93 32 01 	sts	0x0132, r21
    19dc:	60 93 33 01 	sts	0x0133, r22
    19e0:	70 93 34 01 	sts	0x0134, r23
    19e4:	80 93 35 01 	sts	0x0135, r24
    19e8:	90 93 36 01 	sts	0x0136, r25
//		}
//	if (czas == 200000)
//		czas = 0;
//		counting = 0;
}
    19ec:	ab 96       	adiw	r28, 0x2b	; 43
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <__vector_13>:

ISR(TIMER1_COMPA_vect) {
    1a10:	1f 92       	push	r1
    1a12:	0f 92       	push	r0
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	0f 92       	push	r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	2f 93       	push	r18
    1a1c:	3f 93       	push	r19
    1a1e:	4f 93       	push	r20
    1a20:	5f 93       	push	r21
    1a22:	6f 93       	push	r22
    1a24:	7f 93       	push	r23
    1a26:	8f 93       	push	r24
    1a28:	9f 93       	push	r25
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	ab 97       	sbiw	r28, 0x2b	; 43
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	cd bf       	out	0x3d, r28	; 61

	if (counting == 1)
    1a38:	80 91 3f 01 	lds	r24, 0x013F
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <__vector_13+0x32>
    1a40:	f4 c0       	rjmp	.+488    	; 0x1c2a <__vector_13+0x21a>
	//		{
				czas++;
    1a42:	80 91 2f 01 	lds	r24, 0x012F
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	90 91 30 01 	lds	r25, 0x0130
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	80 91 31 01 	lds	r24, 0x0131
    1a52:	8b 83       	std	Y+3, r24	; 0x03
    1a54:	90 91 32 01 	lds	r25, 0x0132
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	80 91 33 01 	lds	r24, 0x0133
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	90 91 34 01 	lds	r25, 0x0134
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	80 91 35 01 	lds	r24, 0x0135
    1a6a:	8f 83       	std	Y+7, r24	; 0x07
    1a6c:	90 91 36 01 	lds	r25, 0x0136
    1a70:	98 87       	std	Y+8, r25	; 0x08
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 87       	std	Y+9, r24	; 0x09
    1a76:	1a 86       	std	Y+10, r1	; 0x0a
    1a78:	1b 86       	std	Y+11, r1	; 0x0b
    1a7a:	1c 86       	std	Y+12, r1	; 0x0c
    1a7c:	1d 86       	std	Y+13, r1	; 0x0d
    1a7e:	1e 86       	std	Y+14, r1	; 0x0e
    1a80:	1f 86       	std	Y+15, r1	; 0x0f
    1a82:	18 8a       	std	Y+16, r1	; 0x10
    1a84:	99 81       	ldd	r25, Y+1	; 0x01
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	98 0f       	add	r25, r24
    1a8a:	99 8b       	std	Y+17, r25	; 0x11
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	99 8f       	std	Y+25, r25	; 0x19
    1a90:	89 89       	ldd	r24, Y+17	; 0x11
    1a92:	99 81       	ldd	r25, Y+1	; 0x01
    1a94:	89 17       	cp	r24, r25
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <__vector_13+0x8a>
    1a98:	19 8e       	std	Y+25, r1	; 0x19
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	89 0f       	add	r24, r25
    1aa0:	8a 8b       	std	Y+18, r24	; 0x12
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	8a 8f       	std	Y+26, r24	; 0x1a
    1aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	98 17       	cp	r25, r24
    1aac:	08 f0       	brcs	.+2      	; 0x1ab0 <__vector_13+0xa0>
    1aae:	1a 8e       	std	Y+26, r1	; 0x1a
    1ab0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ab2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ab4:	98 0f       	add	r25, r24
    1ab6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	9c 8f       	std	Y+28, r25	; 0x1c
    1abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1abe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac0:	89 17       	cp	r24, r25
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <__vector_13+0xb6>
    1ac4:	1c 8e       	std	Y+28, r1	; 0x1c
    1ac6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	89 2b       	or	r24, r25
    1acc:	8a 8f       	std	Y+26, r24	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	8a 8b       	std	Y+18, r24	; 0x12
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad6:	98 0f       	add	r25, r24
    1ad8:	9b 8b       	std	Y+19, r25	; 0x13
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9d 8f       	std	Y+29, r25	; 0x1d
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae2:	89 17       	cp	r24, r25
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <__vector_13+0xd8>
    1ae6:	1d 8e       	std	Y+29, r1	; 0x1d
    1ae8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aea:	9b 89       	ldd	r25, Y+19	; 0x13
    1aec:	89 0f       	add	r24, r25
    1aee:	8e 8f       	std	Y+30, r24	; 0x1e
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8f 8f       	std	Y+31, r24	; 0x1f
    1af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	98 17       	cp	r25, r24
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <__vector_13+0xee>
    1afc:	1f 8e       	std	Y+31, r1	; 0x1f
    1afe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b02:	98 2b       	or	r25, r24
    1b04:	9d 8f       	std	Y+29, r25	; 0x1d
    1b06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b08:	9b 8b       	std	Y+19, r25	; 0x13
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b0e:	89 0f       	add	r24, r25
    1b10:	8c 8b       	std	Y+20, r24	; 0x14
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	88 a3       	std	Y+32, r24	; 0x20
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	98 17       	cp	r25, r24
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__vector_13+0x110>
    1b1e:	18 a2       	std	Y+32, r1	; 0x20
    1b20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b22:	8c 89       	ldd	r24, Y+20	; 0x14
    1b24:	98 0f       	add	r25, r24
    1b26:	99 a3       	std	Y+33, r25	; 0x21
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	9a a3       	std	Y+34, r25	; 0x22
    1b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b30:	89 17       	cp	r24, r25
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <__vector_13+0x126>
    1b34:	1a a2       	std	Y+34, r1	; 0x22
    1b36:	88 a1       	ldd	r24, Y+32	; 0x20
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	89 2b       	or	r24, r25
    1b3c:	88 a3       	std	Y+32, r24	; 0x20
    1b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b40:	8c 8b       	std	Y+20, r24	; 0x14
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	98 0f       	add	r25, r24
    1b48:	9d 8b       	std	Y+21, r25	; 0x15
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	9b a3       	std	Y+35, r25	; 0x23
    1b4e:	8d 89       	ldd	r24, Y+21	; 0x15
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	89 17       	cp	r24, r25
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <__vector_13+0x148>
    1b56:	1b a2       	std	Y+35, r1	; 0x23
    1b58:	88 a1       	ldd	r24, Y+32	; 0x20
    1b5a:	9d 89       	ldd	r25, Y+21	; 0x15
    1b5c:	89 0f       	add	r24, r25
    1b5e:	8c a3       	std	Y+36, r24	; 0x24
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	8d a3       	std	Y+37, r24	; 0x25
    1b64:	9c a1       	ldd	r25, Y+36	; 0x24
    1b66:	8d 89       	ldd	r24, Y+21	; 0x15
    1b68:	98 17       	cp	r25, r24
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <__vector_13+0x15e>
    1b6c:	1d a2       	std	Y+37, r1	; 0x25
    1b6e:	9b a1       	ldd	r25, Y+35	; 0x23
    1b70:	8d a1       	ldd	r24, Y+37	; 0x25
    1b72:	98 2b       	or	r25, r24
    1b74:	9b a3       	std	Y+35, r25	; 0x23
    1b76:	9c a1       	ldd	r25, Y+36	; 0x24
    1b78:	9d 8b       	std	Y+21, r25	; 0x15
    1b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7e:	89 0f       	add	r24, r25
    1b80:	8e 8b       	std	Y+22, r24	; 0x16
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	8e a3       	std	Y+38, r24	; 0x26
    1b86:	9e 89       	ldd	r25, Y+22	; 0x16
    1b88:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8a:	98 17       	cp	r25, r24
    1b8c:	08 f0       	brcs	.+2      	; 0x1b90 <__vector_13+0x180>
    1b8e:	1e a2       	std	Y+38, r1	; 0x26
    1b90:	9b a1       	ldd	r25, Y+35	; 0x23
    1b92:	8e 89       	ldd	r24, Y+22	; 0x16
    1b94:	98 0f       	add	r25, r24
    1b96:	9f a3       	std	Y+39, r25	; 0x27
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	98 a7       	std	Y+40, r25	; 0x28
    1b9c:	8f a1       	ldd	r24, Y+39	; 0x27
    1b9e:	9e 89       	ldd	r25, Y+22	; 0x16
    1ba0:	89 17       	cp	r24, r25
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <__vector_13+0x196>
    1ba4:	18 a6       	std	Y+40, r1	; 0x28
    1ba6:	8e a1       	ldd	r24, Y+38	; 0x26
    1ba8:	98 a5       	ldd	r25, Y+40	; 0x28
    1baa:	89 2b       	or	r24, r25
    1bac:	8e a3       	std	Y+38, r24	; 0x26
    1bae:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb0:	8e 8b       	std	Y+22, r24	; 0x16
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb6:	98 0f       	add	r25, r24
    1bb8:	9f 8b       	std	Y+23, r25	; 0x17
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	99 a7       	std	Y+41, r25	; 0x29
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	89 17       	cp	r24, r25
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <__vector_13+0x1b8>
    1bc6:	19 a6       	std	Y+41, r1	; 0x29
    1bc8:	8e a1       	ldd	r24, Y+38	; 0x26
    1bca:	9f 89       	ldd	r25, Y+23	; 0x17
    1bcc:	89 0f       	add	r24, r25
    1bce:	8a a7       	std	Y+42, r24	; 0x2a
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
    1bd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 17       	cp	r25, r24
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <__vector_13+0x1ce>
    1bdc:	1b a6       	std	Y+43, r1	; 0x2b
    1bde:	99 a5       	ldd	r25, Y+41	; 0x29
    1be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be2:	98 2b       	or	r25, r24
    1be4:	99 a7       	std	Y+41, r25	; 0x29
    1be6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be8:	9f 8b       	std	Y+23, r25	; 0x17
    1bea:	88 85       	ldd	r24, Y+8	; 0x08
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	89 0f       	add	r24, r25
    1bf0:	88 8f       	std	Y+24, r24	; 0x18
    1bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf6:	89 0f       	add	r24, r25
    1bf8:	88 8f       	std	Y+24, r24	; 0x18
    1bfa:	29 89       	ldd	r18, Y+17	; 0x11
    1bfc:	3a 89       	ldd	r19, Y+18	; 0x12
    1bfe:	4b 89       	ldd	r20, Y+19	; 0x13
    1c00:	5c 89       	ldd	r21, Y+20	; 0x14
    1c02:	6d 89       	ldd	r22, Y+21	; 0x15
    1c04:	7e 89       	ldd	r23, Y+22	; 0x16
    1c06:	8f 89       	ldd	r24, Y+23	; 0x17
    1c08:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0a:	20 93 2f 01 	sts	0x012F, r18
    1c0e:	30 93 30 01 	sts	0x0130, r19
    1c12:	40 93 31 01 	sts	0x0131, r20
    1c16:	50 93 32 01 	sts	0x0132, r21
    1c1a:	60 93 33 01 	sts	0x0133, r22
    1c1e:	70 93 34 01 	sts	0x0134, r23
    1c22:	80 93 35 01 	sts	0x0135, r24
    1c26:	90 93 36 01 	sts	0x0136, r25
//			czas = czas + 4;
	//		}

}
    1c2a:	ab 96       	adiw	r28, 0x2b	; 43
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	9f 91       	pop	r25
    1c36:	8f 91       	pop	r24
    1c38:	7f 91       	pop	r23
    1c3a:	6f 91       	pop	r22
    1c3c:	5f 91       	pop	r21
    1c3e:	4f 91       	pop	r20
    1c40:	3f 91       	pop	r19
    1c42:	2f 91       	pop	r18
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	0f 90       	pop	r0
    1c4a:	1f 90       	pop	r1
    1c4c:	18 95       	reti

00001c4e <__vector_20>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1c4e:	1f 92       	push	r1
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	8f 93       	push	r24
    1c5a:	9f 93       	push	r25
    1c5c:	ef 93       	push	r30
    1c5e:	ff 93       	push	r31
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <__vector_20+0x18>
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <__vector_20+0x1a>
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    unsigned char lastRxError;

//    LED_3 = 1;

    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    1c6c:	e0 ec       	ldi	r30, 0xC0	; 192
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
    1c74:	e6 ec       	ldi	r30, 0xC6	; 198
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	88 71       	andi	r24, 0x18	; 24
    1c80:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1c82:	80 91 82 01 	lds	r24, 0x0182
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
    1c88:	8f 71       	andi	r24, 0x1F	; 31
    1c8a:	8c 83       	std	Y+4, r24	; 0x04

    if ( tmphead == UART_RxTail ) {
    1c8c:	90 91 83 01 	lds	r25, 0x0183
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	89 17       	cp	r24, r25
    1c94:	19 f4       	brne	.+6      	; 0x1c9c <__vector_20+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	0b c0       	rjmp	.+22     	; 0x1cb2 <__vector_20+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	80 93 82 01 	sts	0x0182, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	fc 01       	movw	r30, r24
    1caa:	e0 5a       	subi	r30, 0xA0	; 160
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	80 93 84 01 	sts	0x0184, r24

//    LED_3 = 0;
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	ff 91       	pop	r31
    1cc6:	ef 91       	pop	r30
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <__vector_21>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
//    LED_4 = 1;

    if ( UART_TxHead != UART_TxTail) {
    1cf6:	90 91 80 01 	lds	r25, 0x0180
    1cfa:	80 91 81 01 	lds	r24, 0x0181
    1cfe:	98 17       	cp	r25, r24
    1d00:	99 f0       	breq	.+38     	; 0x1d28 <__vector_21+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1d02:	80 91 81 01 	lds	r24, 0x0181
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	8f 71       	andi	r24, 0x1F	; 31
    1d0a:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	80 93 81 01 	sts	0x0181, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1d12:	a6 ec       	ldi	r26, 0xC6	; 198
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	e0 5c       	subi	r30, 0xC0	; 192
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	80 81       	ld	r24, Z
    1d24:	8c 93       	st	X, r24
    1d26:	07 c0       	rjmp	.+14     	; 0x1d36 <__vector_21+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1d28:	a1 ec       	ldi	r26, 0xC1	; 193
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e1 ec       	ldi	r30, 0xC1	; 193
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 7d       	andi	r24, 0xDF	; 223
    1d34:	8c 93       	st	X, r24
    }
//    LED_4 = 0;
}
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	ff 91       	pop	r31
    1d3e:	ef 91       	pop	r30
    1d40:	bf 91       	pop	r27
    1d42:	af 91       	pop	r26
    1d44:	9f 91       	pop	r25
    1d46:	8f 91       	pop	r24
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	0f 90       	pop	r0
    1d4e:	1f 90       	pop	r1
    1d50:	18 95       	reti

00001d52 <uart_init>:
//
//#endif
//
//}/* uart_init */
void uart_init(unsigned int baudrate)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <uart_init+0x6>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    1d60:	10 92 80 01 	sts	0x0180, r1
    UART_TxTail = 0;
    1d64:	10 92 81 01 	sts	0x0181, r1
    UART_RxHead = 0;
    1d68:	10 92 82 01 	sts	0x0182, r1
    UART_RxTail = 0;
    1d6c:	10 92 83 01 	sts	0x0183, r1
    UART_CmdLength = -1;
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	80 93 85 01 	sts	0x0185, r24
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    UBRR0H = (unsigned char)(baudrate>>8);
    1d76:	e5 ec       	ldi	r30, 0xC5	; 197
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	89 2f       	mov	r24, r25
    1d80:	99 27       	eor	r25, r25
    1d82:	80 83       	st	Z, r24
    UBRR0L = (unsigned char) baudrate;
    1d84:	e4 ec       	ldi	r30, 0xC4	; 196
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	80 83       	st	Z, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    1d8c:	e1 ec       	ldi	r30, 0xC1	; 193
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	88 e9       	ldi	r24, 0x98	; 152
    1d92:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    1d94:	e2 ec       	ldi	r30, 0xC2	; 194
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	86 e0       	ldi	r24, 0x06	; 6
    1d9a:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <uart_getc+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <uart_getc+0x8>
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1db2:	90 91 82 01 	lds	r25, 0x0182
    1db6:	80 91 83 01 	lds	r24, 0x0183
    1dba:	98 17       	cp	r25, r24
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	9c 83       	std	Y+4, r25	; 0x04
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	1d c0       	rjmp	.+58     	; 0x1e02 <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1dc8:	80 91 83 01 	lds	r24, 0x0183
    1dcc:	8f 5f       	subi	r24, 0xFF	; 255
    1dce:	8f 71       	andi	r24, 0x1F	; 31
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 93 83 01 	sts	0x0183, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	fc 01       	movw	r30, r24
    1de0:	e0 5a       	subi	r30, 0xA0	; 160
    1de2:	fe 4f       	sbci	r31, 0xFE	; 254
    1de4:	80 81       	ld	r24, Z
    1de6:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
    1de8:	80 91 84 01 	lds	r24, 0x0184
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	38 2f       	mov	r19, r24
    1df2:	22 27       	eor	r18, r18
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	82 0f       	add	r24, r18
    1dfc:	93 1f       	adc	r25, r19
    1dfe:	9c 83       	std	Y+4, r25	; 0x04
    1e00:	8b 83       	std	Y+3, r24	; 0x03
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <UART_peekc>:


unsigned char UART_peekc(unsigned char index)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <UART_peekc+0x6>
    1e1a:	0f 92       	push	r0
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char tmptail;
    unsigned char data;

    /* calculate /store buffer index */
    tmptail = (UART_RxTail + index) & UART_RX_BUFFER_MASK;
    1e22:	90 91 83 01 	lds	r25, 0x0183
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	89 0f       	add	r24, r25
    1e2a:	8f 71       	andi	r24, 0x1F	; 31
    1e2c:	8a 83       	std	Y+2, r24	; 0x02

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	fc 01       	movw	r30, r24
    1e36:	e0 5a       	subi	r30, 0xA0	; 160
    1e38:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3a:	80 81       	ld	r24, Z
    1e3c:	89 83       	std	Y+1, r24	; 0x01

    return data;
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <uart_putc+0x6>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1e58:	80 91 80 01 	lds	r24, 0x0180
    1e5c:	8f 5f       	subi	r24, 0xFF	; 255
    1e5e:	8f 71       	andi	r24, 0x1F	; 31
    1e60:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
    1e62:	90 91 81 01 	lds	r25, 0x0181
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	89 17       	cp	r24, r25
    1e6a:	d9 f3       	breq	.-10     	; 0x1e62 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	fc 01       	movw	r30, r24
    1e74:	e0 5c       	subi	r30, 0xC0	; 192
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	80 93 80 01 	sts	0x0180, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1e82:	a1 ec       	ldi	r26, 0xC1	; 193
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e1 ec       	ldi	r30, 0xC1	; 193
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 62       	ori	r24, 0x20	; 32
    1e8e:	8c 93       	st	X, r24

}/* uart_putc */
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <uart_puts+0x6>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	0b c0       	rjmp	.+22     	; 0x1ec0 <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
    1eae:	20 81       	ld	r18, Z
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	82 2f       	mov	r24, r18
    1ebc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	81 f7       	brne	.-32     	; 0x1eaa <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <uart_puts_p+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <uart_puts_p+0x8>
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <uart_puts_p+0xa>
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	9d 83       	std	Y+5, r25	; 0x05
    1ee4:	8c 83       	std	Y+4, r24	; 0x04
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
    1ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eea:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	9b 83       	std	Y+3, r25	; 0x03
    1ef4:	8a 83       	std	Y+2, r24	; 0x02
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	9d 83       	std	Y+5, r25	; 0x05
    1efe:	8c 83       	std	Y+4, r24	; 0x04
    1f00:	ea 81       	ldd	r30, Y+2	; 0x02
    1f02:	fb 81       	ldd	r31, Y+3	; 0x03
    1f04:	84 91       	lpm	r24, Z+
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	8e 83       	std	Y+6, r24	; 0x06
    1f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0e:	88 23       	and	r24, r24
    1f10:	59 f7       	brne	.-42     	; 0x1ee8 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    1f12:	26 96       	adiw	r28, 0x06	; 6
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <uart_puti>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puti( const int val )
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	63 97       	sbiw	r28, 0x13	; 19
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	9b 8b       	std	Y+19, r25	; 0x13
    1f3a:	8a 8b       	std	Y+18, r24	; 0x12
    char buffer[sizeof(int)*8+1];
    
    uart_puts( itoa(val, buffer, 10) );
    1f3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f3e:	9b 89       	ldd	r25, Y+19	; 0x13
    1f40:	9e 01       	movw	r18, r28
    1f42:	2f 5f       	subi	r18, 0xFF	; 255
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	b9 01       	movw	r22, r18
    1f48:	4a e0       	ldi	r20, 0x0A	; 10
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	0e 94 34 1a 	call	0x3468	; 0x3468 <itoa>
    1f50:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <uart_puts>

}/* uart_puti */
    1f54:	63 96       	adiw	r28, 0x13	; 19
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <uart_puthex_nibble>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <uart_puthex_nibble+0x6>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char  c = b & 0x0f;
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	8f 70       	andi	r24, 0x0F	; 15
    1f76:	89 83       	std	Y+1, r24	; 0x01
    if (c>9) c += 'A'-10;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	8a 30       	cpi	r24, 0x0A	; 10
    1f7c:	20 f0       	brcs	.+8      	; 0x1f86 <uart_puthex_nibble+0x20>
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	89 5c       	subi	r24, 0xC9	; 201
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <uart_puthex_nibble+0x26>
    else c += '0';
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	80 5d       	subi	r24, 0xD0	; 208
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    uart_putc(c);
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
} /* uart_puthex_nibble */
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <uart_puthex_byte>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    uart_puthex_nibble(b>>4);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	82 95       	swap	r24
    1fac:	8f 70       	andi	r24, 0x0F	; 15
    1fae:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <uart_puthex_nibble>
    uart_puthex_nibble(b);
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <uart_puthex_nibble>
} /* uart_puthex_byte */
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <UART_nextline>:

/* Next Line */
void UART_nextline(void)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	uart_putc(0x0A); //next line
    1fc8:	8a e0       	ldi	r24, 0x0A	; 10
    1fca:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	uart_putc(0x0D); //carriage return
    1fce:	8d e0       	ldi	r24, 0x0D	; 13
    1fd0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
}
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <UART_startline>:

/* Start of Line */
void UART_startline(void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
	uart_putc(0x0D); //carriage return
    1fe2:	8d e0       	ldi	r24, 0x0D	; 13
    1fe4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <UART_backspace>:

/* Backspace */
void UART_backspace(uint8_t nBytes)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <UART_backspace+0x6>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	89 83       	std	Y+1, r24	; 0x01
register uint8_t i;

	for(i=0; i<nBytes; i++)
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <UART_backspace+0x1c>
	{
		uart_putc(0x08); //backspace
    1ffe:	88 e0       	ldi	r24, 0x08	; 8
    2000:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
/* Backspace */
void UART_backspace(uint8_t nBytes)
{
register uint8_t i;

	for(i=0; i<nBytes; i++)
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	8a 83       	std	Y+2, r24	; 0x02
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	98 17       	cp	r25, r24
    2010:	b0 f3       	brcs	.-20     	; 0x1ffe <UART_backspace+0x10>
	{
		uart_putc(0x08); //backspace
	}
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <UART_space>:

/* Space */
void UART_space(uint8_t nBytes)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <UART_space+0x6>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
register uint8_t i;

	for(i=0; i<nBytes; i++)
    2028:	1a 82       	std	Y+2, r1	; 0x02
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <UART_space+0x1c>
	{
		uart_putc(0x20); //space
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
/* Space */
void UART_space(uint8_t nBytes)
{
register uint8_t i;

	for(i=0; i<nBytes; i++)
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	8a 83       	std	Y+2, r24	; 0x02
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	98 17       	cp	r25, r24
    203e:	b0 f3       	brcs	.-20     	; 0x202c <UART_space+0x10>
	{
		uart_putc(0x20); //space
	}
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <UART_clearscreen>:

/* Clearscreen */
void UART_clearscreen()
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62

	uart_putc(0x0C); //clearscreen
    2052:	8c e0       	ldi	r24, 0x0C	; 12
    2054:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>

}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <UART_CmdCheck_p>:


char UART_CmdCheck_p(const char *s, char cmdLength) {
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	2c 97       	sbiw	r28, 0x0c	; 12
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	9a 87       	std	Y+10, r25	; 0x0a
    2074:	89 87       	std	Y+9, r24	; 0x09
    2076:	6b 87       	std	Y+11, r22	; 0x0b
	unsigned char tmp_s, tmp_cmd;
	if(cmdLength != UART_CmdLength) return 0;
    2078:	8b 85       	ldd	r24, Y+11	; 0x0b
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	80 91 85 01 	lds	r24, 0x0185
    2082:	99 27       	eor	r25, r25
    2084:	87 fd       	sbrc	r24, 7
    2086:	90 95       	com	r25
    2088:	28 17       	cp	r18, r24
    208a:	39 07       	cpc	r19, r25
    208c:	11 f0       	breq	.+4      	; 0x2092 <UART_CmdCheck_p+0x34>
    208e:	1c 86       	std	Y+12, r1	; 0x0c
    2090:	31 c0       	rjmp	.+98     	; 0x20f4 <UART_CmdCheck_p+0x96>
	for(int i=0; i<UART_CmdLength; ++i) {
    2092:	1e 82       	std	Y+6, r1	; 0x06
    2094:	1d 82       	std	Y+5, r1	; 0x05
    2096:	21 c0       	rjmp	.+66     	; 0x20da <UART_CmdCheck_p+0x7c>
		unsigned char tmp_s = pgm_read_byte(s);
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	9b 83       	std	Y+3, r25	; 0x03
    209e:	8a 83       	std	Y+2, r24	; 0x02
    20a0:	ea 81       	ldd	r30, Y+2	; 0x02
    20a2:	fb 81       	ldd	r31, Y+3	; 0x03
    20a4:	84 91       	lpm	r24, Z+
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	8c 83       	std	Y+4, r24	; 0x04

		if ((tmp_s != UART_peekc(i+1)) && (tmp_s != '*')) return 0;
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <UART_peekc>
    20b4:	98 2f       	mov	r25, r24
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	98 17       	cp	r25, r24
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <UART_CmdCheck_p+0x68>
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	8a 32       	cpi	r24, 0x2A	; 42
    20c0:	11 f0       	breq	.+4      	; 0x20c6 <UART_CmdCheck_p+0x68>
    20c2:	1c 86       	std	Y+12, r1	; 0x0c
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <UART_CmdCheck_p+0x96>
		s++;
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	9a 87       	std	Y+10, r25	; 0x0a
    20ce:	89 87       	std	Y+9, r24	; 0x09


char UART_CmdCheck_p(const char *s, char cmdLength) {
	unsigned char tmp_s, tmp_cmd;
	if(cmdLength != UART_CmdLength) return 0;
	for(int i=0; i<UART_CmdLength; ++i) {
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	80 91 85 01 	lds	r24, 0x0185
    20de:	28 2f       	mov	r18, r24
    20e0:	33 27       	eor	r19, r19
    20e2:	27 fd       	sbrc	r18, 7
    20e4:	30 95       	com	r19
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	82 17       	cp	r24, r18
    20ec:	93 07       	cpc	r25, r19
    20ee:	a4 f2       	brlt	.-88     	; 0x2098 <UART_CmdCheck_p+0x3a>
		unsigned char tmp_s = pgm_read_byte(s);

		if ((tmp_s != UART_peekc(i+1)) && (tmp_s != '*')) return 0;
		s++;
	}
	return 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	8c 87       	std	Y+12, r24	; 0x0c
    20f4:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    20f6:	2c 96       	adiw	r28, 0x0c	; 12
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <UART_ExecuteCmd>:

void UART_ExecuteCmd(){
    2108:	1f 93       	push	r17
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <UART_ExecuteCmd+0x8>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <UART_ExecuteCmd+0xa>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62

	if(UART_CmdCheck_p(PSTR("led*"), 4))
    2116:	89 eb       	ldi	r24, 0xB9	; 185
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	64 e0       	ldi	r22, 0x04	; 4
    211c:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
    2120:	88 23       	and	r24, r24
    2122:	09 f4       	brne	.+2      	; 0x2126 <UART_ExecuteCmd+0x1e>
    2124:	72 c0       	rjmp	.+228    	; 0x220a <UART_ExecuteCmd+0x102>
		switch (UART_peekc(4)) {
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <UART_peekc>
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	3c 83       	std	Y+4, r19	; 0x04
    2132:	2b 83       	std	Y+3, r18	; 0x03
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	82 33       	cpi	r24, 0x32	; 50
    213a:	91 05       	cpc	r25, r1
    213c:	39 f1       	breq	.+78     	; 0x218c <UART_ExecuteCmd+0x84>
    213e:	eb 81       	ldd	r30, Y+3	; 0x03
    2140:	fc 81       	ldd	r31, Y+4	; 0x04
    2142:	e3 33       	cpi	r30, 0x33	; 51
    2144:	f1 05       	cpc	r31, r1
    2146:	34 f4       	brge	.+12     	; 0x2154 <UART_ExecuteCmd+0x4c>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	21 33       	cpi	r18, 0x31	; 49
    214e:	31 05       	cpc	r19, r1
    2150:	61 f0       	breq	.+24     	; 0x216a <UART_ExecuteCmd+0x62>
    2152:	e9 c0       	rjmp	.+466    	; 0x2326 <UART_ExecuteCmd+0x21e>
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	83 33       	cpi	r24, 0x33	; 51
    215a:	91 05       	cpc	r25, r1
    215c:	51 f1       	breq	.+84     	; 0x21b2 <UART_ExecuteCmd+0xaa>
    215e:	eb 81       	ldd	r30, Y+3	; 0x03
    2160:	fc 81       	ldd	r31, Y+4	; 0x04
    2162:	e4 33       	cpi	r30, 0x34	; 52
    2164:	f1 05       	cpc	r31, r1
    2166:	d1 f1       	breq	.+116    	; 0x21dc <UART_ExecuteCmd+0xd4>
    2168:	de c0       	rjmp	.+444    	; 0x2326 <UART_ExecuteCmd+0x21e>
		case '1':
			LED_1 ^= 1;
    216a:	ab e2       	ldi	r26, 0x2B	; 43
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb e2       	ldi	r30, 0x2B	; 43
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	81 70       	andi	r24, 0x01	; 1
    2176:	98 2f       	mov	r25, r24
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	89 27       	eor	r24, r25
    217c:	81 70       	andi	r24, 0x01	; 1
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	8c 91       	ld	r24, X
    2184:	8e 7f       	andi	r24, 0xFE	; 254
    2186:	89 2b       	or	r24, r25
    2188:	8c 93       	st	X, r24
    218a:	cd c0       	rjmp	.+410    	; 0x2326 <UART_ExecuteCmd+0x21e>
			break;
		case '2':
			LED_2 ^= 1;
    218c:	ab e2       	ldi	r26, 0x2B	; 43
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	eb e2       	ldi	r30, 0x2B	; 43
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	86 95       	lsr	r24
    2198:	81 70       	andi	r24, 0x01	; 1
    219a:	98 2f       	mov	r25, r24
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	89 27       	eor	r24, r25
    21a0:	81 70       	andi	r24, 0x01	; 1
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	98 2f       	mov	r25, r24
    21a6:	99 0f       	add	r25, r25
    21a8:	8c 91       	ld	r24, X
    21aa:	8d 7f       	andi	r24, 0xFD	; 253
    21ac:	89 2b       	or	r24, r25
    21ae:	8c 93       	st	X, r24
    21b0:	ba c0       	rjmp	.+372    	; 0x2326 <UART_ExecuteCmd+0x21e>
			break;
		case '3':
			LED_3 ^= 1;
    21b2:	ab e2       	ldi	r26, 0x2B	; 43
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	eb e2       	ldi	r30, 0x2B	; 43
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	86 95       	lsr	r24
    21be:	86 95       	lsr	r24
    21c0:	81 70       	andi	r24, 0x01	; 1
    21c2:	98 2f       	mov	r25, r24
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	89 27       	eor	r24, r25
    21c8:	81 70       	andi	r24, 0x01	; 1
    21ca:	81 70       	andi	r24, 0x01	; 1
    21cc:	98 2f       	mov	r25, r24
    21ce:	99 0f       	add	r25, r25
    21d0:	99 0f       	add	r25, r25
    21d2:	8c 91       	ld	r24, X
    21d4:	8b 7f       	andi	r24, 0xFB	; 251
    21d6:	89 2b       	or	r24, r25
    21d8:	8c 93       	st	X, r24
    21da:	a5 c0       	rjmp	.+330    	; 0x2326 <UART_ExecuteCmd+0x21e>
			break;
		case '4':
			LED_4 ^= 1;
    21dc:	ab e2       	ldi	r26, 0x2B	; 43
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	eb e2       	ldi	r30, 0x2B	; 43
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	86 95       	lsr	r24
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	81 70       	andi	r24, 0x01	; 1
    21ee:	98 2f       	mov	r25, r24
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	89 27       	eor	r24, r25
    21f4:	81 70       	andi	r24, 0x01	; 1
    21f6:	81 70       	andi	r24, 0x01	; 1
    21f8:	98 2f       	mov	r25, r24
    21fa:	99 0f       	add	r25, r25
    21fc:	99 0f       	add	r25, r25
    21fe:	99 0f       	add	r25, r25
    2200:	8c 91       	ld	r24, X
    2202:	87 7f       	andi	r24, 0xF7	; 247
    2204:	89 2b       	or	r24, r25
    2206:	8c 93       	st	X, r24
    2208:	8e c0       	rjmp	.+284    	; 0x2326 <UART_ExecuteCmd+0x21e>
			break;
		default:
			break;
		}

	else if(UART_CmdCheck_p(PSTR("ledOff"), 6))
    220a:	82 eb       	ldi	r24, 0xB2	; 178
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	66 e0       	ldi	r22, 0x06	; 6
    2210:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
    2214:	88 23       	and	r24, r24
    2216:	91 f1       	breq	.+100    	; 0x227c <UART_ExecuteCmd+0x174>
		LED_1 = LED_2 = LED_3 = LED_4 = 0;
    2218:	4b e2       	ldi	r20, 0x2B	; 43
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	2b e2       	ldi	r18, 0x2B	; 43
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	ab e2       	ldi	r26, 0x2B	; 43
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	eb e2       	ldi	r30, 0x2B	; 43
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	87 7f       	andi	r24, 0xF7	; 247
    222c:	80 83       	st	Z, r24
    222e:	80 81       	ld	r24, Z
    2230:	86 95       	lsr	r24
    2232:	86 95       	lsr	r24
    2234:	86 95       	lsr	r24
    2236:	81 70       	andi	r24, 0x01	; 1
    2238:	81 70       	andi	r24, 0x01	; 1
    223a:	98 2f       	mov	r25, r24
    223c:	99 0f       	add	r25, r25
    223e:	99 0f       	add	r25, r25
    2240:	8c 91       	ld	r24, X
    2242:	8b 7f       	andi	r24, 0xFB	; 251
    2244:	89 2b       	or	r24, r25
    2246:	8c 93       	st	X, r24
    2248:	8c 91       	ld	r24, X
    224a:	86 95       	lsr	r24
    224c:	86 95       	lsr	r24
    224e:	81 70       	andi	r24, 0x01	; 1
    2250:	81 70       	andi	r24, 0x01	; 1
    2252:	98 2f       	mov	r25, r24
    2254:	99 0f       	add	r25, r25
    2256:	f9 01       	movw	r30, r18
    2258:	80 81       	ld	r24, Z
    225a:	8d 7f       	andi	r24, 0xFD	; 253
    225c:	89 2b       	or	r24, r25
    225e:	f9 01       	movw	r30, r18
    2260:	80 83       	st	Z, r24
    2262:	f9 01       	movw	r30, r18
    2264:	80 81       	ld	r24, Z
    2266:	86 95       	lsr	r24
    2268:	81 70       	andi	r24, 0x01	; 1
    226a:	98 2f       	mov	r25, r24
    226c:	91 70       	andi	r25, 0x01	; 1
    226e:	fa 01       	movw	r30, r20
    2270:	80 81       	ld	r24, Z
    2272:	8e 7f       	andi	r24, 0xFE	; 254
    2274:	89 2b       	or	r24, r25
    2276:	fa 01       	movw	r30, r20
    2278:	80 83       	st	Z, r24
    227a:	55 c0       	rjmp	.+170    	; 0x2326 <UART_ExecuteCmd+0x21e>

	else if(UART_CmdCheck_p(PSTR("lcdClear"), 8)){
    227c:	89 ea       	ldi	r24, 0xA9	; 169
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	68 e0       	ldi	r22, 0x08	; 8
    2282:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
    2286:	88 23       	and	r24, r24
    2288:	09 f0       	breq	.+2      	; 0x228c <UART_ExecuteCmd+0x184>
    228a:	4d c0       	rjmp	.+154    	; 0x2326 <UART_ExecuteCmd+0x21e>
//		lcd_cls();
//		lcd_xy(0,0);
	}

	else if(UART_CmdCheck_p(PSTR("lcdX**Y*"), 8)){
    228c:	80 ea       	ldi	r24, 0xA0	; 160
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	68 e0       	ldi	r22, 0x08	; 8
    2292:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
    2296:	88 23       	and	r24, r24
    2298:	99 f1       	breq	.+102    	; 0x2300 <UART_ExecuteCmd+0x1f8>
		char tmpX, tmpY;
		tmpY = ((UART_peekc(8)-'0'+1) & 1) + 1;
    229a:	88 e0       	ldi	r24, 0x08	; 8
    229c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <UART_peekc>
    22a0:	8f 52       	subi	r24, 0x2F	; 47
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	89 83       	std	Y+1, r24	; 0x01
		tmpX = (UART_peekc(5)-'0')*10+ UART_peekc(6)-'0';
    22a8:	85 e0       	ldi	r24, 0x05	; 5
    22aa:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <UART_peekc>
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c 01       	movw	r18, r24
    22b4:	22 0f       	add	r18, r18
    22b6:	33 1f       	adc	r19, r19
    22b8:	c9 01       	movw	r24, r18
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	18 2f       	mov	r17, r24
    22c8:	86 e0       	ldi	r24, 0x06	; 6
    22ca:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <UART_peekc>
    22ce:	81 0f       	add	r24, r17
    22d0:	80 51       	subi	r24, 0x10	; 16
    22d2:	8a 83       	std	Y+2, r24	; 0x02
//		lcd_xy(tmpX-1,tmpY);
		uart_puts("lcdXY(");
    22d4:	87 e1       	ldi	r24, 0x17	; 23
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <uart_puts>
		uart_puti(tmpX);
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <uart_puti>
		uart_putc(',');
    22e6:	8c e2       	ldi	r24, 0x2C	; 44
    22e8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
		uart_puti(tmpY);
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <uart_puti>
		uart_puts(")\n");
    22f6:	8e e1       	ldi	r24, 0x1E	; 30
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <uart_puts>
    22fe:	13 c0       	rjmp	.+38     	; 0x2326 <UART_ExecuteCmd+0x21e>
	}

	else if(UART_CmdCheck_p(PSTR("lcdDraw****"),11));
    2300:	84 e9       	ldi	r24, 0x94	; 148
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	6b e0       	ldi	r22, 0x0B	; 11
    2306:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
    230a:	88 23       	and	r24, r24
    230c:	61 f4       	brne	.+24     	; 0x2326 <UART_ExecuteCmd+0x21e>
//		for(int i=0; i<4; ++i) lcd_putchar(UART_peekc(8+i));

	else if(UART_CmdCheck_p(PSTR("lcdDraw"), 7))
    230e:	8c e8       	ldi	r24, 0x8C	; 140
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	67 e0       	ldi	r22, 0x07	; 7
    2314:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
    2318:	88 23       	and	r24, r24
    231a:	29 f4       	brne	.+10     	; 0x2326 <UART_ExecuteCmd+0x21e>
			;

	else if(UART_CmdCheck_p(PSTR("setRTC **:**:**"), 15)){
    231c:	8c e7       	ldi	r24, 0x7C	; 124
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	6f e0       	ldi	r22, 0x0F	; 15
    2322:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_CmdCheck_p>
//			PCF8583_set_time((UART_peekc(8)-'0')*10 + UART_peekc(9)-'0',
//					         (UART_peekc(11)-'0')*10 + UART_peekc(12)-'0',
//					         (UART_peekc(14)-'0')*10 + UART_peekc(15)-'0', 0);
	}
}
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	1f 91       	pop	r17
    2334:	08 95       	ret

00002336 <UART_getCmdLength>:
char buffer3[6];
char buffer4[5];
char buffer5[11];
int bufi;

signed char UART_getCmdLength(void){
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
	return UART_CmdLength;
    233e:	80 91 85 01 	lds	r24, 0x0185
}
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <uart_gets>:

char* uart_gets(int ile)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	29 97       	sbiw	r28, 0x09	; 9
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	9d 83       	std	Y+5, r25	; 0x05
    235e:	8c 83       	std	Y+4, r24	; 0x04

	char buf;
	uint8_t i = 0;
    2360:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t j = 0;
    2362:	19 82       	std	Y+1, r1	; 0x01

	if(ile == 2)
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	9d 81       	ldd	r25, Y+5	; 0x05
    2368:	82 30       	cpi	r24, 0x02	; 2
    236a:	91 05       	cpc	r25, r1
    236c:	49 f5       	brne	.+82     	; 0x23c0 <uart_gets+0x78>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <uart_gets+0x50>
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
		{
			buf = uart_getc();
    2370:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    2374:	8b 83       	std	Y+3, r24	; 0x03
			if(buf > 31)
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	80 32       	cpi	r24, 0x20	; 32
    237a:	58 f0       	brcs	.+22     	; 0x2392 <uart_gets+0x4a>
			{
			buffer2[j] = buf;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	fc 01       	movw	r30, r24
    2384:	e7 57       	subi	r30, 0x77	; 119
    2386:	fe 4f       	sbci	r31, 0xFE	; 254
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	80 83       	st	Z, r24
			j++;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
	uint8_t j = 0;

	if(ile == 2)
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	82 17       	cp	r24, r18
    23a4:	93 07       	cpc	r25, r19
    23a6:	24 f7       	brge	.-56     	; 0x2370 <uart_gets+0x28>
			i++;


		}
//		uart_getc();
		buffer2[j] = 0;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	fc 01       	movw	r30, r24
    23b0:	e7 57       	subi	r30, 0x77	; 119
    23b2:	fe 4f       	sbci	r31, 0xFE	; 254
    23b4:	10 82       	st	Z, r1
		return buffer2;
    23b6:	89 e8       	ldi	r24, 0x89	; 137
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	9f 83       	std	Y+7, r25	; 0x07
    23bc:	8e 83       	std	Y+6, r24	; 0x06
    23be:	b9 c0       	rjmp	.+370    	; 0x2532 <uart_gets+0x1ea>
	}
	else if (ile == 6)
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	86 30       	cpi	r24, 0x06	; 6
    23c6:	91 05       	cpc	r25, r1
    23c8:	49 f5       	brne	.+82     	; 0x241c <uart_gets+0xd4>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <uart_gets+0xac>
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
		{
			buf = uart_getc();
    23cc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    23d0:	8b 83       	std	Y+3, r24	; 0x03
			if(buf > 31)
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	80 32       	cpi	r24, 0x20	; 32
    23d6:	58 f0       	brcs	.+22     	; 0x23ee <uart_gets+0xa6>
			{
			buffer[j] = buf;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	fc 01       	movw	r30, r24
    23e0:	e4 57       	subi	r30, 0x74	; 116
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	80 83       	st	Z, r24
			j++;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	8a 83       	std	Y+2, r24	; 0x02
		buffer2[j] = 0;
		return buffer2;
	}
	else if (ile == 6)
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	82 17       	cp	r24, r18
    2400:	93 07       	cpc	r25, r19
    2402:	24 f7       	brge	.-56     	; 0x23cc <uart_gets+0x84>
			i++;


		}
//		uart_getc();
		buffer[j] = 0;
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	fc 01       	movw	r30, r24
    240c:	e4 57       	subi	r30, 0x74	; 116
    240e:	fe 4f       	sbci	r31, 0xFE	; 254
    2410:	10 82       	st	Z, r1
		return buffer;
    2412:	8c e8       	ldi	r24, 0x8C	; 140
    2414:	91 e0       	ldi	r25, 0x01	; 1
    2416:	9f 83       	std	Y+7, r25	; 0x07
    2418:	8e 83       	std	Y+6, r24	; 0x06
    241a:	8b c0       	rjmp	.+278    	; 0x2532 <uart_gets+0x1ea>
	}else if (ile == 4)
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	9d 81       	ldd	r25, Y+5	; 0x05
    2420:	84 30       	cpi	r24, 0x04	; 4
    2422:	91 05       	cpc	r25, r1
    2424:	49 f5       	brne	.+82     	; 0x2478 <uart_gets+0x130>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <uart_gets+0x108>
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
		{
			buf = uart_getc();
    2428:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    242c:	8b 83       	std	Y+3, r24	; 0x03
			if(buf > 31)
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	80 32       	cpi	r24, 0x20	; 32
    2432:	58 f0       	brcs	.+22     	; 0x244a <uart_gets+0x102>
			{
			buffer4[j] = buf;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	fc 01       	movw	r30, r24
    243c:	e2 56       	subi	r30, 0x62	; 98
    243e:	fe 4f       	sbci	r31, 0xFE	; 254
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	80 83       	st	Z, r24
			j++;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	8a 83       	std	Y+2, r24	; 0x02
//		uart_getc();
		buffer[j] = 0;
		return buffer;
	}else if (ile == 4)
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	9d 81       	ldd	r25, Y+5	; 0x05
    245a:	82 17       	cp	r24, r18
    245c:	93 07       	cpc	r25, r19
    245e:	24 f7       	brge	.-56     	; 0x2428 <uart_gets+0xe0>
			i++;


		}
//		uart_getc();
		buffer4[j] = 0;
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	fc 01       	movw	r30, r24
    2468:	e2 56       	subi	r30, 0x62	; 98
    246a:	fe 4f       	sbci	r31, 0xFE	; 254
    246c:	10 82       	st	Z, r1
		return buffer4;
    246e:	8e e9       	ldi	r24, 0x9E	; 158
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	9f 83       	std	Y+7, r25	; 0x07
    2474:	8e 83       	std	Y+6, r24	; 0x06
    2476:	5d c0       	rjmp	.+186    	; 0x2532 <uart_gets+0x1ea>
	}else if(ile == 5)
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	85 30       	cpi	r24, 0x05	; 5
    247e:	91 05       	cpc	r25, r1
    2480:	49 f5       	brne	.+82     	; 0x24d4 <uart_gets+0x18c>
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <uart_gets+0x164>
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
		{
			buf = uart_getc();
    2484:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    2488:	8b 83       	std	Y+3, r24	; 0x03
			if(buf > 31)
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	80 32       	cpi	r24, 0x20	; 32
    248e:	58 f0       	brcs	.+22     	; 0x24a6 <uart_gets+0x15e>
			{
			buffer3[j] = buf;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	fc 01       	movw	r30, r24
    2498:	ed 55       	subi	r30, 0x5D	; 93
    249a:	fe 4f       	sbci	r31, 0xFE	; 254
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	80 83       	st	Z, r24
			j++;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	8a 83       	std	Y+2, r24	; 0x02
//		uart_getc();
		buffer4[j] = 0;
		return buffer4;
	}else if(ile == 5)
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	82 17       	cp	r24, r18
    24b8:	93 07       	cpc	r25, r19
    24ba:	24 f7       	brge	.-56     	; 0x2484 <uart_gets+0x13c>
			i++;


		}
//		uart_getc();
		buffer3[j] = 0;
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	fc 01       	movw	r30, r24
    24c4:	ed 55       	subi	r30, 0x5D	; 93
    24c6:	fe 4f       	sbci	r31, 0xFE	; 254
    24c8:	10 82       	st	Z, r1
		return buffer3;
    24ca:	83 ea       	ldi	r24, 0xA3	; 163
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	9f 83       	std	Y+7, r25	; 0x07
    24d0:	8e 83       	std	Y+6, r24	; 0x06
    24d2:	2f c0       	rjmp	.+94     	; 0x2532 <uart_gets+0x1ea>
	}else if (ile == 10)
    24d4:	8c 81       	ldd	r24, Y+4	; 0x04
    24d6:	9d 81       	ldd	r25, Y+5	; 0x05
    24d8:	8a 30       	cpi	r24, 0x0A	; 10
    24da:	91 05       	cpc	r25, r1
    24dc:	49 f5       	brne	.+82     	; 0x2530 <uart_gets+0x1e8>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <uart_gets+0x1c0>
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
		{
			buf = uart_getc();
    24e0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    24e4:	8b 83       	std	Y+3, r24	; 0x03
			if(buf > 31)
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	80 32       	cpi	r24, 0x20	; 32
    24ea:	58 f0       	brcs	.+22     	; 0x2502 <uart_gets+0x1ba>
			{
			buffer5[j] = buf;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	fc 01       	movw	r30, r24
    24f4:	ed 56       	subi	r30, 0x6D	; 109
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	80 83       	st	Z, r24
			j++;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	8a 83       	std	Y+2, r24	; 0x02
//		uart_getc();
		buffer3[j] = 0;
		return buffer3;
	}else if (ile == 10)
	{
		while(i <= ile /*(buf = uart_getc()) > 31*/)
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	82 17       	cp	r24, r18
    2514:	93 07       	cpc	r25, r19
    2516:	24 f7       	brge	.-56     	; 0x24e0 <uart_gets+0x198>
			i++;


		}
//		uart_getc();
		buffer5[j] = 0;
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	ed 56       	subi	r30, 0x6D	; 109
    2522:	fe 4f       	sbci	r31, 0xFE	; 254
    2524:	10 82       	st	Z, r1
		return buffer5;
    2526:	83 e9       	ldi	r24, 0x93	; 147
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	9f 83       	std	Y+7, r25	; 0x07
    252c:	8e 83       	std	Y+6, r24	; 0x06
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <uart_gets+0x1ea>
    2530:	04 c0       	rjmp	.+8      	; 0x253a <uart_gets+0x1f2>
//	}
//	}
////	}while(buf > 31);
//	uart_getc();
//	return buffer;
}
    2532:	8e 81       	ldd	r24, Y+6	; 0x06
    2534:	9f 81       	ldd	r25, Y+7	; 0x07
    2536:	99 87       	std	Y+9, r25	; 0x09
    2538:	88 87       	std	Y+8, r24	; 0x08
    253a:	88 85       	ldd	r24, Y+8	; 0x08
    253c:	99 85       	ldd	r25, Y+9	; 0x09
    253e:	29 96       	adiw	r28, 0x09	; 9
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <UART_sendi>:

void UART_sendi( const int buf)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	2e 97       	sbiw	r28, 0x0e	; 14
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	9e 87       	std	Y+14, r25	; 0x0e
    2566:	8d 87       	std	Y+13, r24	; 0x0d
	char buffer[12];
	uart_putc('i');
    2568:	89 e6       	ldi	r24, 0x69	; 105
    256a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	uart_putc(strlen(buffer));
    256e:	ce 01       	movw	r24, r28
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	0e 94 2b 1a 	call	0x3456	; 0x3456 <strlen>
    2576:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	itoa(buf, buffer, 10);
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	9e 01       	movw	r18, r28
    2580:	2f 5f       	subi	r18, 0xFF	; 255
    2582:	3f 4f       	sbci	r19, 0xFF	; 255
    2584:	b9 01       	movw	r22, r18
    2586:	4a e0       	ldi	r20, 0x0A	; 10
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	0e 94 34 1a 	call	0x3468	; 0x3468 <itoa>
	uart_puts(buffer);
    258e:	ce 01       	movw	r24, r28
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <uart_puts>
}
    2596:	2e 96       	adiw	r28, 0x0e	; 14
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <UART_sendc>:

void UART_sendc(char buf)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	89 83       	std	Y+1, r24	; 0x01
	uart_putc('c');
    25b4:	83 e6       	ldi	r24, 0x63	; 99
    25b6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	uart_putc(buf);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
}
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <UART_sends>:

void UART_sends(char *buf)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <UART_sends+0x6>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
	uart_putc('s');
    25d6:	83 e7       	ldi	r24, 0x73	; 115
    25d8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
//	uart_putc(sizeof(buf));
	uart_putc(strlen(buf));
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	0e 94 2b 1a 	call	0x3456	; 0x3456 <strlen>
    25e4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	do {
		uart_putc(*buf++);
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	20 81       	ld	r18, Z
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	82 2f       	mov	r24, r18
    25fa:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	}
	while (*buf);
    25fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2600:	fa 81       	ldd	r31, Y+2	; 0x02
    2602:	80 81       	ld	r24, Z
    2604:	88 23       	and	r24, r24
    2606:	81 f7       	brne	.-32     	; 0x25e8 <UART_sends+0x20>

//	uart_puts(buf);
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <UART_sendf>:

void UART_sendf(float buf, char left,char prec)
{
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	2e 97       	sbiw	r28, 0x0e	; 14
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	69 87       	std	Y+9, r22	; 0x09
    262c:	7a 87       	std	Y+10, r23	; 0x0a
    262e:	8b 87       	std	Y+11, r24	; 0x0b
    2630:	9c 87       	std	Y+12, r25	; 0x0c
    2632:	4d 87       	std	Y+13, r20	; 0x0d
    2634:	2e 87       	std	Y+14, r18	; 0x0e
//	char buffer[sizeof(float)*8+1];
	char buffer[8];
	uart_putc('f');
    2636:	86 e6       	ldi	r24, 0x66	; 102
    2638:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
//	uart_putc(/*strlen(buffer)*/('0'+12));
	uart_putc(8);
    263c:	88 e0       	ldi	r24, 0x08	; 8
    263e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uart_putc>
	dtostrf(buf, 1 , prec,buffer);
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	ab 85       	ldd	r26, Y+11	; 0x0b
    2648:	bc 85       	ldd	r27, Y+12	; 0x0c
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	2e 85       	ldd	r18, Y+14	; 0x0e
    2652:	fe 01       	movw	r30, r28
    2654:	31 96       	adiw	r30, 0x01	; 1
    2656:	8f 01       	movw	r16, r30
    2658:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <dtostrf>
	uart_puts(buffer );
    265c:	ce 01       	movw	r24, r28
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <uart_puts>
}
    2664:	2e 96       	adiw	r28, 0x0e	; 14
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <uart_readc>:

unsigned int uart_readc(void)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <uart_readc+0x6>
    2680:	0f 92       	push	r0
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	char buf;
	if ((buf = uart_getc()) < 31)
    2686:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	8f 31       	cpi	r24, 0x1F	; 31
    2690:	18 f4       	brcc	.+6      	; 0x2698 <uart_readc+0x1e>
		buf = uart_getc();
    2692:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
    2696:	89 83       	std	Y+1, r24	; 0x01
	uart_getc();
    2698:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <uart_getc>
	if((buf > 31) || (buf == 0))
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	80 32       	cpi	r24, 0x20	; 32
    26a0:	18 f4       	brcc	.+6      	; 0x26a8 <uart_readc+0x2e>
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	88 23       	and	r24, r24
    26a6:	41 f4       	brne	.+16     	; 0x26b8 <uart_readc+0x3e>
	return buf;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9b 83       	std	Y+3, r25	; 0x03
    26b0:	8a 83       	std	Y+2, r24	; 0x02
}
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	00 c0       	rjmp	.+0      	; 0x26b8 <uart_readc+0x3e>
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <uart_getint>:

int uart_getint(int ile)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <uart_getint+0x6>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
//	int buf;
//	strcpy(buffer,uart_gets(ile));
	bufi = atoi(uart_gets(ile));
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	0e 94 a4 11 	call	0x2348	; 0x2348 <uart_gets>
    26da:	0e 94 0d 1a 	call	0x341a	; 0x341a <atoi>
    26de:	90 93 88 01 	sts	0x0188, r25
    26e2:	80 93 87 01 	sts	0x0187, r24
	return bufi;
    26e6:	80 91 87 01 	lds	r24, 0x0187
    26ea:	90 91 88 01 	lds	r25, 0x0188
}
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <__fixunssfsi>:
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	7b 01       	movw	r14, r22
    2702:	8c 01       	movw	r16, r24
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	5f e4       	ldi	r21, 0x4F	; 79
    270c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    2710:	88 23       	and	r24, r24
    2712:	8c f0       	brlt	.+34     	; 0x2736 <__fixunssfsi+0x3e>
    2714:	c8 01       	movw	r24, r16
    2716:	b7 01       	movw	r22, r14
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	5f e4       	ldi	r21, 0x4F	; 79
    2720:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__subsf3>
    2724:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__fixsfsi>
    2728:	9b 01       	movw	r18, r22
    272a:	ac 01       	movw	r20, r24
    272c:	20 50       	subi	r18, 0x00	; 0
    272e:	30 40       	sbci	r19, 0x00	; 0
    2730:	40 40       	sbci	r20, 0x00	; 0
    2732:	50 48       	sbci	r21, 0x80	; 128
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <__fixunssfsi+0x4a>
    2736:	c8 01       	movw	r24, r16
    2738:	b7 01       	movw	r22, r14
    273a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__fixsfsi>
    273e:	9b 01       	movw	r18, r22
    2740:	ac 01       	movw	r20, r24
    2742:	b9 01       	movw	r22, r18
    2744:	ca 01       	movw	r24, r20
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	08 95       	ret

00002750 <_fpadd_parts>:
    2750:	a0 e0       	ldi	r26, 0x00	; 0
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ee ea       	ldi	r30, 0xAE	; 174
    2756:	f3 e1       	ldi	r31, 0x13	; 19
    2758:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__prologue_saves__>
    275c:	dc 01       	movw	r26, r24
    275e:	2b 01       	movw	r4, r22
    2760:	fa 01       	movw	r30, r20
    2762:	9c 91       	ld	r25, X
    2764:	92 30       	cpi	r25, 0x02	; 2
    2766:	08 f4       	brcc	.+2      	; 0x276a <_fpadd_parts+0x1a>
    2768:	39 c1       	rjmp	.+626    	; 0x29dc <_fpadd_parts+0x28c>
    276a:	eb 01       	movw	r28, r22
    276c:	88 81       	ld	r24, Y
    276e:	82 30       	cpi	r24, 0x02	; 2
    2770:	08 f4       	brcc	.+2      	; 0x2774 <_fpadd_parts+0x24>
    2772:	33 c1       	rjmp	.+614    	; 0x29da <_fpadd_parts+0x28a>
    2774:	94 30       	cpi	r25, 0x04	; 4
    2776:	69 f4       	brne	.+26     	; 0x2792 <_fpadd_parts+0x42>
    2778:	84 30       	cpi	r24, 0x04	; 4
    277a:	09 f0       	breq	.+2      	; 0x277e <_fpadd_parts+0x2e>
    277c:	2f c1       	rjmp	.+606    	; 0x29dc <_fpadd_parts+0x28c>
    277e:	11 96       	adiw	r26, 0x01	; 1
    2780:	9c 91       	ld	r25, X
    2782:	11 97       	sbiw	r26, 0x01	; 1
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	98 17       	cp	r25, r24
    2788:	09 f4       	brne	.+2      	; 0x278c <_fpadd_parts+0x3c>
    278a:	28 c1       	rjmp	.+592    	; 0x29dc <_fpadd_parts+0x28c>
    278c:	a1 e2       	ldi	r26, 0x21	; 33
    278e:	b1 e0       	ldi	r27, 0x01	; 1
    2790:	25 c1       	rjmp	.+586    	; 0x29dc <_fpadd_parts+0x28c>
    2792:	84 30       	cpi	r24, 0x04	; 4
    2794:	09 f4       	brne	.+2      	; 0x2798 <_fpadd_parts+0x48>
    2796:	21 c1       	rjmp	.+578    	; 0x29da <_fpadd_parts+0x28a>
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	a9 f4       	brne	.+42     	; 0x27c6 <_fpadd_parts+0x76>
    279c:	92 30       	cpi	r25, 0x02	; 2
    279e:	09 f0       	breq	.+2      	; 0x27a2 <_fpadd_parts+0x52>
    27a0:	1d c1       	rjmp	.+570    	; 0x29dc <_fpadd_parts+0x28c>
    27a2:	9a 01       	movw	r18, r20
    27a4:	ad 01       	movw	r20, r26
    27a6:	88 e0       	ldi	r24, 0x08	; 8
    27a8:	ea 01       	movw	r28, r20
    27aa:	09 90       	ld	r0, Y+
    27ac:	ae 01       	movw	r20, r28
    27ae:	e9 01       	movw	r28, r18
    27b0:	09 92       	st	Y+, r0
    27b2:	9e 01       	movw	r18, r28
    27b4:	81 50       	subi	r24, 0x01	; 1
    27b6:	c1 f7       	brne	.-16     	; 0x27a8 <_fpadd_parts+0x58>
    27b8:	e2 01       	movw	r28, r4
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	11 96       	adiw	r26, 0x01	; 1
    27be:	9c 91       	ld	r25, X
    27c0:	89 23       	and	r24, r25
    27c2:	81 83       	std	Z+1, r24	; 0x01
    27c4:	08 c1       	rjmp	.+528    	; 0x29d6 <_fpadd_parts+0x286>
    27c6:	92 30       	cpi	r25, 0x02	; 2
    27c8:	09 f4       	brne	.+2      	; 0x27cc <_fpadd_parts+0x7c>
    27ca:	07 c1       	rjmp	.+526    	; 0x29da <_fpadd_parts+0x28a>
    27cc:	12 96       	adiw	r26, 0x02	; 2
    27ce:	2d 90       	ld	r2, X+
    27d0:	3c 90       	ld	r3, X
    27d2:	13 97       	sbiw	r26, 0x03	; 3
    27d4:	eb 01       	movw	r28, r22
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	14 96       	adiw	r26, 0x04	; 4
    27dc:	ad 90       	ld	r10, X+
    27de:	bd 90       	ld	r11, X+
    27e0:	cd 90       	ld	r12, X+
    27e2:	dc 90       	ld	r13, X
    27e4:	17 97       	sbiw	r26, 0x07	; 7
    27e6:	ec 80       	ldd	r14, Y+4	; 0x04
    27e8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ea:	0e 81       	ldd	r16, Y+6	; 0x06
    27ec:	1f 81       	ldd	r17, Y+7	; 0x07
    27ee:	91 01       	movw	r18, r2
    27f0:	28 1b       	sub	r18, r24
    27f2:	39 0b       	sbc	r19, r25
    27f4:	b9 01       	movw	r22, r18
    27f6:	37 ff       	sbrs	r19, 7
    27f8:	04 c0       	rjmp	.+8      	; 0x2802 <_fpadd_parts+0xb2>
    27fa:	66 27       	eor	r22, r22
    27fc:	77 27       	eor	r23, r23
    27fe:	62 1b       	sub	r22, r18
    2800:	73 0b       	sbc	r23, r19
    2802:	60 32       	cpi	r22, 0x20	; 32
    2804:	71 05       	cpc	r23, r1
    2806:	0c f0       	brlt	.+2      	; 0x280a <_fpadd_parts+0xba>
    2808:	61 c0       	rjmp	.+194    	; 0x28cc <_fpadd_parts+0x17c>
    280a:	12 16       	cp	r1, r18
    280c:	13 06       	cpc	r1, r19
    280e:	6c f5       	brge	.+90     	; 0x286a <_fpadd_parts+0x11a>
    2810:	37 01       	movw	r6, r14
    2812:	48 01       	movw	r8, r16
    2814:	06 2e       	mov	r0, r22
    2816:	04 c0       	rjmp	.+8      	; 0x2820 <_fpadd_parts+0xd0>
    2818:	96 94       	lsr	r9
    281a:	87 94       	ror	r8
    281c:	77 94       	ror	r7
    281e:	67 94       	ror	r6
    2820:	0a 94       	dec	r0
    2822:	d2 f7       	brpl	.-12     	; 0x2818 <_fpadd_parts+0xc8>
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	04 c0       	rjmp	.+8      	; 0x2836 <_fpadd_parts+0xe6>
    282e:	22 0f       	add	r18, r18
    2830:	33 1f       	adc	r19, r19
    2832:	44 1f       	adc	r20, r20
    2834:	55 1f       	adc	r21, r21
    2836:	6a 95       	dec	r22
    2838:	d2 f7       	brpl	.-12     	; 0x282e <_fpadd_parts+0xde>
    283a:	21 50       	subi	r18, 0x01	; 1
    283c:	30 40       	sbci	r19, 0x00	; 0
    283e:	40 40       	sbci	r20, 0x00	; 0
    2840:	50 40       	sbci	r21, 0x00	; 0
    2842:	2e 21       	and	r18, r14
    2844:	3f 21       	and	r19, r15
    2846:	40 23       	and	r20, r16
    2848:	51 23       	and	r21, r17
    284a:	21 15       	cp	r18, r1
    284c:	31 05       	cpc	r19, r1
    284e:	41 05       	cpc	r20, r1
    2850:	51 05       	cpc	r21, r1
    2852:	21 f0       	breq	.+8      	; 0x285c <_fpadd_parts+0x10c>
    2854:	21 e0       	ldi	r18, 0x01	; 1
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	79 01       	movw	r14, r18
    285e:	8a 01       	movw	r16, r20
    2860:	e6 28       	or	r14, r6
    2862:	f7 28       	or	r15, r7
    2864:	08 29       	or	r16, r8
    2866:	19 29       	or	r17, r9
    2868:	3c c0       	rjmp	.+120    	; 0x28e2 <_fpadd_parts+0x192>
    286a:	23 2b       	or	r18, r19
    286c:	d1 f1       	breq	.+116    	; 0x28e2 <_fpadd_parts+0x192>
    286e:	26 0e       	add	r2, r22
    2870:	37 1e       	adc	r3, r23
    2872:	35 01       	movw	r6, r10
    2874:	46 01       	movw	r8, r12
    2876:	06 2e       	mov	r0, r22
    2878:	04 c0       	rjmp	.+8      	; 0x2882 <_fpadd_parts+0x132>
    287a:	96 94       	lsr	r9
    287c:	87 94       	ror	r8
    287e:	77 94       	ror	r7
    2880:	67 94       	ror	r6
    2882:	0a 94       	dec	r0
    2884:	d2 f7       	brpl	.-12     	; 0x287a <_fpadd_parts+0x12a>
    2886:	21 e0       	ldi	r18, 0x01	; 1
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <_fpadd_parts+0x148>
    2890:	22 0f       	add	r18, r18
    2892:	33 1f       	adc	r19, r19
    2894:	44 1f       	adc	r20, r20
    2896:	55 1f       	adc	r21, r21
    2898:	6a 95       	dec	r22
    289a:	d2 f7       	brpl	.-12     	; 0x2890 <_fpadd_parts+0x140>
    289c:	21 50       	subi	r18, 0x01	; 1
    289e:	30 40       	sbci	r19, 0x00	; 0
    28a0:	40 40       	sbci	r20, 0x00	; 0
    28a2:	50 40       	sbci	r21, 0x00	; 0
    28a4:	2a 21       	and	r18, r10
    28a6:	3b 21       	and	r19, r11
    28a8:	4c 21       	and	r20, r12
    28aa:	5d 21       	and	r21, r13
    28ac:	21 15       	cp	r18, r1
    28ae:	31 05       	cpc	r19, r1
    28b0:	41 05       	cpc	r20, r1
    28b2:	51 05       	cpc	r21, r1
    28b4:	21 f0       	breq	.+8      	; 0x28be <_fpadd_parts+0x16e>
    28b6:	21 e0       	ldi	r18, 0x01	; 1
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	59 01       	movw	r10, r18
    28c0:	6a 01       	movw	r12, r20
    28c2:	a6 28       	or	r10, r6
    28c4:	b7 28       	or	r11, r7
    28c6:	c8 28       	or	r12, r8
    28c8:	d9 28       	or	r13, r9
    28ca:	0b c0       	rjmp	.+22     	; 0x28e2 <_fpadd_parts+0x192>
    28cc:	82 15       	cp	r24, r2
    28ce:	93 05       	cpc	r25, r3
    28d0:	2c f0       	brlt	.+10     	; 0x28dc <_fpadd_parts+0x18c>
    28d2:	1c 01       	movw	r2, r24
    28d4:	aa 24       	eor	r10, r10
    28d6:	bb 24       	eor	r11, r11
    28d8:	65 01       	movw	r12, r10
    28da:	03 c0       	rjmp	.+6      	; 0x28e2 <_fpadd_parts+0x192>
    28dc:	ee 24       	eor	r14, r14
    28de:	ff 24       	eor	r15, r15
    28e0:	87 01       	movw	r16, r14
    28e2:	11 96       	adiw	r26, 0x01	; 1
    28e4:	9c 91       	ld	r25, X
    28e6:	d2 01       	movw	r26, r4
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	8c 91       	ld	r24, X
    28ec:	98 17       	cp	r25, r24
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <_fpadd_parts+0x1a2>
    28f0:	45 c0       	rjmp	.+138    	; 0x297c <_fpadd_parts+0x22c>
    28f2:	99 23       	and	r25, r25
    28f4:	39 f0       	breq	.+14     	; 0x2904 <_fpadd_parts+0x1b4>
    28f6:	a8 01       	movw	r20, r16
    28f8:	97 01       	movw	r18, r14
    28fa:	2a 19       	sub	r18, r10
    28fc:	3b 09       	sbc	r19, r11
    28fe:	4c 09       	sbc	r20, r12
    2900:	5d 09       	sbc	r21, r13
    2902:	06 c0       	rjmp	.+12     	; 0x2910 <_fpadd_parts+0x1c0>
    2904:	a6 01       	movw	r20, r12
    2906:	95 01       	movw	r18, r10
    2908:	2e 19       	sub	r18, r14
    290a:	3f 09       	sbc	r19, r15
    290c:	40 0b       	sbc	r20, r16
    290e:	51 0b       	sbc	r21, r17
    2910:	57 fd       	sbrc	r21, 7
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <_fpadd_parts+0x1d4>
    2914:	11 82       	std	Z+1, r1	; 0x01
    2916:	33 82       	std	Z+3, r3	; 0x03
    2918:	22 82       	std	Z+2, r2	; 0x02
    291a:	24 83       	std	Z+4, r18	; 0x04
    291c:	35 83       	std	Z+5, r19	; 0x05
    291e:	46 83       	std	Z+6, r20	; 0x06
    2920:	57 83       	std	Z+7, r21	; 0x07
    2922:	1d c0       	rjmp	.+58     	; 0x295e <_fpadd_parts+0x20e>
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	81 83       	std	Z+1, r24	; 0x01
    2928:	33 82       	std	Z+3, r3	; 0x03
    292a:	22 82       	std	Z+2, r2	; 0x02
    292c:	88 27       	eor	r24, r24
    292e:	99 27       	eor	r25, r25
    2930:	dc 01       	movw	r26, r24
    2932:	82 1b       	sub	r24, r18
    2934:	93 0b       	sbc	r25, r19
    2936:	a4 0b       	sbc	r26, r20
    2938:	b5 0b       	sbc	r27, r21
    293a:	84 83       	std	Z+4, r24	; 0x04
    293c:	95 83       	std	Z+5, r25	; 0x05
    293e:	a6 83       	std	Z+6, r26	; 0x06
    2940:	b7 83       	std	Z+7, r27	; 0x07
    2942:	0d c0       	rjmp	.+26     	; 0x295e <_fpadd_parts+0x20e>
    2944:	22 0f       	add	r18, r18
    2946:	33 1f       	adc	r19, r19
    2948:	44 1f       	adc	r20, r20
    294a:	55 1f       	adc	r21, r21
    294c:	24 83       	std	Z+4, r18	; 0x04
    294e:	35 83       	std	Z+5, r19	; 0x05
    2950:	46 83       	std	Z+6, r20	; 0x06
    2952:	57 83       	std	Z+7, r21	; 0x07
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	93 83       	std	Z+3, r25	; 0x03
    295c:	82 83       	std	Z+2, r24	; 0x02
    295e:	24 81       	ldd	r18, Z+4	; 0x04
    2960:	35 81       	ldd	r19, Z+5	; 0x05
    2962:	46 81       	ldd	r20, Z+6	; 0x06
    2964:	57 81       	ldd	r21, Z+7	; 0x07
    2966:	da 01       	movw	r26, r20
    2968:	c9 01       	movw	r24, r18
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	a1 09       	sbc	r26, r1
    296e:	b1 09       	sbc	r27, r1
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	af 4f       	sbci	r26, 0xFF	; 255
    2976:	bf 43       	sbci	r27, 0x3F	; 63
    2978:	28 f3       	brcs	.-54     	; 0x2944 <_fpadd_parts+0x1f4>
    297a:	0b c0       	rjmp	.+22     	; 0x2992 <_fpadd_parts+0x242>
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	33 82       	std	Z+3, r3	; 0x03
    2980:	22 82       	std	Z+2, r2	; 0x02
    2982:	ea 0c       	add	r14, r10
    2984:	fb 1c       	adc	r15, r11
    2986:	0c 1d       	adc	r16, r12
    2988:	1d 1d       	adc	r17, r13
    298a:	e4 82       	std	Z+4, r14	; 0x04
    298c:	f5 82       	std	Z+5, r15	; 0x05
    298e:	06 83       	std	Z+6, r16	; 0x06
    2990:	17 83       	std	Z+7, r17	; 0x07
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	80 83       	st	Z, r24
    2996:	24 81       	ldd	r18, Z+4	; 0x04
    2998:	35 81       	ldd	r19, Z+5	; 0x05
    299a:	46 81       	ldd	r20, Z+6	; 0x06
    299c:	57 81       	ldd	r21, Z+7	; 0x07
    299e:	57 ff       	sbrs	r21, 7
    29a0:	1a c0       	rjmp	.+52     	; 0x29d6 <_fpadd_parts+0x286>
    29a2:	c9 01       	movw	r24, r18
    29a4:	aa 27       	eor	r26, r26
    29a6:	97 fd       	sbrc	r25, 7
    29a8:	a0 95       	com	r26
    29aa:	ba 2f       	mov	r27, r26
    29ac:	81 70       	andi	r24, 0x01	; 1
    29ae:	90 70       	andi	r25, 0x00	; 0
    29b0:	a0 70       	andi	r26, 0x00	; 0
    29b2:	b0 70       	andi	r27, 0x00	; 0
    29b4:	56 95       	lsr	r21
    29b6:	47 95       	ror	r20
    29b8:	37 95       	ror	r19
    29ba:	27 95       	ror	r18
    29bc:	82 2b       	or	r24, r18
    29be:	93 2b       	or	r25, r19
    29c0:	a4 2b       	or	r26, r20
    29c2:	b5 2b       	or	r27, r21
    29c4:	84 83       	std	Z+4, r24	; 0x04
    29c6:	95 83       	std	Z+5, r25	; 0x05
    29c8:	a6 83       	std	Z+6, r26	; 0x06
    29ca:	b7 83       	std	Z+7, r27	; 0x07
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	93 83       	std	Z+3, r25	; 0x03
    29d4:	82 83       	std	Z+2, r24	; 0x02
    29d6:	df 01       	movw	r26, r30
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <_fpadd_parts+0x28c>
    29da:	d2 01       	movw	r26, r4
    29dc:	cd 01       	movw	r24, r26
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	e2 e1       	ldi	r30, 0x12	; 18
    29e4:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__epilogue_restores__>

000029e8 <__subsf3>:
    29e8:	a0 e2       	ldi	r26, 0x20	; 32
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ea ef       	ldi	r30, 0xFA	; 250
    29ee:	f4 e1       	ldi	r31, 0x14	; 20
    29f0:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__prologue_saves__+0x18>
    29f4:	69 83       	std	Y+1, r22	; 0x01
    29f6:	7a 83       	std	Y+2, r23	; 0x02
    29f8:	8b 83       	std	Y+3, r24	; 0x03
    29fa:	9c 83       	std	Y+4, r25	; 0x04
    29fc:	2d 83       	std	Y+5, r18	; 0x05
    29fe:	3e 83       	std	Y+6, r19	; 0x06
    2a00:	4f 83       	std	Y+7, r20	; 0x07
    2a02:	58 87       	std	Y+8, r21	; 0x08
    2a04:	e9 e0       	ldi	r30, 0x09	; 9
    2a06:	ee 2e       	mov	r14, r30
    2a08:	f1 2c       	mov	r15, r1
    2a0a:	ec 0e       	add	r14, r28
    2a0c:	fd 1e       	adc	r15, r29
    2a0e:	ce 01       	movw	r24, r28
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	b7 01       	movw	r22, r14
    2a14:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2a18:	8e 01       	movw	r16, r28
    2a1a:	0f 5e       	subi	r16, 0xEF	; 239
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	ce 01       	movw	r24, r28
    2a20:	05 96       	adiw	r24, 0x05	; 5
    2a22:	b8 01       	movw	r22, r16
    2a24:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2a28:	8a 89       	ldd	r24, Y+18	; 0x12
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	89 27       	eor	r24, r25
    2a2e:	8a 8b       	std	Y+18, r24	; 0x12
    2a30:	c7 01       	movw	r24, r14
    2a32:	b8 01       	movw	r22, r16
    2a34:	ae 01       	movw	r20, r28
    2a36:	47 5e       	subi	r20, 0xE7	; 231
    2a38:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3a:	0e 94 a8 13 	call	0x2750	; 0x2750 <_fpadd_parts>
    2a3e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__pack_f>
    2a42:	a0 96       	adiw	r28, 0x20	; 32
    2a44:	e6 e0       	ldi	r30, 0x06	; 6
    2a46:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__epilogue_restores__+0x18>

00002a4a <__addsf3>:
    2a4a:	a0 e2       	ldi	r26, 0x20	; 32
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	eb e2       	ldi	r30, 0x2B	; 43
    2a50:	f5 e1       	ldi	r31, 0x15	; 21
    2a52:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__prologue_saves__+0x18>
    2a56:	69 83       	std	Y+1, r22	; 0x01
    2a58:	7a 83       	std	Y+2, r23	; 0x02
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	2d 83       	std	Y+5, r18	; 0x05
    2a60:	3e 83       	std	Y+6, r19	; 0x06
    2a62:	4f 83       	std	Y+7, r20	; 0x07
    2a64:	58 87       	std	Y+8, r21	; 0x08
    2a66:	f9 e0       	ldi	r31, 0x09	; 9
    2a68:	ef 2e       	mov	r14, r31
    2a6a:	f1 2c       	mov	r15, r1
    2a6c:	ec 0e       	add	r14, r28
    2a6e:	fd 1e       	adc	r15, r29
    2a70:	ce 01       	movw	r24, r28
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	b7 01       	movw	r22, r14
    2a76:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2a7a:	8e 01       	movw	r16, r28
    2a7c:	0f 5e       	subi	r16, 0xEF	; 239
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	ce 01       	movw	r24, r28
    2a82:	05 96       	adiw	r24, 0x05	; 5
    2a84:	b8 01       	movw	r22, r16
    2a86:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2a8a:	c7 01       	movw	r24, r14
    2a8c:	b8 01       	movw	r22, r16
    2a8e:	ae 01       	movw	r20, r28
    2a90:	47 5e       	subi	r20, 0xE7	; 231
    2a92:	5f 4f       	sbci	r21, 0xFF	; 255
    2a94:	0e 94 a8 13 	call	0x2750	; 0x2750 <_fpadd_parts>
    2a98:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__pack_f>
    2a9c:	a0 96       	adiw	r28, 0x20	; 32
    2a9e:	e6 e0       	ldi	r30, 0x06	; 6
    2aa0:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__epilogue_restores__+0x18>

00002aa4 <__mulsf3>:
    2aa4:	a0 e2       	ldi	r26, 0x20	; 32
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e8 e5       	ldi	r30, 0x58	; 88
    2aaa:	f5 e1       	ldi	r31, 0x15	; 21
    2aac:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__prologue_saves__>
    2ab0:	69 83       	std	Y+1, r22	; 0x01
    2ab2:	7a 83       	std	Y+2, r23	; 0x02
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	2d 83       	std	Y+5, r18	; 0x05
    2aba:	3e 83       	std	Y+6, r19	; 0x06
    2abc:	4f 83       	std	Y+7, r20	; 0x07
    2abe:	58 87       	std	Y+8, r21	; 0x08
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	01 96       	adiw	r24, 0x01	; 1
    2ac4:	be 01       	movw	r22, r28
    2ac6:	67 5f       	subi	r22, 0xF7	; 247
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2ace:	ce 01       	movw	r24, r28
    2ad0:	05 96       	adiw	r24, 0x05	; 5
    2ad2:	be 01       	movw	r22, r28
    2ad4:	6f 5e       	subi	r22, 0xEF	; 239
    2ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad8:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2adc:	99 85       	ldd	r25, Y+9	; 0x09
    2ade:	92 30       	cpi	r25, 0x02	; 2
    2ae0:	88 f0       	brcs	.+34     	; 0x2b04 <__mulsf3+0x60>
    2ae2:	89 89       	ldd	r24, Y+17	; 0x11
    2ae4:	82 30       	cpi	r24, 0x02	; 2
    2ae6:	c8 f0       	brcs	.+50     	; 0x2b1a <__mulsf3+0x76>
    2ae8:	94 30       	cpi	r25, 0x04	; 4
    2aea:	19 f4       	brne	.+6      	; 0x2af2 <__mulsf3+0x4e>
    2aec:	82 30       	cpi	r24, 0x02	; 2
    2aee:	51 f4       	brne	.+20     	; 0x2b04 <__mulsf3+0x60>
    2af0:	04 c0       	rjmp	.+8      	; 0x2afa <__mulsf3+0x56>
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	29 f4       	brne	.+10     	; 0x2b00 <__mulsf3+0x5c>
    2af6:	92 30       	cpi	r25, 0x02	; 2
    2af8:	81 f4       	brne	.+32     	; 0x2b1a <__mulsf3+0x76>
    2afa:	81 e2       	ldi	r24, 0x21	; 33
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	c6 c0       	rjmp	.+396    	; 0x2c8c <__mulsf3+0x1e8>
    2b00:	92 30       	cpi	r25, 0x02	; 2
    2b02:	49 f4       	brne	.+18     	; 0x2b16 <__mulsf3+0x72>
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	8a 89       	ldd	r24, Y+18	; 0x12
    2b0a:	98 13       	cpse	r25, r24
    2b0c:	21 e0       	ldi	r18, 0x01	; 1
    2b0e:	2a 87       	std	Y+10, r18	; 0x0a
    2b10:	ce 01       	movw	r24, r28
    2b12:	09 96       	adiw	r24, 0x09	; 9
    2b14:	bb c0       	rjmp	.+374    	; 0x2c8c <__mulsf3+0x1e8>
    2b16:	82 30       	cpi	r24, 0x02	; 2
    2b18:	49 f4       	brne	.+18     	; 0x2b2c <__mulsf3+0x88>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	8a 89       	ldd	r24, Y+18	; 0x12
    2b20:	98 13       	cpse	r25, r24
    2b22:	21 e0       	ldi	r18, 0x01	; 1
    2b24:	2a 8b       	std	Y+18, r18	; 0x12
    2b26:	ce 01       	movw	r24, r28
    2b28:	41 96       	adiw	r24, 0x11	; 17
    2b2a:	b0 c0       	rjmp	.+352    	; 0x2c8c <__mulsf3+0x1e8>
    2b2c:	2d 84       	ldd	r2, Y+13	; 0x0d
    2b2e:	3e 84       	ldd	r3, Y+14	; 0x0e
    2b30:	4f 84       	ldd	r4, Y+15	; 0x0f
    2b32:	58 88       	ldd	r5, Y+16	; 0x10
    2b34:	6d 88       	ldd	r6, Y+21	; 0x15
    2b36:	7e 88       	ldd	r7, Y+22	; 0x16
    2b38:	8f 88       	ldd	r8, Y+23	; 0x17
    2b3a:	98 8c       	ldd	r9, Y+24	; 0x18
    2b3c:	ee 24       	eor	r14, r14
    2b3e:	ff 24       	eor	r15, r15
    2b40:	87 01       	movw	r16, r14
    2b42:	aa 24       	eor	r10, r10
    2b44:	bb 24       	eor	r11, r11
    2b46:	65 01       	movw	r12, r10
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	e0 e0       	ldi	r30, 0x00	; 0
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	c1 01       	movw	r24, r2
    2b56:	81 70       	andi	r24, 0x01	; 1
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	89 2b       	or	r24, r25
    2b5c:	e9 f0       	breq	.+58     	; 0x2b98 <__mulsf3+0xf4>
    2b5e:	e6 0c       	add	r14, r6
    2b60:	f7 1c       	adc	r15, r7
    2b62:	08 1d       	adc	r16, r8
    2b64:	19 1d       	adc	r17, r9
    2b66:	9a 01       	movw	r18, r20
    2b68:	ab 01       	movw	r20, r22
    2b6a:	2a 0d       	add	r18, r10
    2b6c:	3b 1d       	adc	r19, r11
    2b6e:	4c 1d       	adc	r20, r12
    2b70:	5d 1d       	adc	r21, r13
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a0 e0       	ldi	r26, 0x00	; 0
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e6 14       	cp	r14, r6
    2b7c:	f7 04       	cpc	r15, r7
    2b7e:	08 05       	cpc	r16, r8
    2b80:	19 05       	cpc	r17, r9
    2b82:	20 f4       	brcc	.+8      	; 0x2b8c <__mulsf3+0xe8>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e0       	ldi	r26, 0x00	; 0
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	ba 01       	movw	r22, r20
    2b8e:	a9 01       	movw	r20, r18
    2b90:	48 0f       	add	r20, r24
    2b92:	59 1f       	adc	r21, r25
    2b94:	6a 1f       	adc	r22, r26
    2b96:	7b 1f       	adc	r23, r27
    2b98:	aa 0c       	add	r10, r10
    2b9a:	bb 1c       	adc	r11, r11
    2b9c:	cc 1c       	adc	r12, r12
    2b9e:	dd 1c       	adc	r13, r13
    2ba0:	97 fe       	sbrs	r9, 7
    2ba2:	08 c0       	rjmp	.+16     	; 0x2bb4 <__mulsf3+0x110>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	a8 2a       	or	r10, r24
    2bae:	b9 2a       	or	r11, r25
    2bb0:	ca 2a       	or	r12, r26
    2bb2:	db 2a       	or	r13, r27
    2bb4:	31 96       	adiw	r30, 0x01	; 1
    2bb6:	e0 32       	cpi	r30, 0x20	; 32
    2bb8:	f1 05       	cpc	r31, r1
    2bba:	49 f0       	breq	.+18     	; 0x2bce <__mulsf3+0x12a>
    2bbc:	66 0c       	add	r6, r6
    2bbe:	77 1c       	adc	r7, r7
    2bc0:	88 1c       	adc	r8, r8
    2bc2:	99 1c       	adc	r9, r9
    2bc4:	56 94       	lsr	r5
    2bc6:	47 94       	ror	r4
    2bc8:	37 94       	ror	r3
    2bca:	27 94       	ror	r2
    2bcc:	c3 cf       	rjmp	.-122    	; 0x2b54 <__mulsf3+0xb0>
    2bce:	fa 85       	ldd	r31, Y+10	; 0x0a
    2bd0:	ea 89       	ldd	r30, Y+18	; 0x12
    2bd2:	2b 89       	ldd	r18, Y+19	; 0x13
    2bd4:	3c 89       	ldd	r19, Y+20	; 0x14
    2bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bda:	28 0f       	add	r18, r24
    2bdc:	39 1f       	adc	r19, r25
    2bde:	2e 5f       	subi	r18, 0xFE	; 254
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	17 c0       	rjmp	.+46     	; 0x2c12 <__mulsf3+0x16e>
    2be4:	ca 01       	movw	r24, r20
    2be6:	81 70       	andi	r24, 0x01	; 1
    2be8:	90 70       	andi	r25, 0x00	; 0
    2bea:	89 2b       	or	r24, r25
    2bec:	61 f0       	breq	.+24     	; 0x2c06 <__mulsf3+0x162>
    2bee:	16 95       	lsr	r17
    2bf0:	07 95       	ror	r16
    2bf2:	f7 94       	ror	r15
    2bf4:	e7 94       	ror	r14
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e0       	ldi	r26, 0x00	; 0
    2bfc:	b0 e8       	ldi	r27, 0x80	; 128
    2bfe:	e8 2a       	or	r14, r24
    2c00:	f9 2a       	or	r15, r25
    2c02:	0a 2b       	or	r16, r26
    2c04:	1b 2b       	or	r17, r27
    2c06:	76 95       	lsr	r23
    2c08:	67 95       	ror	r22
    2c0a:	57 95       	ror	r21
    2c0c:	47 95       	ror	r20
    2c0e:	2f 5f       	subi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	77 fd       	sbrc	r23, 7
    2c14:	e7 cf       	rjmp	.-50     	; 0x2be4 <__mulsf3+0x140>
    2c16:	0c c0       	rjmp	.+24     	; 0x2c30 <__mulsf3+0x18c>
    2c18:	44 0f       	add	r20, r20
    2c1a:	55 1f       	adc	r21, r21
    2c1c:	66 1f       	adc	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	17 fd       	sbrc	r17, 7
    2c22:	41 60       	ori	r20, 0x01	; 1
    2c24:	ee 0c       	add	r14, r14
    2c26:	ff 1c       	adc	r15, r15
    2c28:	00 1f       	adc	r16, r16
    2c2a:	11 1f       	adc	r17, r17
    2c2c:	21 50       	subi	r18, 0x01	; 1
    2c2e:	30 40       	sbci	r19, 0x00	; 0
    2c30:	40 30       	cpi	r20, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	59 07       	cpc	r21, r25
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	69 07       	cpc	r22, r25
    2c3a:	90 e4       	ldi	r25, 0x40	; 64
    2c3c:	79 07       	cpc	r23, r25
    2c3e:	60 f3       	brcs	.-40     	; 0x2c18 <__mulsf3+0x174>
    2c40:	2b 8f       	std	Y+27, r18	; 0x1b
    2c42:	3c 8f       	std	Y+28, r19	; 0x1c
    2c44:	db 01       	movw	r26, r22
    2c46:	ca 01       	movw	r24, r20
    2c48:	8f 77       	andi	r24, 0x7F	; 127
    2c4a:	90 70       	andi	r25, 0x00	; 0
    2c4c:	a0 70       	andi	r26, 0x00	; 0
    2c4e:	b0 70       	andi	r27, 0x00	; 0
    2c50:	80 34       	cpi	r24, 0x40	; 64
    2c52:	91 05       	cpc	r25, r1
    2c54:	a1 05       	cpc	r26, r1
    2c56:	b1 05       	cpc	r27, r1
    2c58:	61 f4       	brne	.+24     	; 0x2c72 <__mulsf3+0x1ce>
    2c5a:	47 fd       	sbrc	r20, 7
    2c5c:	0a c0       	rjmp	.+20     	; 0x2c72 <__mulsf3+0x1ce>
    2c5e:	e1 14       	cp	r14, r1
    2c60:	f1 04       	cpc	r15, r1
    2c62:	01 05       	cpc	r16, r1
    2c64:	11 05       	cpc	r17, r1
    2c66:	29 f0       	breq	.+10     	; 0x2c72 <__mulsf3+0x1ce>
    2c68:	40 5c       	subi	r20, 0xC0	; 192
    2c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6c:	6f 4f       	sbci	r22, 0xFF	; 255
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	40 78       	andi	r20, 0x80	; 128
    2c72:	1a 8e       	std	Y+26, r1	; 0x1a
    2c74:	fe 17       	cp	r31, r30
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <__mulsf3+0x1d8>
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	8a 8f       	std	Y+26, r24	; 0x1a
    2c7c:	4d 8f       	std	Y+29, r20	; 0x1d
    2c7e:	5e 8f       	std	Y+30, r21	; 0x1e
    2c80:	6f 8f       	std	Y+31, r22	; 0x1f
    2c82:	78 a3       	std	Y+32, r23	; 0x20
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	89 8f       	std	Y+25, r24	; 0x19
    2c88:	ce 01       	movw	r24, r28
    2c8a:	49 96       	adiw	r24, 0x19	; 25
    2c8c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__pack_f>
    2c90:	a0 96       	adiw	r28, 0x20	; 32
    2c92:	e2 e1       	ldi	r30, 0x12	; 18
    2c94:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__epilogue_restores__>

00002c98 <__divsf3>:
    2c98:	a8 e1       	ldi	r26, 0x18	; 24
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e2 e5       	ldi	r30, 0x52	; 82
    2c9e:	f6 e1       	ldi	r31, 0x16	; 22
    2ca0:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__prologue_saves__+0x10>
    2ca4:	69 83       	std	Y+1, r22	; 0x01
    2ca6:	7a 83       	std	Y+2, r23	; 0x02
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	2d 83       	std	Y+5, r18	; 0x05
    2cae:	3e 83       	std	Y+6, r19	; 0x06
    2cb0:	4f 83       	std	Y+7, r20	; 0x07
    2cb2:	58 87       	std	Y+8, r21	; 0x08
    2cb4:	b9 e0       	ldi	r27, 0x09	; 9
    2cb6:	eb 2e       	mov	r14, r27
    2cb8:	f1 2c       	mov	r15, r1
    2cba:	ec 0e       	add	r14, r28
    2cbc:	fd 1e       	adc	r15, r29
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	01 96       	adiw	r24, 0x01	; 1
    2cc2:	b7 01       	movw	r22, r14
    2cc4:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2cc8:	8e 01       	movw	r16, r28
    2cca:	0f 5e       	subi	r16, 0xEF	; 239
    2ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cce:	ce 01       	movw	r24, r28
    2cd0:	05 96       	adiw	r24, 0x05	; 5
    2cd2:	b8 01       	movw	r22, r16
    2cd4:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2cd8:	29 85       	ldd	r18, Y+9	; 0x09
    2cda:	22 30       	cpi	r18, 0x02	; 2
    2cdc:	08 f4       	brcc	.+2      	; 0x2ce0 <__divsf3+0x48>
    2cde:	7e c0       	rjmp	.+252    	; 0x2ddc <__divsf3+0x144>
    2ce0:	39 89       	ldd	r19, Y+17	; 0x11
    2ce2:	32 30       	cpi	r19, 0x02	; 2
    2ce4:	10 f4       	brcc	.+4      	; 0x2cea <__divsf3+0x52>
    2ce6:	b8 01       	movw	r22, r16
    2ce8:	7c c0       	rjmp	.+248    	; 0x2de2 <__divsf3+0x14a>
    2cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cec:	9a 89       	ldd	r25, Y+18	; 0x12
    2cee:	89 27       	eor	r24, r25
    2cf0:	8a 87       	std	Y+10, r24	; 0x0a
    2cf2:	24 30       	cpi	r18, 0x04	; 4
    2cf4:	11 f0       	breq	.+4      	; 0x2cfa <__divsf3+0x62>
    2cf6:	22 30       	cpi	r18, 0x02	; 2
    2cf8:	31 f4       	brne	.+12     	; 0x2d06 <__divsf3+0x6e>
    2cfa:	23 17       	cp	r18, r19
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <__divsf3+0x68>
    2cfe:	6e c0       	rjmp	.+220    	; 0x2ddc <__divsf3+0x144>
    2d00:	61 e2       	ldi	r22, 0x21	; 33
    2d02:	71 e0       	ldi	r23, 0x01	; 1
    2d04:	6e c0       	rjmp	.+220    	; 0x2de2 <__divsf3+0x14a>
    2d06:	34 30       	cpi	r19, 0x04	; 4
    2d08:	39 f4       	brne	.+14     	; 0x2d18 <__divsf3+0x80>
    2d0a:	1d 86       	std	Y+13, r1	; 0x0d
    2d0c:	1e 86       	std	Y+14, r1	; 0x0e
    2d0e:	1f 86       	std	Y+15, r1	; 0x0f
    2d10:	18 8a       	std	Y+16, r1	; 0x10
    2d12:	1c 86       	std	Y+12, r1	; 0x0c
    2d14:	1b 86       	std	Y+11, r1	; 0x0b
    2d16:	04 c0       	rjmp	.+8      	; 0x2d20 <__divsf3+0x88>
    2d18:	32 30       	cpi	r19, 0x02	; 2
    2d1a:	21 f4       	brne	.+8      	; 0x2d24 <__divsf3+0x8c>
    2d1c:	84 e0       	ldi	r24, 0x04	; 4
    2d1e:	89 87       	std	Y+9, r24	; 0x09
    2d20:	b7 01       	movw	r22, r14
    2d22:	5f c0       	rjmp	.+190    	; 0x2de2 <__divsf3+0x14a>
    2d24:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d26:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d28:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2c:	28 1b       	sub	r18, r24
    2d2e:	39 0b       	sbc	r19, r25
    2d30:	3c 87       	std	Y+12, r19	; 0x0c
    2d32:	2b 87       	std	Y+11, r18	; 0x0b
    2d34:	ed 84       	ldd	r14, Y+13	; 0x0d
    2d36:	fe 84       	ldd	r15, Y+14	; 0x0e
    2d38:	0f 85       	ldd	r16, Y+15	; 0x0f
    2d3a:	18 89       	ldd	r17, Y+16	; 0x10
    2d3c:	ad 88       	ldd	r10, Y+21	; 0x15
    2d3e:	be 88       	ldd	r11, Y+22	; 0x16
    2d40:	cf 88       	ldd	r12, Y+23	; 0x17
    2d42:	d8 8c       	ldd	r13, Y+24	; 0x18
    2d44:	ea 14       	cp	r14, r10
    2d46:	fb 04       	cpc	r15, r11
    2d48:	0c 05       	cpc	r16, r12
    2d4a:	1d 05       	cpc	r17, r13
    2d4c:	40 f4       	brcc	.+16     	; 0x2d5e <__divsf3+0xc6>
    2d4e:	ee 0c       	add	r14, r14
    2d50:	ff 1c       	adc	r15, r15
    2d52:	00 1f       	adc	r16, r16
    2d54:	11 1f       	adc	r17, r17
    2d56:	21 50       	subi	r18, 0x01	; 1
    2d58:	30 40       	sbci	r19, 0x00	; 0
    2d5a:	3c 87       	std	Y+12, r19	; 0x0c
    2d5c:	2b 87       	std	Y+11, r18	; 0x0b
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e0       	ldi	r26, 0x00	; 0
    2d6c:	b0 e4       	ldi	r27, 0x40	; 64
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	ea 14       	cp	r14, r10
    2d74:	fb 04       	cpc	r15, r11
    2d76:	0c 05       	cpc	r16, r12
    2d78:	1d 05       	cpc	r17, r13
    2d7a:	40 f0       	brcs	.+16     	; 0x2d8c <__divsf3+0xf4>
    2d7c:	28 2b       	or	r18, r24
    2d7e:	39 2b       	or	r19, r25
    2d80:	4a 2b       	or	r20, r26
    2d82:	5b 2b       	or	r21, r27
    2d84:	ea 18       	sub	r14, r10
    2d86:	fb 08       	sbc	r15, r11
    2d88:	0c 09       	sbc	r16, r12
    2d8a:	1d 09       	sbc	r17, r13
    2d8c:	b6 95       	lsr	r27
    2d8e:	a7 95       	ror	r26
    2d90:	97 95       	ror	r25
    2d92:	87 95       	ror	r24
    2d94:	ee 0c       	add	r14, r14
    2d96:	ff 1c       	adc	r15, r15
    2d98:	00 1f       	adc	r16, r16
    2d9a:	11 1f       	adc	r17, r17
    2d9c:	6f 5f       	subi	r22, 0xFF	; 255
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2da0:	6f 31       	cpi	r22, 0x1F	; 31
    2da2:	71 05       	cpc	r23, r1
    2da4:	31 f7       	brne	.-52     	; 0x2d72 <__divsf3+0xda>
    2da6:	da 01       	movw	r26, r20
    2da8:	c9 01       	movw	r24, r18
    2daa:	8f 77       	andi	r24, 0x7F	; 127
    2dac:	90 70       	andi	r25, 0x00	; 0
    2dae:	a0 70       	andi	r26, 0x00	; 0
    2db0:	b0 70       	andi	r27, 0x00	; 0
    2db2:	80 34       	cpi	r24, 0x40	; 64
    2db4:	91 05       	cpc	r25, r1
    2db6:	a1 05       	cpc	r26, r1
    2db8:	b1 05       	cpc	r27, r1
    2dba:	61 f4       	brne	.+24     	; 0x2dd4 <__divsf3+0x13c>
    2dbc:	27 fd       	sbrc	r18, 7
    2dbe:	0a c0       	rjmp	.+20     	; 0x2dd4 <__divsf3+0x13c>
    2dc0:	e1 14       	cp	r14, r1
    2dc2:	f1 04       	cpc	r15, r1
    2dc4:	01 05       	cpc	r16, r1
    2dc6:	11 05       	cpc	r17, r1
    2dc8:	29 f0       	breq	.+10     	; 0x2dd4 <__divsf3+0x13c>
    2dca:	20 5c       	subi	r18, 0xC0	; 192
    2dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dce:	4f 4f       	sbci	r20, 0xFF	; 255
    2dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd2:	20 78       	andi	r18, 0x80	; 128
    2dd4:	2d 87       	std	Y+13, r18	; 0x0d
    2dd6:	3e 87       	std	Y+14, r19	; 0x0e
    2dd8:	4f 87       	std	Y+15, r20	; 0x0f
    2dda:	58 8b       	std	Y+16, r21	; 0x10
    2ddc:	be 01       	movw	r22, r28
    2dde:	67 5f       	subi	r22, 0xF7	; 247
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	cb 01       	movw	r24, r22
    2de4:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__pack_f>
    2de8:	68 96       	adiw	r28, 0x18	; 24
    2dea:	ea e0       	ldi	r30, 0x0A	; 10
    2dec:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__+0x10>

00002df0 <__gtsf2>:
    2df0:	a8 e1       	ldi	r26, 0x18	; 24
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ee ef       	ldi	r30, 0xFE	; 254
    2df6:	f6 e1       	ldi	r31, 0x16	; 22
    2df8:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__prologue_saves__+0x18>
    2dfc:	69 83       	std	Y+1, r22	; 0x01
    2dfe:	7a 83       	std	Y+2, r23	; 0x02
    2e00:	8b 83       	std	Y+3, r24	; 0x03
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	2d 83       	std	Y+5, r18	; 0x05
    2e06:	3e 83       	std	Y+6, r19	; 0x06
    2e08:	4f 83       	std	Y+7, r20	; 0x07
    2e0a:	58 87       	std	Y+8, r21	; 0x08
    2e0c:	89 e0       	ldi	r24, 0x09	; 9
    2e0e:	e8 2e       	mov	r14, r24
    2e10:	f1 2c       	mov	r15, r1
    2e12:	ec 0e       	add	r14, r28
    2e14:	fd 1e       	adc	r15, r29
    2e16:	ce 01       	movw	r24, r28
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	b7 01       	movw	r22, r14
    2e1c:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2e20:	8e 01       	movw	r16, r28
    2e22:	0f 5e       	subi	r16, 0xEF	; 239
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	ce 01       	movw	r24, r28
    2e28:	05 96       	adiw	r24, 0x05	; 5
    2e2a:	b8 01       	movw	r22, r16
    2e2c:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2e30:	89 85       	ldd	r24, Y+9	; 0x09
    2e32:	82 30       	cpi	r24, 0x02	; 2
    2e34:	40 f0       	brcs	.+16     	; 0x2e46 <__gtsf2+0x56>
    2e36:	89 89       	ldd	r24, Y+17	; 0x11
    2e38:	82 30       	cpi	r24, 0x02	; 2
    2e3a:	28 f0       	brcs	.+10     	; 0x2e46 <__gtsf2+0x56>
    2e3c:	c7 01       	movw	r24, r14
    2e3e:	b8 01       	movw	r22, r16
    2e40:	0e 94 29 19 	call	0x3252	; 0x3252 <__fpcmp_parts_f>
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <__gtsf2+0x58>
    2e46:	8f ef       	ldi	r24, 0xFF	; 255
    2e48:	68 96       	adiw	r28, 0x18	; 24
    2e4a:	e6 e0       	ldi	r30, 0x06	; 6
    2e4c:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__epilogue_restores__+0x18>

00002e50 <__gesf2>:
    2e50:	a8 e1       	ldi	r26, 0x18	; 24
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	ee e2       	ldi	r30, 0x2E	; 46
    2e56:	f7 e1       	ldi	r31, 0x17	; 23
    2e58:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__prologue_saves__+0x18>
    2e5c:	69 83       	std	Y+1, r22	; 0x01
    2e5e:	7a 83       	std	Y+2, r23	; 0x02
    2e60:	8b 83       	std	Y+3, r24	; 0x03
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	2d 83       	std	Y+5, r18	; 0x05
    2e66:	3e 83       	std	Y+6, r19	; 0x06
    2e68:	4f 83       	std	Y+7, r20	; 0x07
    2e6a:	58 87       	std	Y+8, r21	; 0x08
    2e6c:	89 e0       	ldi	r24, 0x09	; 9
    2e6e:	e8 2e       	mov	r14, r24
    2e70:	f1 2c       	mov	r15, r1
    2e72:	ec 0e       	add	r14, r28
    2e74:	fd 1e       	adc	r15, r29
    2e76:	ce 01       	movw	r24, r28
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2e80:	8e 01       	movw	r16, r28
    2e82:	0f 5e       	subi	r16, 0xEF	; 239
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	ce 01       	movw	r24, r28
    2e88:	05 96       	adiw	r24, 0x05	; 5
    2e8a:	b8 01       	movw	r22, r16
    2e8c:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2e90:	89 85       	ldd	r24, Y+9	; 0x09
    2e92:	82 30       	cpi	r24, 0x02	; 2
    2e94:	40 f0       	brcs	.+16     	; 0x2ea6 <__gesf2+0x56>
    2e96:	89 89       	ldd	r24, Y+17	; 0x11
    2e98:	82 30       	cpi	r24, 0x02	; 2
    2e9a:	28 f0       	brcs	.+10     	; 0x2ea6 <__gesf2+0x56>
    2e9c:	c7 01       	movw	r24, r14
    2e9e:	b8 01       	movw	r22, r16
    2ea0:	0e 94 29 19 	call	0x3252	; 0x3252 <__fpcmp_parts_f>
    2ea4:	01 c0       	rjmp	.+2      	; 0x2ea8 <__gesf2+0x58>
    2ea6:	8f ef       	ldi	r24, 0xFF	; 255
    2ea8:	68 96       	adiw	r28, 0x18	; 24
    2eaa:	e6 e0       	ldi	r30, 0x06	; 6
    2eac:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__epilogue_restores__+0x18>

00002eb0 <__ltsf2>:
    2eb0:	a8 e1       	ldi	r26, 0x18	; 24
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	ee e5       	ldi	r30, 0x5E	; 94
    2eb6:	f7 e1       	ldi	r31, 0x17	; 23
    2eb8:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__prologue_saves__+0x18>
    2ebc:	69 83       	std	Y+1, r22	; 0x01
    2ebe:	7a 83       	std	Y+2, r23	; 0x02
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
    2ec2:	9c 83       	std	Y+4, r25	; 0x04
    2ec4:	2d 83       	std	Y+5, r18	; 0x05
    2ec6:	3e 83       	std	Y+6, r19	; 0x06
    2ec8:	4f 83       	std	Y+7, r20	; 0x07
    2eca:	58 87       	std	Y+8, r21	; 0x08
    2ecc:	89 e0       	ldi	r24, 0x09	; 9
    2ece:	e8 2e       	mov	r14, r24
    2ed0:	f1 2c       	mov	r15, r1
    2ed2:	ec 0e       	add	r14, r28
    2ed4:	fd 1e       	adc	r15, r29
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	01 96       	adiw	r24, 0x01	; 1
    2eda:	b7 01       	movw	r22, r14
    2edc:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	0f 5e       	subi	r16, 0xEF	; 239
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	05 96       	adiw	r24, 0x05	; 5
    2eea:	b8 01       	movw	r22, r16
    2eec:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	82 30       	cpi	r24, 0x02	; 2
    2ef4:	40 f0       	brcs	.+16     	; 0x2f06 <__ltsf2+0x56>
    2ef6:	89 89       	ldd	r24, Y+17	; 0x11
    2ef8:	82 30       	cpi	r24, 0x02	; 2
    2efa:	28 f0       	brcs	.+10     	; 0x2f06 <__ltsf2+0x56>
    2efc:	c7 01       	movw	r24, r14
    2efe:	b8 01       	movw	r22, r16
    2f00:	0e 94 29 19 	call	0x3252	; 0x3252 <__fpcmp_parts_f>
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <__ltsf2+0x58>
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	68 96       	adiw	r28, 0x18	; 24
    2f0a:	e6 e0       	ldi	r30, 0x06	; 6
    2f0c:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__epilogue_restores__+0x18>

00002f10 <__fixsfsi>:
    2f10:	ac e0       	ldi	r26, 0x0C	; 12
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ee e8       	ldi	r30, 0x8E	; 142
    2f16:	f7 e1       	ldi	r31, 0x17	; 23
    2f18:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__prologue_saves__+0x20>
    2f1c:	69 83       	std	Y+1, r22	; 0x01
    2f1e:	7a 83       	std	Y+2, r23	; 0x02
    2f20:	8b 83       	std	Y+3, r24	; 0x03
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	ce 01       	movw	r24, r28
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	be 01       	movw	r22, r28
    2f2a:	6b 5f       	subi	r22, 0xFB	; 251
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	0e 94 b1 18 	call	0x3162	; 0x3162 <__unpack_f>
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	82 30       	cpi	r24, 0x02	; 2
    2f36:	61 f1       	breq	.+88     	; 0x2f90 <__fixsfsi+0x80>
    2f38:	82 30       	cpi	r24, 0x02	; 2
    2f3a:	50 f1       	brcs	.+84     	; 0x2f90 <__fixsfsi+0x80>
    2f3c:	84 30       	cpi	r24, 0x04	; 4
    2f3e:	21 f4       	brne	.+8      	; 0x2f48 <__fixsfsi+0x38>
    2f40:	8e 81       	ldd	r24, Y+6	; 0x06
    2f42:	88 23       	and	r24, r24
    2f44:	51 f1       	breq	.+84     	; 0x2f9a <__fixsfsi+0x8a>
    2f46:	2e c0       	rjmp	.+92     	; 0x2fa4 <__fixsfsi+0x94>
    2f48:	2f 81       	ldd	r18, Y+7	; 0x07
    2f4a:	38 85       	ldd	r19, Y+8	; 0x08
    2f4c:	37 fd       	sbrc	r19, 7
    2f4e:	20 c0       	rjmp	.+64     	; 0x2f90 <__fixsfsi+0x80>
    2f50:	6e 81       	ldd	r22, Y+6	; 0x06
    2f52:	2f 31       	cpi	r18, 0x1F	; 31
    2f54:	31 05       	cpc	r19, r1
    2f56:	1c f0       	brlt	.+6      	; 0x2f5e <__fixsfsi+0x4e>
    2f58:	66 23       	and	r22, r22
    2f5a:	f9 f0       	breq	.+62     	; 0x2f9a <__fixsfsi+0x8a>
    2f5c:	23 c0       	rjmp	.+70     	; 0x2fa4 <__fixsfsi+0x94>
    2f5e:	8e e1       	ldi	r24, 0x1E	; 30
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	82 1b       	sub	r24, r18
    2f64:	93 0b       	sbc	r25, r19
    2f66:	29 85       	ldd	r18, Y+9	; 0x09
    2f68:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f6e:	04 c0       	rjmp	.+8      	; 0x2f78 <__fixsfsi+0x68>
    2f70:	56 95       	lsr	r21
    2f72:	47 95       	ror	r20
    2f74:	37 95       	ror	r19
    2f76:	27 95       	ror	r18
    2f78:	8a 95       	dec	r24
    2f7a:	d2 f7       	brpl	.-12     	; 0x2f70 <__fixsfsi+0x60>
    2f7c:	66 23       	and	r22, r22
    2f7e:	b1 f0       	breq	.+44     	; 0x2fac <__fixsfsi+0x9c>
    2f80:	50 95       	com	r21
    2f82:	40 95       	com	r20
    2f84:	30 95       	com	r19
    2f86:	21 95       	neg	r18
    2f88:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8a:	4f 4f       	sbci	r20, 0xFF	; 255
    2f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8e:	0e c0       	rjmp	.+28     	; 0x2fac <__fixsfsi+0x9c>
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	50 e0       	ldi	r21, 0x00	; 0
    2f98:	09 c0       	rjmp	.+18     	; 0x2fac <__fixsfsi+0x9c>
    2f9a:	2f ef       	ldi	r18, 0xFF	; 255
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f ef       	ldi	r20, 0xFF	; 255
    2fa0:	5f e7       	ldi	r21, 0x7F	; 127
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <__fixsfsi+0x9c>
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	50 e8       	ldi	r21, 0x80	; 128
    2fac:	b9 01       	movw	r22, r18
    2fae:	ca 01       	movw	r24, r20
    2fb0:	2c 96       	adiw	r28, 0x0c	; 12
    2fb2:	e2 e0       	ldi	r30, 0x02	; 2
    2fb4:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__epilogue_restores__+0x20>

00002fb8 <__pack_f>:
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	e4 80       	ldd	r14, Z+4	; 0x04
    2fc6:	f5 80       	ldd	r15, Z+5	; 0x05
    2fc8:	06 81       	ldd	r16, Z+6	; 0x06
    2fca:	17 81       	ldd	r17, Z+7	; 0x07
    2fcc:	d1 80       	ldd	r13, Z+1	; 0x01
    2fce:	80 81       	ld	r24, Z
    2fd0:	82 30       	cpi	r24, 0x02	; 2
    2fd2:	48 f4       	brcc	.+18     	; 0x2fe6 <__pack_f+0x2e>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 e1       	ldi	r26, 0x10	; 16
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e8 2a       	or	r14, r24
    2fde:	f9 2a       	or	r15, r25
    2fe0:	0a 2b       	or	r16, r26
    2fe2:	1b 2b       	or	r17, r27
    2fe4:	a5 c0       	rjmp	.+330    	; 0x3130 <__pack_f+0x178>
    2fe6:	84 30       	cpi	r24, 0x04	; 4
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <__pack_f+0x34>
    2fea:	9f c0       	rjmp	.+318    	; 0x312a <__pack_f+0x172>
    2fec:	82 30       	cpi	r24, 0x02	; 2
    2fee:	21 f4       	brne	.+8      	; 0x2ff8 <__pack_f+0x40>
    2ff0:	ee 24       	eor	r14, r14
    2ff2:	ff 24       	eor	r15, r15
    2ff4:	87 01       	movw	r16, r14
    2ff6:	05 c0       	rjmp	.+10     	; 0x3002 <__pack_f+0x4a>
    2ff8:	e1 14       	cp	r14, r1
    2ffa:	f1 04       	cpc	r15, r1
    2ffc:	01 05       	cpc	r16, r1
    2ffe:	11 05       	cpc	r17, r1
    3000:	19 f4       	brne	.+6      	; 0x3008 <__pack_f+0x50>
    3002:	e0 e0       	ldi	r30, 0x00	; 0
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	96 c0       	rjmp	.+300    	; 0x3134 <__pack_f+0x17c>
    3008:	62 81       	ldd	r22, Z+2	; 0x02
    300a:	73 81       	ldd	r23, Z+3	; 0x03
    300c:	9f ef       	ldi	r25, 0xFF	; 255
    300e:	62 38       	cpi	r22, 0x82	; 130
    3010:	79 07       	cpc	r23, r25
    3012:	0c f0       	brlt	.+2      	; 0x3016 <__pack_f+0x5e>
    3014:	5b c0       	rjmp	.+182    	; 0x30cc <__pack_f+0x114>
    3016:	22 e8       	ldi	r18, 0x82	; 130
    3018:	3f ef       	ldi	r19, 0xFF	; 255
    301a:	26 1b       	sub	r18, r22
    301c:	37 0b       	sbc	r19, r23
    301e:	2a 31       	cpi	r18, 0x1A	; 26
    3020:	31 05       	cpc	r19, r1
    3022:	2c f0       	brlt	.+10     	; 0x302e <__pack_f+0x76>
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	2a c0       	rjmp	.+84     	; 0x3082 <__pack_f+0xca>
    302e:	b8 01       	movw	r22, r16
    3030:	a7 01       	movw	r20, r14
    3032:	02 2e       	mov	r0, r18
    3034:	04 c0       	rjmp	.+8      	; 0x303e <__pack_f+0x86>
    3036:	76 95       	lsr	r23
    3038:	67 95       	ror	r22
    303a:	57 95       	ror	r21
    303c:	47 95       	ror	r20
    303e:	0a 94       	dec	r0
    3040:	d2 f7       	brpl	.-12     	; 0x3036 <__pack_f+0x7e>
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a0 e0       	ldi	r26, 0x00	; 0
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	04 c0       	rjmp	.+8      	; 0x3054 <__pack_f+0x9c>
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	aa 1f       	adc	r26, r26
    3052:	bb 1f       	adc	r27, r27
    3054:	2a 95       	dec	r18
    3056:	d2 f7       	brpl	.-12     	; 0x304c <__pack_f+0x94>
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	a1 09       	sbc	r26, r1
    305c:	b1 09       	sbc	r27, r1
    305e:	8e 21       	and	r24, r14
    3060:	9f 21       	and	r25, r15
    3062:	a0 23       	and	r26, r16
    3064:	b1 23       	and	r27, r17
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	a1 05       	cpc	r26, r1
    306a:	b1 05       	cpc	r27, r1
    306c:	21 f0       	breq	.+8      	; 0x3076 <__pack_f+0xbe>
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	a0 e0       	ldi	r26, 0x00	; 0
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	9a 01       	movw	r18, r20
    3078:	ab 01       	movw	r20, r22
    307a:	28 2b       	or	r18, r24
    307c:	39 2b       	or	r19, r25
    307e:	4a 2b       	or	r20, r26
    3080:	5b 2b       	or	r21, r27
    3082:	da 01       	movw	r26, r20
    3084:	c9 01       	movw	r24, r18
    3086:	8f 77       	andi	r24, 0x7F	; 127
    3088:	90 70       	andi	r25, 0x00	; 0
    308a:	a0 70       	andi	r26, 0x00	; 0
    308c:	b0 70       	andi	r27, 0x00	; 0
    308e:	80 34       	cpi	r24, 0x40	; 64
    3090:	91 05       	cpc	r25, r1
    3092:	a1 05       	cpc	r26, r1
    3094:	b1 05       	cpc	r27, r1
    3096:	39 f4       	brne	.+14     	; 0x30a6 <__pack_f+0xee>
    3098:	27 ff       	sbrs	r18, 7
    309a:	09 c0       	rjmp	.+18     	; 0x30ae <__pack_f+0xf6>
    309c:	20 5c       	subi	r18, 0xC0	; 192
    309e:	3f 4f       	sbci	r19, 0xFF	; 255
    30a0:	4f 4f       	sbci	r20, 0xFF	; 255
    30a2:	5f 4f       	sbci	r21, 0xFF	; 255
    30a4:	04 c0       	rjmp	.+8      	; 0x30ae <__pack_f+0xf6>
    30a6:	21 5c       	subi	r18, 0xC1	; 193
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	4f 4f       	sbci	r20, 0xFF	; 255
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255
    30ae:	e0 e0       	ldi	r30, 0x00	; 0
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	20 30       	cpi	r18, 0x00	; 0
    30b4:	a0 e0       	ldi	r26, 0x00	; 0
    30b6:	3a 07       	cpc	r19, r26
    30b8:	a0 e0       	ldi	r26, 0x00	; 0
    30ba:	4a 07       	cpc	r20, r26
    30bc:	a0 e4       	ldi	r26, 0x40	; 64
    30be:	5a 07       	cpc	r21, r26
    30c0:	10 f0       	brcs	.+4      	; 0x30c6 <__pack_f+0x10e>
    30c2:	e1 e0       	ldi	r30, 0x01	; 1
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	79 01       	movw	r14, r18
    30c8:	8a 01       	movw	r16, r20
    30ca:	27 c0       	rjmp	.+78     	; 0x311a <__pack_f+0x162>
    30cc:	60 38       	cpi	r22, 0x80	; 128
    30ce:	71 05       	cpc	r23, r1
    30d0:	64 f5       	brge	.+88     	; 0x312a <__pack_f+0x172>
    30d2:	fb 01       	movw	r30, r22
    30d4:	e1 58       	subi	r30, 0x81	; 129
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	d8 01       	movw	r26, r16
    30da:	c7 01       	movw	r24, r14
    30dc:	8f 77       	andi	r24, 0x7F	; 127
    30de:	90 70       	andi	r25, 0x00	; 0
    30e0:	a0 70       	andi	r26, 0x00	; 0
    30e2:	b0 70       	andi	r27, 0x00	; 0
    30e4:	80 34       	cpi	r24, 0x40	; 64
    30e6:	91 05       	cpc	r25, r1
    30e8:	a1 05       	cpc	r26, r1
    30ea:	b1 05       	cpc	r27, r1
    30ec:	39 f4       	brne	.+14     	; 0x30fc <__pack_f+0x144>
    30ee:	e7 fe       	sbrs	r14, 7
    30f0:	0d c0       	rjmp	.+26     	; 0x310c <__pack_f+0x154>
    30f2:	80 e4       	ldi	r24, 0x40	; 64
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e0       	ldi	r26, 0x00	; 0
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <__pack_f+0x14c>
    30fc:	8f e3       	ldi	r24, 0x3F	; 63
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	a0 e0       	ldi	r26, 0x00	; 0
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e8 0e       	add	r14, r24
    3106:	f9 1e       	adc	r15, r25
    3108:	0a 1f       	adc	r16, r26
    310a:	1b 1f       	adc	r17, r27
    310c:	17 ff       	sbrs	r17, 7
    310e:	05 c0       	rjmp	.+10     	; 0x311a <__pack_f+0x162>
    3110:	16 95       	lsr	r17
    3112:	07 95       	ror	r16
    3114:	f7 94       	ror	r15
    3116:	e7 94       	ror	r14
    3118:	31 96       	adiw	r30, 0x01	; 1
    311a:	87 e0       	ldi	r24, 0x07	; 7
    311c:	16 95       	lsr	r17
    311e:	07 95       	ror	r16
    3120:	f7 94       	ror	r15
    3122:	e7 94       	ror	r14
    3124:	8a 95       	dec	r24
    3126:	d1 f7       	brne	.-12     	; 0x311c <__pack_f+0x164>
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <__pack_f+0x17c>
    312a:	ee 24       	eor	r14, r14
    312c:	ff 24       	eor	r15, r15
    312e:	87 01       	movw	r16, r14
    3130:	ef ef       	ldi	r30, 0xFF	; 255
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	6e 2f       	mov	r22, r30
    3136:	67 95       	ror	r22
    3138:	66 27       	eor	r22, r22
    313a:	67 95       	ror	r22
    313c:	90 2f       	mov	r25, r16
    313e:	9f 77       	andi	r25, 0x7F	; 127
    3140:	d7 94       	ror	r13
    3142:	dd 24       	eor	r13, r13
    3144:	d7 94       	ror	r13
    3146:	8e 2f       	mov	r24, r30
    3148:	86 95       	lsr	r24
    314a:	49 2f       	mov	r20, r25
    314c:	46 2b       	or	r20, r22
    314e:	58 2f       	mov	r21, r24
    3150:	5d 29       	or	r21, r13
    3152:	b7 01       	movw	r22, r14
    3154:	ca 01       	movw	r24, r20
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	ff 90       	pop	r15
    315c:	ef 90       	pop	r14
    315e:	df 90       	pop	r13
    3160:	08 95       	ret

00003162 <__unpack_f>:
    3162:	fc 01       	movw	r30, r24
    3164:	db 01       	movw	r26, r22
    3166:	40 81       	ld	r20, Z
    3168:	51 81       	ldd	r21, Z+1	; 0x01
    316a:	22 81       	ldd	r18, Z+2	; 0x02
    316c:	62 2f       	mov	r22, r18
    316e:	6f 77       	andi	r22, 0x7F	; 127
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	22 1f       	adc	r18, r18
    3174:	22 27       	eor	r18, r18
    3176:	22 1f       	adc	r18, r18
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	89 2f       	mov	r24, r25
    317c:	88 0f       	add	r24, r24
    317e:	82 2b       	or	r24, r18
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	99 1f       	adc	r25, r25
    3186:	99 27       	eor	r25, r25
    3188:	99 1f       	adc	r25, r25
    318a:	11 96       	adiw	r26, 0x01	; 1
    318c:	9c 93       	st	X, r25
    318e:	11 97       	sbiw	r26, 0x01	; 1
    3190:	21 15       	cp	r18, r1
    3192:	31 05       	cpc	r19, r1
    3194:	a9 f5       	brne	.+106    	; 0x3200 <__unpack_f+0x9e>
    3196:	41 15       	cp	r20, r1
    3198:	51 05       	cpc	r21, r1
    319a:	61 05       	cpc	r22, r1
    319c:	71 05       	cpc	r23, r1
    319e:	11 f4       	brne	.+4      	; 0x31a4 <__unpack_f+0x42>
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	37 c0       	rjmp	.+110    	; 0x3212 <__unpack_f+0xb0>
    31a4:	82 e8       	ldi	r24, 0x82	; 130
    31a6:	9f ef       	ldi	r25, 0xFF	; 255
    31a8:	13 96       	adiw	r26, 0x03	; 3
    31aa:	9c 93       	st	X, r25
    31ac:	8e 93       	st	-X, r24
    31ae:	12 97       	sbiw	r26, 0x02	; 2
    31b0:	9a 01       	movw	r18, r20
    31b2:	ab 01       	movw	r20, r22
    31b4:	67 e0       	ldi	r22, 0x07	; 7
    31b6:	22 0f       	add	r18, r18
    31b8:	33 1f       	adc	r19, r19
    31ba:	44 1f       	adc	r20, r20
    31bc:	55 1f       	adc	r21, r21
    31be:	6a 95       	dec	r22
    31c0:	d1 f7       	brne	.-12     	; 0x31b6 <__unpack_f+0x54>
    31c2:	83 e0       	ldi	r24, 0x03	; 3
    31c4:	8c 93       	st	X, r24
    31c6:	0d c0       	rjmp	.+26     	; 0x31e2 <__unpack_f+0x80>
    31c8:	22 0f       	add	r18, r18
    31ca:	33 1f       	adc	r19, r19
    31cc:	44 1f       	adc	r20, r20
    31ce:	55 1f       	adc	r21, r21
    31d0:	12 96       	adiw	r26, 0x02	; 2
    31d2:	8d 91       	ld	r24, X+
    31d4:	9c 91       	ld	r25, X
    31d6:	13 97       	sbiw	r26, 0x03	; 3
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	13 96       	adiw	r26, 0x03	; 3
    31dc:	9c 93       	st	X, r25
    31de:	8e 93       	st	-X, r24
    31e0:	12 97       	sbiw	r26, 0x02	; 2
    31e2:	20 30       	cpi	r18, 0x00	; 0
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	38 07       	cpc	r19, r24
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	48 07       	cpc	r20, r24
    31ec:	80 e4       	ldi	r24, 0x40	; 64
    31ee:	58 07       	cpc	r21, r24
    31f0:	58 f3       	brcs	.-42     	; 0x31c8 <__unpack_f+0x66>
    31f2:	14 96       	adiw	r26, 0x04	; 4
    31f4:	2d 93       	st	X+, r18
    31f6:	3d 93       	st	X+, r19
    31f8:	4d 93       	st	X+, r20
    31fa:	5c 93       	st	X, r21
    31fc:	17 97       	sbiw	r26, 0x07	; 7
    31fe:	08 95       	ret
    3200:	2f 3f       	cpi	r18, 0xFF	; 255
    3202:	31 05       	cpc	r19, r1
    3204:	79 f4       	brne	.+30     	; 0x3224 <__unpack_f+0xc2>
    3206:	41 15       	cp	r20, r1
    3208:	51 05       	cpc	r21, r1
    320a:	61 05       	cpc	r22, r1
    320c:	71 05       	cpc	r23, r1
    320e:	19 f4       	brne	.+6      	; 0x3216 <__unpack_f+0xb4>
    3210:	84 e0       	ldi	r24, 0x04	; 4
    3212:	8c 93       	st	X, r24
    3214:	08 95       	ret
    3216:	64 ff       	sbrs	r22, 4
    3218:	03 c0       	rjmp	.+6      	; 0x3220 <__unpack_f+0xbe>
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	8c 93       	st	X, r24
    321e:	12 c0       	rjmp	.+36     	; 0x3244 <__unpack_f+0xe2>
    3220:	1c 92       	st	X, r1
    3222:	10 c0       	rjmp	.+32     	; 0x3244 <__unpack_f+0xe2>
    3224:	2f 57       	subi	r18, 0x7F	; 127
    3226:	30 40       	sbci	r19, 0x00	; 0
    3228:	13 96       	adiw	r26, 0x03	; 3
    322a:	3c 93       	st	X, r19
    322c:	2e 93       	st	-X, r18
    322e:	12 97       	sbiw	r26, 0x02	; 2
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	8c 93       	st	X, r24
    3234:	87 e0       	ldi	r24, 0x07	; 7
    3236:	44 0f       	add	r20, r20
    3238:	55 1f       	adc	r21, r21
    323a:	66 1f       	adc	r22, r22
    323c:	77 1f       	adc	r23, r23
    323e:	8a 95       	dec	r24
    3240:	d1 f7       	brne	.-12     	; 0x3236 <__unpack_f+0xd4>
    3242:	70 64       	ori	r23, 0x40	; 64
    3244:	14 96       	adiw	r26, 0x04	; 4
    3246:	4d 93       	st	X+, r20
    3248:	5d 93       	st	X+, r21
    324a:	6d 93       	st	X+, r22
    324c:	7c 93       	st	X, r23
    324e:	17 97       	sbiw	r26, 0x07	; 7
    3250:	08 95       	ret

00003252 <__fpcmp_parts_f>:
    3252:	1f 93       	push	r17
    3254:	dc 01       	movw	r26, r24
    3256:	fb 01       	movw	r30, r22
    3258:	9c 91       	ld	r25, X
    325a:	92 30       	cpi	r25, 0x02	; 2
    325c:	08 f4       	brcc	.+2      	; 0x3260 <__fpcmp_parts_f+0xe>
    325e:	47 c0       	rjmp	.+142    	; 0x32ee <__fpcmp_parts_f+0x9c>
    3260:	80 81       	ld	r24, Z
    3262:	82 30       	cpi	r24, 0x02	; 2
    3264:	08 f4       	brcc	.+2      	; 0x3268 <__fpcmp_parts_f+0x16>
    3266:	43 c0       	rjmp	.+134    	; 0x32ee <__fpcmp_parts_f+0x9c>
    3268:	94 30       	cpi	r25, 0x04	; 4
    326a:	51 f4       	brne	.+20     	; 0x3280 <__fpcmp_parts_f+0x2e>
    326c:	11 96       	adiw	r26, 0x01	; 1
    326e:	1c 91       	ld	r17, X
    3270:	84 30       	cpi	r24, 0x04	; 4
    3272:	99 f5       	brne	.+102    	; 0x32da <__fpcmp_parts_f+0x88>
    3274:	81 81       	ldd	r24, Z+1	; 0x01
    3276:	68 2f       	mov	r22, r24
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	61 1b       	sub	r22, r17
    327c:	71 09       	sbc	r23, r1
    327e:	3f c0       	rjmp	.+126    	; 0x32fe <__fpcmp_parts_f+0xac>
    3280:	84 30       	cpi	r24, 0x04	; 4
    3282:	21 f0       	breq	.+8      	; 0x328c <__fpcmp_parts_f+0x3a>
    3284:	92 30       	cpi	r25, 0x02	; 2
    3286:	31 f4       	brne	.+12     	; 0x3294 <__fpcmp_parts_f+0x42>
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	b9 f1       	breq	.+110    	; 0x32fa <__fpcmp_parts_f+0xa8>
    328c:	81 81       	ldd	r24, Z+1	; 0x01
    328e:	88 23       	and	r24, r24
    3290:	89 f1       	breq	.+98     	; 0x32f4 <__fpcmp_parts_f+0xa2>
    3292:	2d c0       	rjmp	.+90     	; 0x32ee <__fpcmp_parts_f+0x9c>
    3294:	11 96       	adiw	r26, 0x01	; 1
    3296:	1c 91       	ld	r17, X
    3298:	11 97       	sbiw	r26, 0x01	; 1
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	f1 f0       	breq	.+60     	; 0x32da <__fpcmp_parts_f+0x88>
    329e:	81 81       	ldd	r24, Z+1	; 0x01
    32a0:	18 17       	cp	r17, r24
    32a2:	d9 f4       	brne	.+54     	; 0x32da <__fpcmp_parts_f+0x88>
    32a4:	12 96       	adiw	r26, 0x02	; 2
    32a6:	2d 91       	ld	r18, X+
    32a8:	3c 91       	ld	r19, X
    32aa:	13 97       	sbiw	r26, 0x03	; 3
    32ac:	82 81       	ldd	r24, Z+2	; 0x02
    32ae:	93 81       	ldd	r25, Z+3	; 0x03
    32b0:	82 17       	cp	r24, r18
    32b2:	93 07       	cpc	r25, r19
    32b4:	94 f0       	brlt	.+36     	; 0x32da <__fpcmp_parts_f+0x88>
    32b6:	28 17       	cp	r18, r24
    32b8:	39 07       	cpc	r19, r25
    32ba:	bc f0       	brlt	.+46     	; 0x32ea <__fpcmp_parts_f+0x98>
    32bc:	14 96       	adiw	r26, 0x04	; 4
    32be:	8d 91       	ld	r24, X+
    32c0:	9d 91       	ld	r25, X+
    32c2:	0d 90       	ld	r0, X+
    32c4:	bc 91       	ld	r27, X
    32c6:	a0 2d       	mov	r26, r0
    32c8:	24 81       	ldd	r18, Z+4	; 0x04
    32ca:	35 81       	ldd	r19, Z+5	; 0x05
    32cc:	46 81       	ldd	r20, Z+6	; 0x06
    32ce:	57 81       	ldd	r21, Z+7	; 0x07
    32d0:	28 17       	cp	r18, r24
    32d2:	39 07       	cpc	r19, r25
    32d4:	4a 07       	cpc	r20, r26
    32d6:	5b 07       	cpc	r21, r27
    32d8:	18 f4       	brcc	.+6      	; 0x32e0 <__fpcmp_parts_f+0x8e>
    32da:	11 23       	and	r17, r17
    32dc:	41 f0       	breq	.+16     	; 0x32ee <__fpcmp_parts_f+0x9c>
    32de:	0a c0       	rjmp	.+20     	; 0x32f4 <__fpcmp_parts_f+0xa2>
    32e0:	82 17       	cp	r24, r18
    32e2:	93 07       	cpc	r25, r19
    32e4:	a4 07       	cpc	r26, r20
    32e6:	b5 07       	cpc	r27, r21
    32e8:	40 f4       	brcc	.+16     	; 0x32fa <__fpcmp_parts_f+0xa8>
    32ea:	11 23       	and	r17, r17
    32ec:	19 f0       	breq	.+6      	; 0x32f4 <__fpcmp_parts_f+0xa2>
    32ee:	61 e0       	ldi	r22, 0x01	; 1
    32f0:	70 e0       	ldi	r23, 0x00	; 0
    32f2:	05 c0       	rjmp	.+10     	; 0x32fe <__fpcmp_parts_f+0xac>
    32f4:	6f ef       	ldi	r22, 0xFF	; 255
    32f6:	7f ef       	ldi	r23, 0xFF	; 255
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <__fpcmp_parts_f+0xac>
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	cb 01       	movw	r24, r22
    3300:	1f 91       	pop	r17
    3302:	08 95       	ret

00003304 <__udivmodqi4>:
    3304:	99 1b       	sub	r25, r25
    3306:	79 e0       	ldi	r23, 0x09	; 9
    3308:	04 c0       	rjmp	.+8      	; 0x3312 <__udivmodqi4_ep>

0000330a <__udivmodqi4_loop>:
    330a:	99 1f       	adc	r25, r25
    330c:	96 17       	cp	r25, r22
    330e:	08 f0       	brcs	.+2      	; 0x3312 <__udivmodqi4_ep>
    3310:	96 1b       	sub	r25, r22

00003312 <__udivmodqi4_ep>:
    3312:	88 1f       	adc	r24, r24
    3314:	7a 95       	dec	r23
    3316:	c9 f7       	brne	.-14     	; 0x330a <__udivmodqi4_loop>
    3318:	80 95       	com	r24
    331a:	08 95       	ret

0000331c <__divmodhi4>:
    331c:	97 fb       	bst	r25, 7
    331e:	09 2e       	mov	r0, r25
    3320:	07 26       	eor	r0, r23
    3322:	0a d0       	rcall	.+20     	; 0x3338 <__divmodhi4_neg1>
    3324:	77 fd       	sbrc	r23, 7
    3326:	04 d0       	rcall	.+8      	; 0x3330 <__divmodhi4_neg2>
    3328:	0c d0       	rcall	.+24     	; 0x3342 <__udivmodhi4>
    332a:	06 d0       	rcall	.+12     	; 0x3338 <__divmodhi4_neg1>
    332c:	00 20       	and	r0, r0
    332e:	1a f4       	brpl	.+6      	; 0x3336 <__divmodhi4_exit>

00003330 <__divmodhi4_neg2>:
    3330:	70 95       	com	r23
    3332:	61 95       	neg	r22
    3334:	7f 4f       	sbci	r23, 0xFF	; 255

00003336 <__divmodhi4_exit>:
    3336:	08 95       	ret

00003338 <__divmodhi4_neg1>:
    3338:	f6 f7       	brtc	.-4      	; 0x3336 <__divmodhi4_exit>
    333a:	90 95       	com	r25
    333c:	81 95       	neg	r24
    333e:	9f 4f       	sbci	r25, 0xFF	; 255
    3340:	08 95       	ret

00003342 <__udivmodhi4>:
    3342:	aa 1b       	sub	r26, r26
    3344:	bb 1b       	sub	r27, r27
    3346:	51 e1       	ldi	r21, 0x11	; 17
    3348:	07 c0       	rjmp	.+14     	; 0x3358 <__udivmodhi4_ep>

0000334a <__udivmodhi4_loop>:
    334a:	aa 1f       	adc	r26, r26
    334c:	bb 1f       	adc	r27, r27
    334e:	a6 17       	cp	r26, r22
    3350:	b7 07       	cpc	r27, r23
    3352:	10 f0       	brcs	.+4      	; 0x3358 <__udivmodhi4_ep>
    3354:	a6 1b       	sub	r26, r22
    3356:	b7 0b       	sbc	r27, r23

00003358 <__udivmodhi4_ep>:
    3358:	88 1f       	adc	r24, r24
    335a:	99 1f       	adc	r25, r25
    335c:	5a 95       	dec	r21
    335e:	a9 f7       	brne	.-22     	; 0x334a <__udivmodhi4_loop>
    3360:	80 95       	com	r24
    3362:	90 95       	com	r25
    3364:	bc 01       	movw	r22, r24
    3366:	cd 01       	movw	r24, r26
    3368:	08 95       	ret

0000336a <__prologue_saves__>:
    336a:	2f 92       	push	r2
    336c:	3f 92       	push	r3
    336e:	4f 92       	push	r4
    3370:	5f 92       	push	r5
    3372:	6f 92       	push	r6
    3374:	7f 92       	push	r7
    3376:	8f 92       	push	r8
    3378:	9f 92       	push	r9
    337a:	af 92       	push	r10
    337c:	bf 92       	push	r11
    337e:	cf 92       	push	r12
    3380:	df 92       	push	r13
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	ca 1b       	sub	r28, r26
    3394:	db 0b       	sbc	r29, r27
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	09 94       	ijmp

000033a2 <__epilogue_restores__>:
    33a2:	2a 88       	ldd	r2, Y+18	; 0x12
    33a4:	39 88       	ldd	r3, Y+17	; 0x11
    33a6:	48 88       	ldd	r4, Y+16	; 0x10
    33a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    33aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    33ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    33ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    33b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    33b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    33b4:	b9 84       	ldd	r11, Y+9	; 0x09
    33b6:	c8 84       	ldd	r12, Y+8	; 0x08
    33b8:	df 80       	ldd	r13, Y+7	; 0x07
    33ba:	ee 80       	ldd	r14, Y+6	; 0x06
    33bc:	fd 80       	ldd	r15, Y+5	; 0x05
    33be:	0c 81       	ldd	r16, Y+4	; 0x04
    33c0:	1b 81       	ldd	r17, Y+3	; 0x03
    33c2:	aa 81       	ldd	r26, Y+2	; 0x02
    33c4:	b9 81       	ldd	r27, Y+1	; 0x01
    33c6:	ce 0f       	add	r28, r30
    33c8:	d1 1d       	adc	r29, r1
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	ed 01       	movw	r28, r26
    33d6:	08 95       	ret

000033d8 <dtostrf>:
    33d8:	ef 92       	push	r14
    33da:	ff 92       	push	r15
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	f2 2f       	mov	r31, r18
    33e2:	f0 2e       	mov	r15, r16
    33e4:	47 fd       	sbrc	r20, 7
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <dtostrf+0x14>
    33e8:	e4 e0       	ldi	r30, 0x04	; 4
    33ea:	01 c0       	rjmp	.+2      	; 0x33ee <dtostrf+0x16>
    33ec:	e4 e1       	ldi	r30, 0x14	; 20
    33ee:	24 2f       	mov	r18, r20
    33f0:	33 27       	eor	r19, r19
    33f2:	27 fd       	sbrc	r18, 7
    33f4:	30 95       	com	r19
    33f6:	37 ff       	sbrs	r19, 7
    33f8:	03 c0       	rjmp	.+6      	; 0x3400 <dtostrf+0x28>
    33fa:	30 95       	com	r19
    33fc:	21 95       	neg	r18
    33fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3400:	4f 2d       	mov	r20, r15
    3402:	51 2f       	mov	r21, r17
    3404:	0f 2f       	mov	r16, r31
    3406:	ee 2e       	mov	r14, r30
    3408:	0e 94 82 1a 	call	0x3504	; 0x3504 <dtoa_prf>
    340c:	8f 2d       	mov	r24, r15
    340e:	91 2f       	mov	r25, r17
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ff 90       	pop	r15
    3416:	ef 90       	pop	r14
    3418:	08 95       	ret

0000341a <atoi>:
    341a:	fc 01       	movw	r30, r24
    341c:	88 27       	eor	r24, r24
    341e:	99 27       	eor	r25, r25
    3420:	e8 94       	clt
    3422:	21 91       	ld	r18, Z+
    3424:	20 32       	cpi	r18, 0x20	; 32
    3426:	e9 f3       	breq	.-6      	; 0x3422 <atoi+0x8>
    3428:	29 30       	cpi	r18, 0x09	; 9
    342a:	10 f0       	brcs	.+4      	; 0x3430 <atoi+0x16>
    342c:	2e 30       	cpi	r18, 0x0E	; 14
    342e:	c8 f3       	brcs	.-14     	; 0x3422 <atoi+0x8>
    3430:	2b 32       	cpi	r18, 0x2B	; 43
    3432:	41 f0       	breq	.+16     	; 0x3444 <atoi+0x2a>
    3434:	2d 32       	cpi	r18, 0x2D	; 45
    3436:	39 f4       	brne	.+14     	; 0x3446 <atoi+0x2c>
    3438:	68 94       	set
    343a:	04 c0       	rjmp	.+8      	; 0x3444 <atoi+0x2a>
    343c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__mulhi_const_10>
    3440:	82 0f       	add	r24, r18
    3442:	91 1d       	adc	r25, r1
    3444:	21 91       	ld	r18, Z+
    3446:	20 53       	subi	r18, 0x30	; 48
    3448:	2a 30       	cpi	r18, 0x0A	; 10
    344a:	c0 f3       	brcs	.-16     	; 0x343c <atoi+0x22>
    344c:	1e f4       	brtc	.+6      	; 0x3454 <atoi+0x3a>
    344e:	90 95       	com	r25
    3450:	81 95       	neg	r24
    3452:	9f 4f       	sbci	r25, 0xFF	; 255
    3454:	08 95       	ret

00003456 <strlen>:
    3456:	fc 01       	movw	r30, r24
    3458:	01 90       	ld	r0, Z+
    345a:	00 20       	and	r0, r0
    345c:	e9 f7       	brne	.-6      	; 0x3458 <strlen+0x2>
    345e:	80 95       	com	r24
    3460:	90 95       	com	r25
    3462:	8e 0f       	add	r24, r30
    3464:	9f 1f       	adc	r25, r31
    3466:	08 95       	ret

00003468 <itoa>:
    3468:	fb 01       	movw	r30, r22
    346a:	9f 01       	movw	r18, r30
    346c:	e8 94       	clt
    346e:	42 30       	cpi	r20, 0x02	; 2
    3470:	c4 f0       	brlt	.+48     	; 0x34a2 <itoa+0x3a>
    3472:	45 32       	cpi	r20, 0x25	; 37
    3474:	b4 f4       	brge	.+44     	; 0x34a2 <itoa+0x3a>
    3476:	4a 30       	cpi	r20, 0x0A	; 10
    3478:	29 f4       	brne	.+10     	; 0x3484 <itoa+0x1c>
    347a:	97 fb       	bst	r25, 7
    347c:	1e f4       	brtc	.+6      	; 0x3484 <itoa+0x1c>
    347e:	90 95       	com	r25
    3480:	81 95       	neg	r24
    3482:	9f 4f       	sbci	r25, 0xFF	; 255
    3484:	64 2f       	mov	r22, r20
    3486:	77 27       	eor	r23, r23
    3488:	0e 94 a1 19 	call	0x3342	; 0x3342 <__udivmodhi4>
    348c:	80 5d       	subi	r24, 0xD0	; 208
    348e:	8a 33       	cpi	r24, 0x3A	; 58
    3490:	0c f0       	brlt	.+2      	; 0x3494 <itoa+0x2c>
    3492:	89 5d       	subi	r24, 0xD9	; 217
    3494:	81 93       	st	Z+, r24
    3496:	cb 01       	movw	r24, r22
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	a1 f7       	brne	.-24     	; 0x3484 <itoa+0x1c>
    349c:	16 f4       	brtc	.+4      	; 0x34a2 <itoa+0x3a>
    349e:	5d e2       	ldi	r21, 0x2D	; 45
    34a0:	51 93       	st	Z+, r21
    34a2:	10 82       	st	Z, r1
    34a4:	c9 01       	movw	r24, r18
    34a6:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <strrev>

000034aa <__mulhi_const_10>:
    34aa:	7a e0       	ldi	r23, 0x0A	; 10
    34ac:	97 9f       	mul	r25, r23
    34ae:	90 2d       	mov	r25, r0
    34b0:	87 9f       	mul	r24, r23
    34b2:	80 2d       	mov	r24, r0
    34b4:	91 0d       	add	r25, r1
    34b6:	11 24       	eor	r1, r1
    34b8:	08 95       	ret

000034ba <ultoa>:
    34ba:	fa 01       	movw	r30, r20
    34bc:	cf 93       	push	r28
    34be:	ff 93       	push	r31
    34c0:	ef 93       	push	r30
    34c2:	22 30       	cpi	r18, 0x02	; 2
    34c4:	cc f0       	brlt	.+50     	; 0x34f8 <ultoa+0x3e>
    34c6:	25 32       	cpi	r18, 0x25	; 37
    34c8:	bc f4       	brge	.+46     	; 0x34f8 <ultoa+0x3e>
    34ca:	c2 2f       	mov	r28, r18
    34cc:	2c 2f       	mov	r18, r28
    34ce:	33 27       	eor	r19, r19
    34d0:	44 27       	eor	r20, r20
    34d2:	55 27       	eor	r21, r21
    34d4:	ff 93       	push	r31
    34d6:	ef 93       	push	r30
    34d8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__udivmodsi4>
    34dc:	ef 91       	pop	r30
    34de:	ff 91       	pop	r31
    34e0:	60 5d       	subi	r22, 0xD0	; 208
    34e2:	6a 33       	cpi	r22, 0x3A	; 58
    34e4:	0c f0       	brlt	.+2      	; 0x34e8 <ultoa+0x2e>
    34e6:	69 5d       	subi	r22, 0xD9	; 217
    34e8:	61 93       	st	Z+, r22
    34ea:	b9 01       	movw	r22, r18
    34ec:	ca 01       	movw	r24, r20
    34ee:	60 50       	subi	r22, 0x00	; 0
    34f0:	70 40       	sbci	r23, 0x00	; 0
    34f2:	80 40       	sbci	r24, 0x00	; 0
    34f4:	90 40       	sbci	r25, 0x00	; 0
    34f6:	51 f7       	brne	.-44     	; 0x34cc <ultoa+0x12>
    34f8:	10 82       	st	Z, r1
    34fa:	8f 91       	pop	r24
    34fc:	9f 91       	pop	r25
    34fe:	cf 91       	pop	r28
    3500:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <strrev>

00003504 <dtoa_prf>:
    3504:	a9 e0       	ldi	r26, 0x09	; 9
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	e8 e8       	ldi	r30, 0x88	; 136
    350a:	fa e1       	ldi	r31, 0x1A	; 26
    350c:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__prologue_saves__+0x8>
    3510:	6a 01       	movw	r12, r20
    3512:	12 2f       	mov	r17, r18
    3514:	a0 2e       	mov	r10, r16
    3516:	be 2c       	mov	r11, r14
    3518:	2b e3       	ldi	r18, 0x3B	; 59
    351a:	20 17       	cp	r18, r16
    351c:	18 f4       	brcc	.+6      	; 0x3524 <dtoa_prf+0x20>
    351e:	2c e3       	ldi	r18, 0x3C	; 60
    3520:	92 2e       	mov	r9, r18
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <dtoa_prf+0x24>
    3524:	90 2e       	mov	r9, r16
    3526:	93 94       	inc	r9
    3528:	ae 01       	movw	r20, r28
    352a:	4f 5f       	subi	r20, 0xFF	; 255
    352c:	5f 4f       	sbci	r21, 0xFF	; 255
    352e:	27 e0       	ldi	r18, 0x07	; 7
    3530:	09 2d       	mov	r16, r9
    3532:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__ftoa_engine>
    3536:	bc 01       	movw	r22, r24
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	e8 2e       	mov	r14, r24
    353c:	ff 24       	eor	r15, r15
    353e:	c7 01       	movw	r24, r14
    3540:	89 70       	andi	r24, 0x09	; 9
    3542:	90 70       	andi	r25, 0x00	; 0
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	11 f4       	brne	.+4      	; 0x354c <dtoa_prf+0x48>
    3548:	ad e2       	ldi	r26, 0x2D	; 45
    354a:	09 c0       	rjmp	.+18     	; 0x355e <dtoa_prf+0x5a>
    354c:	b1 fe       	sbrs	r11, 1
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <dtoa_prf+0x50>
    3550:	ab e2       	ldi	r26, 0x2B	; 43
    3552:	05 c0       	rjmp	.+10     	; 0x355e <dtoa_prf+0x5a>
    3554:	b0 fc       	sbrc	r11, 0
    3556:	02 c0       	rjmp	.+4      	; 0x355c <dtoa_prf+0x58>
    3558:	a0 e0       	ldi	r26, 0x00	; 0
    355a:	01 c0       	rjmp	.+2      	; 0x355e <dtoa_prf+0x5a>
    355c:	a0 e2       	ldi	r26, 0x20	; 32
    355e:	e3 fe       	sbrs	r14, 3
    3560:	3b c0       	rjmp	.+118    	; 0x35d8 <dtoa_prf+0xd4>
    3562:	aa 23       	and	r26, r26
    3564:	11 f4       	brne	.+4      	; 0x356a <dtoa_prf+0x66>
    3566:	23 e0       	ldi	r18, 0x03	; 3
    3568:	01 c0       	rjmp	.+2      	; 0x356c <dtoa_prf+0x68>
    356a:	24 e0       	ldi	r18, 0x04	; 4
    356c:	21 17       	cp	r18, r17
    356e:	10 f0       	brcs	.+4      	; 0x3574 <dtoa_prf+0x70>
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <dtoa_prf+0x74>
    3574:	12 1b       	sub	r17, r18
    3576:	21 2f       	mov	r18, r17
    3578:	eb 2c       	mov	r14, r11
    357a:	b4 fe       	sbrs	r11, 4
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <dtoa_prf+0x7e>
    357e:	32 2f       	mov	r19, r18
    3580:	0a c0       	rjmp	.+20     	; 0x3596 <dtoa_prf+0x92>
    3582:	f6 01       	movw	r30, r12
    3584:	32 2f       	mov	r19, r18
    3586:	80 e2       	ldi	r24, 0x20	; 32
    3588:	02 c0       	rjmp	.+4      	; 0x358e <dtoa_prf+0x8a>
    358a:	81 93       	st	Z+, r24
    358c:	31 50       	subi	r19, 0x01	; 1
    358e:	33 23       	and	r19, r19
    3590:	e1 f7       	brne	.-8      	; 0x358a <dtoa_prf+0x86>
    3592:	c2 0e       	add	r12, r18
    3594:	d1 1c       	adc	r13, r1
    3596:	aa 23       	and	r26, r26
    3598:	19 f0       	breq	.+6      	; 0x35a0 <dtoa_prf+0x9c>
    359a:	f6 01       	movw	r30, r12
    359c:	a1 93       	st	Z+, r26
    359e:	6f 01       	movw	r12, r30
    35a0:	f6 01       	movw	r30, r12
    35a2:	31 96       	adiw	r30, 0x01	; 1
    35a4:	e2 fe       	sbrs	r14, 2
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <dtoa_prf+0xae>
    35a8:	9e e4       	ldi	r25, 0x4E	; 78
    35aa:	d6 01       	movw	r26, r12
    35ac:	9c 93       	st	X, r25
    35ae:	81 e4       	ldi	r24, 0x41	; 65
    35b0:	04 c0       	rjmp	.+8      	; 0x35ba <dtoa_prf+0xb6>
    35b2:	9e e6       	ldi	r25, 0x6E	; 110
    35b4:	d6 01       	movw	r26, r12
    35b6:	9c 93       	st	X, r25
    35b8:	81 e6       	ldi	r24, 0x61	; 97
    35ba:	11 96       	adiw	r26, 0x01	; 1
    35bc:	8c 93       	st	X, r24
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	32 96       	adiw	r30, 0x02	; 2
    35c2:	df 01       	movw	r26, r30
    35c4:	83 2f       	mov	r24, r19
    35c6:	90 e2       	ldi	r25, 0x20	; 32
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <dtoa_prf+0xca>
    35ca:	9d 93       	st	X+, r25
    35cc:	81 50       	subi	r24, 0x01	; 1
    35ce:	88 23       	and	r24, r24
    35d0:	e1 f7       	brne	.-8      	; 0x35ca <dtoa_prf+0xc6>
    35d2:	e3 0f       	add	r30, r19
    35d4:	f1 1d       	adc	r31, r1
    35d6:	40 c0       	rjmp	.+128    	; 0x3658 <dtoa_prf+0x154>
    35d8:	e2 fe       	sbrs	r14, 2
    35da:	42 c0       	rjmp	.+132    	; 0x3660 <dtoa_prf+0x15c>
    35dc:	aa 23       	and	r26, r26
    35de:	11 f4       	brne	.+4      	; 0x35e4 <dtoa_prf+0xe0>
    35e0:	23 e0       	ldi	r18, 0x03	; 3
    35e2:	01 c0       	rjmp	.+2      	; 0x35e6 <dtoa_prf+0xe2>
    35e4:	24 e0       	ldi	r18, 0x04	; 4
    35e6:	21 17       	cp	r18, r17
    35e8:	10 f0       	brcs	.+4      	; 0x35ee <dtoa_prf+0xea>
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <dtoa_prf+0xee>
    35ee:	12 1b       	sub	r17, r18
    35f0:	21 2f       	mov	r18, r17
    35f2:	eb 2c       	mov	r14, r11
    35f4:	b4 fe       	sbrs	r11, 4
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <dtoa_prf+0xf8>
    35f8:	92 2f       	mov	r25, r18
    35fa:	0a c0       	rjmp	.+20     	; 0x3610 <dtoa_prf+0x10c>
    35fc:	f6 01       	movw	r30, r12
    35fe:	92 2f       	mov	r25, r18
    3600:	80 e2       	ldi	r24, 0x20	; 32
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <dtoa_prf+0x104>
    3604:	81 93       	st	Z+, r24
    3606:	91 50       	subi	r25, 0x01	; 1
    3608:	99 23       	and	r25, r25
    360a:	e1 f7       	brne	.-8      	; 0x3604 <dtoa_prf+0x100>
    360c:	c2 0e       	add	r12, r18
    360e:	d1 1c       	adc	r13, r1
    3610:	aa 23       	and	r26, r26
    3612:	19 f0       	breq	.+6      	; 0x361a <dtoa_prf+0x116>
    3614:	f6 01       	movw	r30, r12
    3616:	a1 93       	st	Z+, r26
    3618:	6f 01       	movw	r12, r30
    361a:	f6 01       	movw	r30, r12
    361c:	31 96       	adiw	r30, 0x01	; 1
    361e:	e2 fe       	sbrs	r14, 2
    3620:	08 c0       	rjmp	.+16     	; 0x3632 <dtoa_prf+0x12e>
    3622:	89 e4       	ldi	r24, 0x49	; 73
    3624:	d6 01       	movw	r26, r12
    3626:	8c 93       	st	X, r24
    3628:	8e e4       	ldi	r24, 0x4E	; 78
    362a:	11 96       	adiw	r26, 0x01	; 1
    362c:	8c 93       	st	X, r24
    362e:	86 e4       	ldi	r24, 0x46	; 70
    3630:	07 c0       	rjmp	.+14     	; 0x3640 <dtoa_prf+0x13c>
    3632:	89 e6       	ldi	r24, 0x69	; 105
    3634:	d6 01       	movw	r26, r12
    3636:	8c 93       	st	X, r24
    3638:	8e e6       	ldi	r24, 0x6E	; 110
    363a:	11 96       	adiw	r26, 0x01	; 1
    363c:	8c 93       	st	X, r24
    363e:	86 e6       	ldi	r24, 0x66	; 102
    3640:	81 83       	std	Z+1, r24	; 0x01
    3642:	32 96       	adiw	r30, 0x02	; 2
    3644:	df 01       	movw	r26, r30
    3646:	89 2f       	mov	r24, r25
    3648:	20 e2       	ldi	r18, 0x20	; 32
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <dtoa_prf+0x14c>
    364c:	2d 93       	st	X+, r18
    364e:	81 50       	subi	r24, 0x01	; 1
    3650:	88 23       	and	r24, r24
    3652:	e1 f7       	brne	.-8      	; 0x364c <dtoa_prf+0x148>
    3654:	e9 0f       	add	r30, r25
    3656:	f1 1d       	adc	r31, r1
    3658:	10 82       	st	Z, r1
    365a:	2e ef       	ldi	r18, 0xFE	; 254
    365c:	3f ef       	ldi	r19, 0xFF	; 255
    365e:	af c0       	rjmp	.+350    	; 0x37be <dtoa_prf+0x2ba>
    3660:	16 16       	cp	r1, r22
    3662:	17 06       	cpc	r1, r23
    3664:	1c f0       	brlt	.+6      	; 0x366c <dtoa_prf+0x168>
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	03 c0       	rjmp	.+6      	; 0x3672 <dtoa_prf+0x16e>
    366c:	ab 01       	movw	r20, r22
    366e:	4f 5f       	subi	r20, 0xFF	; 255
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	aa 20       	and	r10, r10
    3674:	19 f4       	brne	.+6      	; 0x367c <dtoa_prf+0x178>
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	03 c0       	rjmp	.+6      	; 0x3682 <dtoa_prf+0x17e>
    367c:	8a 2d       	mov	r24, r10
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	01 96       	adiw	r24, 0x01	; 1
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	aa 23       	and	r26, r26
    3688:	11 f0       	breq	.+4      	; 0x368e <dtoa_prf+0x18a>
    368a:	21 e0       	ldi	r18, 0x01	; 1
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	24 0f       	add	r18, r20
    3690:	35 1f       	adc	r19, r21
    3692:	28 0f       	add	r18, r24
    3694:	39 1f       	adc	r19, r25
    3696:	81 2f       	mov	r24, r17
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	28 17       	cp	r18, r24
    369c:	39 07       	cpc	r19, r25
    369e:	14 f0       	brlt	.+4      	; 0x36a4 <dtoa_prf+0x1a0>
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <dtoa_prf+0x1a4>
    36a4:	12 1b       	sub	r17, r18
    36a6:	21 2f       	mov	r18, r17
    36a8:	4b 2d       	mov	r20, r11
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	ca 01       	movw	r24, r20
    36ae:	80 71       	andi	r24, 0x10	; 16
    36b0:	90 70       	andi	r25, 0x00	; 0
    36b2:	b4 fc       	sbrc	r11, 4
    36b4:	0d c0       	rjmp	.+26     	; 0x36d0 <dtoa_prf+0x1cc>
    36b6:	b3 fc       	sbrc	r11, 3
    36b8:	0b c0       	rjmp	.+22     	; 0x36d0 <dtoa_prf+0x1cc>
    36ba:	f6 01       	movw	r30, r12
    36bc:	32 2f       	mov	r19, r18
    36be:	40 e2       	ldi	r20, 0x20	; 32
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <dtoa_prf+0x1c2>
    36c2:	41 93       	st	Z+, r20
    36c4:	31 50       	subi	r19, 0x01	; 1
    36c6:	33 23       	and	r19, r19
    36c8:	e1 f7       	brne	.-8      	; 0x36c2 <dtoa_prf+0x1be>
    36ca:	c2 0e       	add	r12, r18
    36cc:	d1 1c       	adc	r13, r1
    36ce:	01 c0       	rjmp	.+2      	; 0x36d2 <dtoa_prf+0x1ce>
    36d0:	32 2f       	mov	r19, r18
    36d2:	aa 23       	and	r26, r26
    36d4:	19 f0       	breq	.+6      	; 0x36dc <dtoa_prf+0x1d8>
    36d6:	f6 01       	movw	r30, r12
    36d8:	a1 93       	st	Z+, r26
    36da:	6f 01       	movw	r12, r30
    36dc:	89 2b       	or	r24, r25
    36de:	11 f0       	breq	.+4      	; 0x36e4 <dtoa_prf+0x1e0>
    36e0:	13 2f       	mov	r17, r19
    36e2:	0a c0       	rjmp	.+20     	; 0x36f8 <dtoa_prf+0x1f4>
    36e4:	f6 01       	movw	r30, r12
    36e6:	13 2f       	mov	r17, r19
    36e8:	80 e3       	ldi	r24, 0x30	; 48
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <dtoa_prf+0x1ec>
    36ec:	81 93       	st	Z+, r24
    36ee:	11 50       	subi	r17, 0x01	; 1
    36f0:	11 23       	and	r17, r17
    36f2:	e1 f7       	brne	.-8      	; 0x36ec <dtoa_prf+0x1e8>
    36f4:	c3 0e       	add	r12, r19
    36f6:	d1 1c       	adc	r13, r1
    36f8:	09 2d       	mov	r16, r9
    36fa:	06 0f       	add	r16, r22
    36fc:	ba 80       	ldd	r11, Y+2	; 0x02
    36fe:	90 e1       	ldi	r25, 0x10	; 16
    3700:	89 2e       	mov	r8, r25
    3702:	91 2c       	mov	r9, r1
    3704:	8e 20       	and	r8, r14
    3706:	9f 20       	and	r9, r15
    3708:	e4 fe       	sbrs	r14, 4
    370a:	04 c0       	rjmp	.+8      	; 0x3714 <dtoa_prf+0x210>
    370c:	f1 e3       	ldi	r31, 0x31	; 49
    370e:	bf 16       	cp	r11, r31
    3710:	09 f4       	brne	.+2      	; 0x3714 <dtoa_prf+0x210>
    3712:	01 50       	subi	r16, 0x01	; 1
    3714:	10 16       	cp	r1, r16
    3716:	14 f0       	brlt	.+4      	; 0x371c <dtoa_prf+0x218>
    3718:	01 e0       	ldi	r16, 0x01	; 1
    371a:	03 c0       	rjmp	.+6      	; 0x3722 <dtoa_prf+0x21e>
    371c:	09 30       	cpi	r16, 0x09	; 9
    371e:	08 f0       	brcs	.+2      	; 0x3722 <dtoa_prf+0x21e>
    3720:	08 e0       	ldi	r16, 0x08	; 8
    3722:	9b 01       	movw	r18, r22
    3724:	77 ff       	sbrs	r23, 7
    3726:	02 c0       	rjmp	.+4      	; 0x372c <dtoa_prf+0x228>
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	cb 01       	movw	r24, r22
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	82 1b       	sub	r24, r18
    3732:	93 0b       	sbc	r25, r19
    3734:	fe 01       	movw	r30, r28
    3736:	31 96       	adiw	r30, 0x01	; 1
    3738:	e8 0f       	add	r30, r24
    373a:	f9 1f       	adc	r31, r25
    373c:	8e e2       	ldi	r24, 0x2E	; 46
    373e:	f8 2e       	mov	r15, r24
    3740:	3b 01       	movw	r6, r22
    3742:	60 1a       	sub	r6, r16
    3744:	71 08       	sbc	r7, r1
    3746:	8a 2d       	mov	r24, r10
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	44 27       	eor	r20, r20
    374c:	55 27       	eor	r21, r21
    374e:	48 1b       	sub	r20, r24
    3750:	59 0b       	sbc	r21, r25
    3752:	8f ef       	ldi	r24, 0xFF	; 255
    3754:	2f 3f       	cpi	r18, 0xFF	; 255
    3756:	38 07       	cpc	r19, r24
    3758:	19 f4       	brne	.+6      	; 0x3760 <dtoa_prf+0x25c>
    375a:	d6 01       	movw	r26, r12
    375c:	fd 92       	st	X+, r15
    375e:	6d 01       	movw	r12, r26
    3760:	62 17       	cp	r22, r18
    3762:	73 07       	cpc	r23, r19
    3764:	2c f0       	brlt	.+10     	; 0x3770 <dtoa_prf+0x26c>
    3766:	62 16       	cp	r6, r18
    3768:	73 06       	cpc	r7, r19
    376a:	14 f4       	brge	.+4      	; 0x3770 <dtoa_prf+0x26c>
    376c:	80 81       	ld	r24, Z
    376e:	01 c0       	rjmp	.+2      	; 0x3772 <dtoa_prf+0x26e>
    3770:	80 e3       	ldi	r24, 0x30	; 48
    3772:	21 50       	subi	r18, 0x01	; 1
    3774:	30 40       	sbci	r19, 0x00	; 0
    3776:	31 96       	adiw	r30, 0x01	; 1
    3778:	24 17       	cp	r18, r20
    377a:	35 07       	cpc	r19, r21
    377c:	24 f0       	brlt	.+8      	; 0x3786 <dtoa_prf+0x282>
    377e:	d6 01       	movw	r26, r12
    3780:	8d 93       	st	X+, r24
    3782:	6d 01       	movw	r12, r26
    3784:	e6 cf       	rjmp	.-52     	; 0x3752 <dtoa_prf+0x24e>
    3786:	26 17       	cp	r18, r22
    3788:	37 07       	cpc	r19, r23
    378a:	49 f4       	brne	.+18     	; 0x379e <dtoa_prf+0x29a>
    378c:	b5 e3       	ldi	r27, 0x35	; 53
    378e:	bb 15       	cp	r27, r11
    3790:	28 f0       	brcs	.+10     	; 0x379c <dtoa_prf+0x298>
    3792:	bb 16       	cp	r11, r27
    3794:	21 f4       	brne	.+8      	; 0x379e <dtoa_prf+0x29a>
    3796:	81 14       	cp	r8, r1
    3798:	91 04       	cpc	r9, r1
    379a:	09 f4       	brne	.+2      	; 0x379e <dtoa_prf+0x29a>
    379c:	81 e3       	ldi	r24, 0x31	; 49
    379e:	f6 01       	movw	r30, r12
    37a0:	81 93       	st	Z+, r24
    37a2:	d6 01       	movw	r26, r12
    37a4:	81 2f       	mov	r24, r17
    37a6:	90 e2       	ldi	r25, 0x20	; 32
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <dtoa_prf+0x2aa>
    37aa:	9c 93       	st	X, r25
    37ac:	81 50       	subi	r24, 0x01	; 1
    37ae:	11 96       	adiw	r26, 0x01	; 1
    37b0:	88 23       	and	r24, r24
    37b2:	d9 f7       	brne	.-10     	; 0x37aa <dtoa_prf+0x2a6>
    37b4:	e1 0f       	add	r30, r17
    37b6:	f1 1d       	adc	r31, r1
    37b8:	10 82       	st	Z, r1
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	c9 01       	movw	r24, r18
    37c0:	29 96       	adiw	r28, 0x09	; 9
    37c2:	ee e0       	ldi	r30, 0x0E	; 14
    37c4:	0c 94 d5 19 	jmp	0x33aa	; 0x33aa <__epilogue_restores__+0x8>

000037c8 <__ftoa_engine>:
    37c8:	28 30       	cpi	r18, 0x08	; 8
    37ca:	08 f0       	brcs	.+2      	; 0x37ce <__ftoa_engine+0x6>
    37cc:	27 e0       	ldi	r18, 0x07	; 7
    37ce:	33 27       	eor	r19, r19
    37d0:	da 01       	movw	r26, r20
    37d2:	99 0f       	add	r25, r25
    37d4:	31 1d       	adc	r19, r1
    37d6:	87 fd       	sbrc	r24, 7
    37d8:	91 60       	ori	r25, 0x01	; 1
    37da:	00 96       	adiw	r24, 0x00	; 0
    37dc:	61 05       	cpc	r22, r1
    37de:	71 05       	cpc	r23, r1
    37e0:	39 f4       	brne	.+14     	; 0x37f0 <__ftoa_engine+0x28>
    37e2:	32 60       	ori	r19, 0x02	; 2
    37e4:	2e 5f       	subi	r18, 0xFE	; 254
    37e6:	3d 93       	st	X+, r19
    37e8:	30 e3       	ldi	r19, 0x30	; 48
    37ea:	2a 95       	dec	r18
    37ec:	e1 f7       	brne	.-8      	; 0x37e6 <__ftoa_engine+0x1e>
    37ee:	08 95       	ret
    37f0:	9f 3f       	cpi	r25, 0xFF	; 255
    37f2:	30 f0       	brcs	.+12     	; 0x3800 <__ftoa_engine+0x38>
    37f4:	80 38       	cpi	r24, 0x80	; 128
    37f6:	71 05       	cpc	r23, r1
    37f8:	61 05       	cpc	r22, r1
    37fa:	09 f0       	breq	.+2      	; 0x37fe <__ftoa_engine+0x36>
    37fc:	3c 5f       	subi	r19, 0xFC	; 252
    37fe:	3c 5f       	subi	r19, 0xFC	; 252
    3800:	3d 93       	st	X+, r19
    3802:	91 30       	cpi	r25, 0x01	; 1
    3804:	08 f0       	brcs	.+2      	; 0x3808 <__ftoa_engine+0x40>
    3806:	80 68       	ori	r24, 0x80	; 128
    3808:	91 1d       	adc	r25, r1
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	1f 93       	push	r17
    3810:	0f 93       	push	r16
    3812:	ff 92       	push	r15
    3814:	ef 92       	push	r14
    3816:	19 2f       	mov	r17, r25
    3818:	98 7f       	andi	r25, 0xF8	; 248
    381a:	96 95       	lsr	r25
    381c:	e9 2f       	mov	r30, r25
    381e:	96 95       	lsr	r25
    3820:	96 95       	lsr	r25
    3822:	e9 0f       	add	r30, r25
    3824:	ff 27       	eor	r31, r31
    3826:	e8 5e       	subi	r30, 0xE8	; 232
    3828:	fe 4f       	sbci	r31, 0xFE	; 254
    382a:	99 27       	eor	r25, r25
    382c:	33 27       	eor	r19, r19
    382e:	ee 24       	eor	r14, r14
    3830:	ff 24       	eor	r15, r15
    3832:	a7 01       	movw	r20, r14
    3834:	e7 01       	movw	r28, r14
    3836:	05 90       	lpm	r0, Z+
    3838:	08 94       	sec
    383a:	07 94       	ror	r0
    383c:	28 f4       	brcc	.+10     	; 0x3848 <__ftoa_engine+0x80>
    383e:	36 0f       	add	r19, r22
    3840:	e7 1e       	adc	r14, r23
    3842:	f8 1e       	adc	r15, r24
    3844:	49 1f       	adc	r20, r25
    3846:	51 1d       	adc	r21, r1
    3848:	66 0f       	add	r22, r22
    384a:	77 1f       	adc	r23, r23
    384c:	88 1f       	adc	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	06 94       	lsr	r0
    3852:	a1 f7       	brne	.-24     	; 0x383c <__ftoa_engine+0x74>
    3854:	05 90       	lpm	r0, Z+
    3856:	07 94       	ror	r0
    3858:	28 f4       	brcc	.+10     	; 0x3864 <__ftoa_engine+0x9c>
    385a:	e7 0e       	add	r14, r23
    385c:	f8 1e       	adc	r15, r24
    385e:	49 1f       	adc	r20, r25
    3860:	56 1f       	adc	r21, r22
    3862:	c1 1d       	adc	r28, r1
    3864:	77 0f       	add	r23, r23
    3866:	88 1f       	adc	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	66 1f       	adc	r22, r22
    386c:	06 94       	lsr	r0
    386e:	a1 f7       	brne	.-24     	; 0x3858 <__ftoa_engine+0x90>
    3870:	05 90       	lpm	r0, Z+
    3872:	07 94       	ror	r0
    3874:	28 f4       	brcc	.+10     	; 0x3880 <__ftoa_engine+0xb8>
    3876:	f8 0e       	add	r15, r24
    3878:	49 1f       	adc	r20, r25
    387a:	56 1f       	adc	r21, r22
    387c:	c7 1f       	adc	r28, r23
    387e:	d1 1d       	adc	r29, r1
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	66 1f       	adc	r22, r22
    3886:	77 1f       	adc	r23, r23
    3888:	06 94       	lsr	r0
    388a:	a1 f7       	brne	.-24     	; 0x3874 <__ftoa_engine+0xac>
    388c:	05 90       	lpm	r0, Z+
    388e:	07 94       	ror	r0
    3890:	20 f4       	brcc	.+8      	; 0x389a <__ftoa_engine+0xd2>
    3892:	49 0f       	add	r20, r25
    3894:	56 1f       	adc	r21, r22
    3896:	c7 1f       	adc	r28, r23
    3898:	d8 1f       	adc	r29, r24
    389a:	99 0f       	add	r25, r25
    389c:	66 1f       	adc	r22, r22
    389e:	77 1f       	adc	r23, r23
    38a0:	88 1f       	adc	r24, r24
    38a2:	06 94       	lsr	r0
    38a4:	a9 f7       	brne	.-22     	; 0x3890 <__ftoa_engine+0xc8>
    38a6:	84 91       	lpm	r24, Z+
    38a8:	10 95       	com	r17
    38aa:	17 70       	andi	r17, 0x07	; 7
    38ac:	41 f0       	breq	.+16     	; 0x38be <__ftoa_engine+0xf6>
    38ae:	d6 95       	lsr	r29
    38b0:	c7 95       	ror	r28
    38b2:	57 95       	ror	r21
    38b4:	47 95       	ror	r20
    38b6:	f7 94       	ror	r15
    38b8:	e7 94       	ror	r14
    38ba:	1a 95       	dec	r17
    38bc:	c1 f7       	brne	.-16     	; 0x38ae <__ftoa_engine+0xe6>
    38be:	ee eb       	ldi	r30, 0xBE	; 190
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	68 94       	set
    38c4:	15 90       	lpm	r1, Z+
    38c6:	15 91       	lpm	r17, Z+
    38c8:	35 91       	lpm	r19, Z+
    38ca:	65 91       	lpm	r22, Z+
    38cc:	95 91       	lpm	r25, Z+
    38ce:	05 90       	lpm	r0, Z+
    38d0:	7f e2       	ldi	r23, 0x2F	; 47
    38d2:	73 95       	inc	r23
    38d4:	e1 18       	sub	r14, r1
    38d6:	f1 0a       	sbc	r15, r17
    38d8:	43 0b       	sbc	r20, r19
    38da:	56 0b       	sbc	r21, r22
    38dc:	c9 0b       	sbc	r28, r25
    38de:	d0 09       	sbc	r29, r0
    38e0:	c0 f7       	brcc	.-16     	; 0x38d2 <__ftoa_engine+0x10a>
    38e2:	e1 0c       	add	r14, r1
    38e4:	f1 1e       	adc	r15, r17
    38e6:	43 1f       	adc	r20, r19
    38e8:	56 1f       	adc	r21, r22
    38ea:	c9 1f       	adc	r28, r25
    38ec:	d0 1d       	adc	r29, r0
    38ee:	7e f4       	brtc	.+30     	; 0x390e <__ftoa_engine+0x146>
    38f0:	70 33       	cpi	r23, 0x30	; 48
    38f2:	11 f4       	brne	.+4      	; 0x38f8 <__ftoa_engine+0x130>
    38f4:	8a 95       	dec	r24
    38f6:	e6 cf       	rjmp	.-52     	; 0x38c4 <__ftoa_engine+0xfc>
    38f8:	e8 94       	clt
    38fa:	01 50       	subi	r16, 0x01	; 1
    38fc:	30 f0       	brcs	.+12     	; 0x390a <__ftoa_engine+0x142>
    38fe:	08 0f       	add	r16, r24
    3900:	0a f4       	brpl	.+2      	; 0x3904 <__ftoa_engine+0x13c>
    3902:	00 27       	eor	r16, r16
    3904:	02 17       	cp	r16, r18
    3906:	08 f4       	brcc	.+2      	; 0x390a <__ftoa_engine+0x142>
    3908:	20 2f       	mov	r18, r16
    390a:	23 95       	inc	r18
    390c:	02 2f       	mov	r16, r18
    390e:	7a 33       	cpi	r23, 0x3A	; 58
    3910:	28 f0       	brcs	.+10     	; 0x391c <__ftoa_engine+0x154>
    3912:	79 e3       	ldi	r23, 0x39	; 57
    3914:	7d 93       	st	X+, r23
    3916:	2a 95       	dec	r18
    3918:	e9 f7       	brne	.-6      	; 0x3914 <__ftoa_engine+0x14c>
    391a:	10 c0       	rjmp	.+32     	; 0x393c <__ftoa_engine+0x174>
    391c:	7d 93       	st	X+, r23
    391e:	2a 95       	dec	r18
    3920:	89 f6       	brne	.-94     	; 0x38c4 <__ftoa_engine+0xfc>
    3922:	06 94       	lsr	r0
    3924:	97 95       	ror	r25
    3926:	67 95       	ror	r22
    3928:	37 95       	ror	r19
    392a:	17 95       	ror	r17
    392c:	17 94       	ror	r1
    392e:	e1 18       	sub	r14, r1
    3930:	f1 0a       	sbc	r15, r17
    3932:	43 0b       	sbc	r20, r19
    3934:	56 0b       	sbc	r21, r22
    3936:	c9 0b       	sbc	r28, r25
    3938:	d0 09       	sbc	r29, r0
    393a:	98 f0       	brcs	.+38     	; 0x3962 <__ftoa_engine+0x19a>
    393c:	23 95       	inc	r18
    393e:	7e 91       	ld	r23, -X
    3940:	73 95       	inc	r23
    3942:	7a 33       	cpi	r23, 0x3A	; 58
    3944:	08 f0       	brcs	.+2      	; 0x3948 <__ftoa_engine+0x180>
    3946:	70 e3       	ldi	r23, 0x30	; 48
    3948:	7c 93       	st	X, r23
    394a:	20 13       	cpse	r18, r16
    394c:	b8 f7       	brcc	.-18     	; 0x393c <__ftoa_engine+0x174>
    394e:	7e 91       	ld	r23, -X
    3950:	70 61       	ori	r23, 0x10	; 16
    3952:	7d 93       	st	X+, r23
    3954:	30 f0       	brcs	.+12     	; 0x3962 <__ftoa_engine+0x19a>
    3956:	83 95       	inc	r24
    3958:	71 e3       	ldi	r23, 0x31	; 49
    395a:	7d 93       	st	X+, r23
    395c:	70 e3       	ldi	r23, 0x30	; 48
    395e:	2a 95       	dec	r18
    3960:	e1 f7       	brne	.-8      	; 0x395a <__ftoa_engine+0x192>
    3962:	11 24       	eor	r1, r1
    3964:	ef 90       	pop	r14
    3966:	ff 90       	pop	r15
    3968:	0f 91       	pop	r16
    396a:	1f 91       	pop	r17
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	99 27       	eor	r25, r25
    3972:	87 fd       	sbrc	r24, 7
    3974:	90 95       	com	r25
    3976:	08 95       	ret

00003978 <strrev>:
    3978:	dc 01       	movw	r26, r24
    397a:	fc 01       	movw	r30, r24
    397c:	67 2f       	mov	r22, r23
    397e:	71 91       	ld	r23, Z+
    3980:	77 23       	and	r23, r23
    3982:	e1 f7       	brne	.-8      	; 0x397c <strrev+0x4>
    3984:	32 97       	sbiw	r30, 0x02	; 2
    3986:	04 c0       	rjmp	.+8      	; 0x3990 <strrev+0x18>
    3988:	7c 91       	ld	r23, X
    398a:	6d 93       	st	X+, r22
    398c:	70 83       	st	Z, r23
    398e:	62 91       	ld	r22, -Z
    3990:	ae 17       	cp	r26, r30
    3992:	bf 07       	cpc	r27, r31
    3994:	c8 f3       	brcs	.-14     	; 0x3988 <strrev+0x10>
    3996:	08 95       	ret

00003998 <__udivmodsi4>:
    3998:	a1 e2       	ldi	r26, 0x21	; 33
    399a:	1a 2e       	mov	r1, r26
    399c:	aa 1b       	sub	r26, r26
    399e:	bb 1b       	sub	r27, r27
    39a0:	fd 01       	movw	r30, r26
    39a2:	0d c0       	rjmp	.+26     	; 0x39be <__udivmodsi4_ep>

000039a4 <__udivmodsi4_loop>:
    39a4:	aa 1f       	adc	r26, r26
    39a6:	bb 1f       	adc	r27, r27
    39a8:	ee 1f       	adc	r30, r30
    39aa:	ff 1f       	adc	r31, r31
    39ac:	a2 17       	cp	r26, r18
    39ae:	b3 07       	cpc	r27, r19
    39b0:	e4 07       	cpc	r30, r20
    39b2:	f5 07       	cpc	r31, r21
    39b4:	20 f0       	brcs	.+8      	; 0x39be <__udivmodsi4_ep>
    39b6:	a2 1b       	sub	r26, r18
    39b8:	b3 0b       	sbc	r27, r19
    39ba:	e4 0b       	sbc	r30, r20
    39bc:	f5 0b       	sbc	r31, r21

000039be <__udivmodsi4_ep>:
    39be:	66 1f       	adc	r22, r22
    39c0:	77 1f       	adc	r23, r23
    39c2:	88 1f       	adc	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	1a 94       	dec	r1
    39c8:	69 f7       	brne	.-38     	; 0x39a4 <__udivmodsi4_loop>
    39ca:	60 95       	com	r22
    39cc:	70 95       	com	r23
    39ce:	80 95       	com	r24
    39d0:	90 95       	com	r25
    39d2:	9b 01       	movw	r18, r22
    39d4:	ac 01       	movw	r20, r24
    39d6:	bd 01       	movw	r22, r26
    39d8:	cf 01       	movw	r24, r30
    39da:	08 95       	ret

000039dc <_exit>:
    39dc:	f8 94       	cli

000039de <__stop_program>:
    39de:	ff cf       	rjmp	.-2      	; 0x39de <__stop_program>
