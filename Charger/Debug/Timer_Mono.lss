
Timer_Mono.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001d2  2**0
                  ALLOC
  2 .stab         000005ac  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a09  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	6b c0       	rjmp	.+214    	; 0xec <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	8e c0       	rjmp	.+284    	; 0x15a <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
#include "main.h"

volatile int Time = 0;
volatile int flag = 0;

int main(void) {
  40:	cd b7       	in	r28, 0x3d	; 61
  42:	de b7       	in	r29, 0x3e	; 62


	SW_DDR_1 = 0;
  44:	e7 e3       	ldi	r30, 0x37	; 55
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	80 81       	ld	r24, Z
  4a:	8e 7f       	andi	r24, 0xFE	; 254
  4c:	80 83       	st	Z, r24
	ADC_DDR_1 = 0;
  4e:	e7 e3       	ldi	r30, 0x37	; 55
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	80 81       	ld	r24, Z
  54:	8f 7e       	andi	r24, 0xEF	; 239
  56:	80 83       	st	Z, r24

	SW_1 = 1;
  58:	e8 e3       	ldi	r30, 0x38	; 56
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	80 81       	ld	r24, Z
  5e:	81 60       	ori	r24, 0x01	; 1
  60:	80 83       	st	Z, r24
	ADC_1 = 1;
  62:	e8 e3       	ldi	r30, 0x38	; 56
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	80 61       	ori	r24, 0x10	; 16
  6a:	80 83       	st	Z, r24

	OUT_DDR_1 = 1;
  6c:	e7 e3       	ldi	r30, 0x37	; 55
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	88 60       	ori	r24, 0x08	; 8
  74:	80 83       	st	Z, r24
	OUT_1 = 0;
  76:	e8 e3       	ldi	r30, 0x38	; 56
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	87 7f       	andi	r24, 0xF7	; 247
  7e:	80 83       	st	Z, r24

    //Timer 0 -  4 Hz
	TCCR0A = 0x02;
  80:	ea e4       	ldi	r30, 0x4A	; 74
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	80 83       	st	Z, r24
	TCCR0B = 0x05;
  88:	e3 e5       	ldi	r30, 0x53	; 83
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	80 83       	st	Z, r24
	TIMSK = 0x10;
  90:	e9 e5       	ldi	r30, 0x59	; 89
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	80 83       	st	Z, r24
	OCR0A = 244;
  98:	e9 e4       	ldi	r30, 0x49	; 73
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	84 ef       	ldi	r24, 0xF4	; 244
  9e:	80 83       	st	Z, r24

	// ADC PB2
	ADMUX = 0x02;
  a0:	e7 e2       	ldi	r30, 0x27	; 39
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	ADCSRA = 0xC0;
  a8:	e6 e2       	ldi	r30, 0x26	; 38
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 83       	st	Z, r24


	sei();
  b0:	78 94       	sei

	while (1) {

//		Time = ADCL;

		if(SWpin_1)
  b2:	e6 e3       	ldi	r30, 0x36	; 54
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	88 23       	and	r24, r24
  bc:	a1 f0       	breq	.+40     	; 0xe6 <main+0xa6>
		{
			Time = ADCL;
  be:	e4 e2       	ldi	r30, 0x24	; 36
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 61 00 	sts	0x0061, r25
  cc:	80 93 60 00 	sts	0x0060, r24
			flag = 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 63 00 	sts	0x0063, r25
  d8:	80 93 62 00 	sts	0x0062, r24
			OUT_1 = 1;
  dc:	e8 e3       	ldi	r30, 0x38	; 56
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
		}


	return 0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
}
}
  ea:	08 95       	ret

000000ec <__vector_10>:


ISR(TIMER0_COMPA_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	if(flag == 1)
 106:	80 91 62 00 	lds	r24, 0x0062
 10a:	90 91 63 00 	lds	r25, 0x0063
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 05       	cpc	r25, r1
 112:	49 f4       	brne	.+18     	; 0x126 <__vector_10+0x3a>
		Time--;
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	90 91 61 00 	lds	r25, 0x0061
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	90 93 61 00 	sts	0x0061, r25
 122:	80 93 60 00 	sts	0x0060, r24

	if(Time == 0)
 126:	80 91 60 00 	lds	r24, 0x0060
 12a:	90 91 61 00 	lds	r25, 0x0061
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	49 f4       	brne	.+18     	; 0x144 <__vector_10+0x58>
	{
		flag = 0;
 132:	10 92 63 00 	sts	0x0063, r1
 136:	10 92 62 00 	sts	0x0062, r1
		OUT_1 = 0;
 13a:	e8 e3       	ldi	r30, 0x38	; 56
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	87 7f       	andi	r24, 0xF7	; 247
 142:	80 83       	st	Z, r24
	}

}
 144:	cf 91       	pop	r28
 146:	df 91       	pop	r29
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
